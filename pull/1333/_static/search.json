[{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/enum_importer/index.html#the-enum_importerpy-module","title":"The enum_importer.py module","text":"The enum_importer.py module\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/enum_importer/index.html#summary","title":"The enum_importer.py module > Summary","text":"Summary"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/enum_importer/index.html#description","title":"The enum_importer.py module > Description","text":"Description\n\nLibrary to import Mechanical enums.\n\nA useful subset of what is imported by\nAnsys Inc/v{NNN}/ACT/apis/Mechanical.py\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/logger/Configuration.html#configuration","title":"Configuration","text":"Configuration\n\n\n\nclass ansys.mechanical.core.embedding.logger.Configuration\n\nConfigures logger for Mechanical embedding."},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/logger/Configuration.html#overview","title":"Configuration > Overview","text":"Overview\n\nConstructors\n\n\n\n\n\nconfigure\n\nConfigure the logger for PyMechanical embedding.\n\nset_log_to_stdout\n\nConfigure logging to write to the standard output.\n\nset_log_to_file\n\nConfigure logging to write to a file.\n\nset_log_level\n\nSet the log level for all configured sinks.\n\nset_log_directory\n\nConfigure logging to write to a directory.\n\nset_log_base_directory\n\nConfigure logging to write in a time-stamped subfolder in this directory."},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/logger/Configuration.html#import-detail","title":"Configuration > Import detail","text":"Import detail\n\nfrom ansys.mechanical.core.embedding.logger import Configuration"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/logger/Configuration.html#method-detail","title":"Configuration > Method detail","text":"Method detail\n\n\n\nclassmethod Configuration.configure(level=logging.WARNING, directory=None, base_directory=None, to_stdout=True)\n\nConfigure the logger for PyMechanical embedding.\n\nParameters\n\nlevel\n\npython:int, optional\n\nLevel of logging that is defined in the logging package. The default is ‘DEBUG’.\nOptions are \"DEBUG\", \"INFO\", \"WARNING\", and \"ERROR\".\n\ndirectory\n\npython:str, optional\n\nDirectory to write log file to. The default is None, but by default the log\nwill appear somewhere in the system temp folder.\n\nbase_directory: str, optional\n\nBase directory to write log files to. Each instance of Mechanical will write its\nlog to a time-stamped subfolder within this directory. This is only possible to set\nbefore Mechanical is initialized.\n\nto_stdout\n\nbool, optional\n\nWhether to write log messages to the standard output, which is the\ncommand line. The default is True.\n\n\n\nclassmethod Configuration.set_log_to_stdout(value: bool) -> None\n\nConfigure logging to write to the standard output.\n\n\n\nclassmethod Configuration.set_log_to_file(value: bool) -> None\n\nConfigure logging to write to a file.\n\n\n\nclassmethod Configuration.set_log_level(level: int) -> None\n\nSet the log level for all configured sinks.\n\n\n\nclassmethod Configuration.set_log_directory(value: str) -> None\n\nConfigure logging to write to a directory.\n\n\n\nclassmethod Configuration.set_log_base_directory(directory: str) -> None\n\nConfigure logging to write in a time-stamped subfolder in this directory.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/app_libraries/index.html#the-app_librariespy-module","title":"The app_libraries.py module","text":"The app_libraries.py module\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/app_libraries/index.html#summary","title":"The app_libraries.py module > Summary","text":"Summary\n\nFunctions\n\n\n\n\n\nadd_mechanical_python_libraries\n\nAdd the Mechanical libraries path to sys.path."},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/app_libraries/index.html#description","title":"The app_libraries.py module > Description","text":"Description\n\nSystem to add python libraries shipped with mechanical to the path.\n\nMechanical ships some pure Python modules that can be imported within\nMechanical’s console window. These modules are located in\n\n/path/to/Ansys Inc/vNnn/Addins/ACT/libraries/Mechanical\n\nFor example, the following files can be found there:\n\nansys.py\n\nchart.py\n\ncomhelper.py\n\ndialogs.py\n\nengineeringdata.py\n\ngraphics.py\n\nmaterials.py\n\nmechanical.py\n\nunits.py\n\nwbjn.py\n\nSome (but not all) of these are usable from within an embedded instance\nof Mechanical in Python.\n\nThis module provides a method to add that path to sys.path so that they\ncan be imported with the import statement."},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/app_libraries/index.html#module-detail","title":"The app_libraries.py module > Module detail","text":"Module detail\n\n\n\napp_libraries.add_mechanical_python_libraries(app_or_version)\n\nAdd the Mechanical libraries path to sys.path.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/logger/linux_api/index.html#the-linux_apipy-module","title":"The linux_api.py module","text":"The linux_api.py module\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/logger/linux_api/index.html#summary","title":"The linux_api.py module > Summary","text":"Summary\n\nClasses\n\n\n\n\n\nAPIBackend\n\nProvides the API backend for the Mechanical logging system.\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/logger/linux_api/index.html#description","title":"The linux_api.py module > Description","text":"Description\n\nInternal Mechanical logging Linux API.\n\nThe Linux API is needed for version 2023 R2, where the .NET backend is Windows-only.\nThis API does not support some options, namely the base directory and log filename.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"getting_started/docker.html#using-mechanical-through-docker","title":"Using Mechanical through Docker","text":"Using Mechanical through Docker\n\nYou can run Mechanical within a container on any operating system\nusing Docker and connect to it with\nPyMechanical.\n\nRunning Mechanical in a containerized environment like Docker or Apptainer\n(formerly Singularity) is advantageous for several reasons, including:\n\nAbility to run in a consistent environment regardless of the host operating system\n\nPortability and ease of installation\n\nLarge-scale cluster deployment using Kubernetes\n\nGenuine application isolation through containerization"},{"objectID":"Home","href":"getting_started/docker.html#install-the-mechanical-image","title":"Using Mechanical through Docker > Install the Mechanical image","text":"Install the Mechanical image\n\nThere is a Docker image hosted in the PyMechanical GitHub repository that you\ncan download using your GitHub credentials.\n\nAssuming that you have Docker installed, you can authorize Docker to access\nthis repository using a GitHub personal access token with packages read\npermission. For more information, see GitHub’s Creating a personal access token.\n\nSave this token to a file with a command like this:\n\nThis command lets you send the token to Docker without leaving the token value\nin your history.\n\nNext, authorize Docker to access the repository with this code:\n\nYou can now launch Mechanical directly from Docker with a short script or\ndirectly from the command line. Because this image does not contain a license\nserver, you must enter in the IP address of your license server in the\nLICENSE_SERVER environment variable.\n\nLaunch Mechanical with this code:\n\nNote that port 10000, which is local to the container, is mapped to\nport 10000 on the host. This makes it possible to use different\nport mappings to launch multiple instances of Mechanical.\n\nAs Mechanical starts, you can see status information:"},{"objectID":"Home","href":"getting_started/docker.html#connect-to-the-mechanical-container","title":"Using Mechanical through Docker > Connect to the Mechanical container","text":"Connect to the Mechanical container\n\nYou can now connect to the Mechanical container with this code:\n\nIf you mapped to any port other than 10000, you would specify the port when\nconnecting to Mechanical:\n\nVerify your connection with this code:"},{"objectID":"Home","href":"getting_started/docker.html#additional-considerations","title":"Using Mechanical through Docker > Additional considerations","text":"Additional considerations\n\nYou can provide additional command line parameters to Mechanical by appending them\nto the Docker command. For example, this code shows how you pass feature flags:\n\nFor additional command line arguments, see the Scripting in Mechanical Guide in the\nAnsys Help.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/bolt_pretension.html#bolt-pretension","title":"Bolt pretension","text":"Bolt pretension\n\nThis example demonstrates how to insert a Static Structural analysis\ninto a new Mechanical session and execute a sequence of Python scripting\ncommands that define and solve a bolt-pretension analysis.\nScripts then evaluate the following results: deformation,\nequivalent stresses, contact, and bolt."},{"objectID":"Home","href":"examples/gallery_examples/01_basic/bolt_pretension.html#import-the-necessary-libraries","title":"Bolt pretension > Import the necessary libraries","text":"Import the necessary libraries"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/bolt_pretension.html#initialize-the-embedded-application","title":"Bolt pretension > Initialize the embedded application","text":"Initialize the embedded application"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/bolt_pretension.html#configure-graphics-for-image-export","title":"Bolt pretension > Configure graphics for image export","text":"Configure graphics for image export"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/bolt_pretension.html#set-the-geometry-import-group-for-the-model","title":"Bolt pretension > Set the geometry import group for the model","text":"Set the geometry import group for the model"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/bolt_pretension.html#download-and-import-the-geometry","title":"Bolt pretension > Download and import the geometry","text":"Download and import the geometry\n\nStatic Scene\n\n\n\nInteractive Scene\n\n"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/bolt_pretension.html#download-and-import-the-materials","title":"Bolt pretension > Download and import the materials","text":"Download and import the materials\n\nDownload the material files from the ansys/example-data repository\n\nAdd materials to the model and import the material files"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/bolt_pretension.html#define-analysis-and-unit-system","title":"Bolt pretension > Define analysis and unit system","text":"Define analysis and unit system\n\nAdd static structural analysis to the model\n\nStore the named selections\n\nSet the unit system to Standard NMM\n\nGet tree objects for each named selection\n\nCreate a list with material assignment for each model.Geometry.Children index\n\nAssign surface materials to the model.Geometry bodies"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/bolt_pretension.html#add-and-define-a-coordinate-system","title":"Bolt pretension > Add and define a coordinate system","text":"Add and define a coordinate system\n\nAdd a coordinate system to the model\n\nDefine the coordinate system and set its axis properties"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/bolt_pretension.html#create-functions-for-contact-region-set-up","title":"Bolt pretension > Create functions for contact region set up","text":"Create functions for contact region set up\n\nAdd a contact region to the body with the specified source location, target location,\nand contact type\n\nSet the friction coefficient, small sliding, and update stiffness settings for the contact region\n\nAdd a command snippet to the contact region with the specified Archard Wear Model"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/bolt_pretension.html#add-and-define-contact-regions","title":"Bolt pretension > Add and define contact regions","text":"Add and define contact regions\n\nSet up the model connections and delete the existing connections for ConnectionGroups\n\nSet the archard wear model and get the named selections from the model\n\nAdd a contact region for the model’s named selections Children 0 and 1 with the specified\ncontact type\n\nSet the connection group for the contact regions\n\nAdd a contact region for the model’s named selections Children 2 and 3 with the specified\ncontact type\n\nAdd a contact region for the model’s named selections Children 4 and 5 with the specified\ncontact type\n\nAdd a contact region for the model’s named selections Children 6 and 7 with the specified\ncontact type\n\nAdd a contact region for the model’s named selections Children 8 and 9 with the specified\ncontact type\n\nAdd a contact region for the model’s named selections Children 10 and 11 with the specified\ncontact type"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/bolt_pretension.html#create-functions-to-set-up-the-mesh","title":"Bolt pretension > Create functions to set up the mesh","text":"Create functions to set up the mesh\n\nSet the mesh method location for the specified method and object name\n\nAdd a mesh sizing to the mesh with the specified name, quantity value, and measurement"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/bolt_pretension.html#add-mesh-methods-sizing-and-face-meshing","title":"Bolt pretension > Add mesh methods, sizing, and face meshing","text":"Add mesh methods, sizing, and face meshing\n\nAdd the mesh sizing to the bodies_5 and shank objects\n\nAdd an automatic method to the mesh and set the method type\n\nAdd face meshing to the mesh and set the MappedMesh property to False\n\nAdd an automatic method to the mesh, set the method type, and set the source target selection\n\nActivate and generate the mesh\n\nCreate a function to display the image using matplotlib\n\nDisplay the mesh image\n\n"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/bolt_pretension.html#analysis-settings","title":"Bolt pretension > Analysis settings","text":"Analysis settings"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/bolt_pretension.html#define-loads-and-boundary-conditions","title":"Bolt pretension > Define loads and boundary conditions","text":"Define loads and boundary conditions\n\n"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/bolt_pretension.html#insert-results","title":"Bolt pretension > Insert results","text":"Insert results"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/bolt_pretension.html#solve-the-static-structural-solution","title":"Bolt pretension > Solve the static structural solution","text":"Solve the static structural solution"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/bolt_pretension.html#show-messages","title":"Bolt pretension > Show messages","text":"Show messages"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/bolt_pretension.html#display-the-results","title":"Bolt pretension > Display the results","text":"Display the results\n\nTotal deformation\n\n\n\nEquivalent stress on all bodies\n\n\n\nEquivalent stress on the shank\n\n"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/bolt_pretension.html#export-and-display-the-contact-status-animation","title":"Bolt pretension > Export and display the contact status animation","text":"Export and display the contact status animation\n\nCreate a function to update the animation frames\n\nExport and display the contact status animation\n\n"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/bolt_pretension.html#print-the-project-tree","title":"Bolt pretension > Print the project tree","text":"Print the project tree"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/bolt_pretension.html#clean-up-the-project","title":"Bolt pretension > Clean up the project","text":"Clean up the project\n\nTotal running time of the script: (1 minutes 56.938 seconds)\n\n\n\nDownload Jupyter notebook: bolt_pretension.ipynb\n\nDownload Python source code: bolt_pretension.py\n\nDownload zipped: bolt_pretension.zip\n\nGallery generated by Sphinx-Gallery\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/index.html#api-reference","title":"API reference","text":"API reference\n\nThis section describes ansys.mechanical.core endpoints, their capabilities, and how\nto interact with them programmatically.\n\n\n\nAdditionally, see the API references for ansys-tools-path here .\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/logging/PyMechanicalPercentStyle.html#pymechanicalpercentstyle","title":"PyMechanicalPercentStyle","text":"PyMechanicalPercentStyle\n\n\n\nclass ansys.mechanical.core.logging.PyMechanicalPercentStyle(fmt, *, defaults=None)\n\nBases: logging.PercentStyle\n\nControls the way PyMechanical formats the percent style."},{"objectID":"Home","href":"api/ansys/mechanical/core/logging/PyMechanicalPercentStyle.html#import-detail","title":"PyMechanicalPercentStyle > Import detail","text":"Import detail\n\nfrom ansys.mechanical.core.logging import PyMechanicalPercentStyle\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/logging/InstanceFilter.html#instancefilter","title":"InstanceFilter","text":"InstanceFilter\n\n\n\nclass ansys.mechanical.core.logging.InstanceFilter(name='')\n\nBases: logging.Filter\n\nEnsures that the instance name record always exists."},{"objectID":"Home","href":"api/ansys/mechanical/core/logging/InstanceFilter.html#overview","title":"InstanceFilter > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nfilter\n\nCheck the log record and return True to log it or False to discard it."},{"objectID":"Home","href":"api/ansys/mechanical/core/logging/InstanceFilter.html#import-detail","title":"InstanceFilter > Import detail","text":"Import detail\n\nfrom ansys.mechanical.core.logging import InstanceFilter"},{"objectID":"Home","href":"api/ansys/mechanical/core/logging/InstanceFilter.html#method-detail","title":"InstanceFilter > Method detail","text":"Method detail\n\n\n\nInstanceFilter.filter(record)\n\nCheck the log record and return True to log it or False to discard it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/pool/index.html#the-poolpy-module","title":"The pool.py module","text":"The pool.py module\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/pool/index.html#summary","title":"The pool.py module > Summary","text":"Summary\n\nClasses\n\n\n\n\n\nLocalMechanicalPool\n\nCreate a pool of Mechanical instances.\n\nFunctions\n\n\n\n\n\navailable_ports\n\nGet a list of a given number of available ports starting from a specified port number.\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/pool/index.html#description","title":"The pool.py module > Description","text":"Description\n\nThis module is for threaded implementations of the Mechanical interface."},{"objectID":"Home","href":"api/ansys/mechanical/core/pool/index.html#module-detail","title":"The pool.py module > Module detail","text":"Module detail\n\n\n\npool.available_ports(n_ports, starting_port=MECHANICAL_DEFAULT_PORT)\n\nGet a list of a given number of available ports starting from a specified port number.\n\nParameters\n\nn_ports\n\npython:int\n\nNumber of available ports to return.\n\nstarting_port: int, option\n\nNumber of the port to start the search from. The default is\nMECHANICAL_DEFAULT_PORT.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/background/BackgroundApp.html#backgroundapp","title":"BackgroundApp","text":"BackgroundApp\n\n\n\nclass ansys.mechanical.core.embedding.background.BackgroundApp(**kwargs)\n\nBackground App."},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/background/BackgroundApp.html#overview","title":"BackgroundApp > Overview","text":"Overview\n\nMethods\n\n\n\n\n\npost\n\nPost callable method to the background app thread.\n\ntry_post\n\nTry post callable method to the background app thread.\n\nstop\n\nStop the background app thread.\n\nProperties\n\n\n\n\n\napp\n\nGet the App instance of the background thread."},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/background/BackgroundApp.html#import-detail","title":"BackgroundApp > Import detail","text":"Import detail\n\nfrom ansys.mechanical.core.embedding.background import BackgroundApp"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/background/BackgroundApp.html#property-detail","title":"BackgroundApp > Property detail","text":"Property detail\n\n\n\nproperty BackgroundApp.app: ansys.mechanical.core.App\n\nGet the App instance of the background thread.\n\nIt is not meant to be used aside from passing to methods using post."},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/background/BackgroundApp.html#method-detail","title":"BackgroundApp > Method detail","text":"Method detail\n\n\n\nBackgroundApp.post(callable: Callable)\n\nPost callable method to the background app thread.\n\n\n\nBackgroundApp.try_post(callable: Callable)\n\nTry post callable method to the background app thread.\n\n\n\nBackgroundApp.stop() -> None\n\nStop the background app thread.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/messages/index.html#the-messagespy-module","title":"The messages.py module","text":"The messages.py module\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/messages/index.html#summary","title":"The messages.py module > Summary","text":"Summary\n\nClasses\n\n\n\n\n\nMessageManager\n\nMessage manager for adding, fetching, and printing messages.\n\nConstants\n\n\n\n\n\nHAS_PANDAS\n\nWhether or not pandas exists.\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/messages/index.html#description","title":"The messages.py module > Description","text":"Description\n\nMessage Manager for App."},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/messages/index.html#module-detail","title":"The messages.py module > Module detail","text":"Module detail\n\n\n\nmessages.HAS_PANDAS = True\n\nWhether or not pandas exists.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/messages/MessageManager.html#messagemanager","title":"MessageManager","text":"MessageManager\n\n\n\nclass ansys.mechanical.core.embedding.messages.MessageManager(app)\n\nMessage manager for adding, fetching, and printing messages."},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/messages/MessageManager.html#overview","title":"MessageManager > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nadd\n\nAdd a message and update the cache.\n\nremove\n\nRemove a message by index.\n\nshow\n\nPrint all messages with full details.\n\nclear\n\nClear all messages.\n\nSpecial methods\n\n\n\n\n\n__repr__\n\nProvide a DataFrame representation of all messages.\n\n__str__\n\nProvide a custom string representation of the messages.\n\n__getitem__\n\nAllow indexed access to messages.\n\n__len__\n\nReturn the number of messages."},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/messages/MessageManager.html#import-detail","title":"MessageManager > Import detail","text":"Import detail\n\nfrom ansys.mechanical.core.embedding.messages import MessageManager"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/messages/MessageManager.html#method-detail","title":"MessageManager > Method detail","text":"Method detail\n\n\n\nMessageManager.__repr__()\n\nProvide a DataFrame representation of all messages.\n\n\n\nMessageManager.__str__()\n\nProvide a custom string representation of the messages.\n\n\n\nMessageManager.__getitem__(index)\n\nAllow indexed access to messages.\n\n\n\nMessageManager.__len__()\n\nReturn the number of messages.\n\n\n\nMessageManager.add(severity: str, text: str)\n\nAdd a message and update the cache.\n\nParameters\n\nseverity\n\npython:str\n\nSeverity of the message. Can be “info”, “warning”, or “error”.\n\ntext\n\npython:str\n\nMessage text.\n\nExamples\n\n>>> app.messages.add(\"info\", \"User clicked the start button.\")\n\n\n\nMessageManager.remove(index: int)\n\nRemove a message by index.\n\nParameters\n\nindex\n\npython:int\n\nIndex of the message to remove.\n\nExamples\n\n>>> app.messages.remove(0)\n\n\n\nMessageManager.show(filter='Severity;DisplayString') -> None\n\nPrint all messages with full details.\n\nParameters\n\nfilter\n\npython:str, optional\n\nSemicolon separated list of message attributes to display.\nDefault is “severity;message”.\nif filter is “*”, all available attributes will be displayed.\n\nExamples\n\n>>> app.messages.show()\n... severity: info\n... message: Sample message.\n\n>>> app.messages.show(filter=\"time_stamp;severity;message\")\n... time_stamp: 1/30/2025 12:10:35 PM\n... severity: info\n... message: Sample message.\n\n\n\nMessageManager.clear()\n\nClear all messages.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/valve.html#basic-valve-implementation","title":"Basic valve implementation","text":"Basic valve implementation\n\nThis example demonstrates a basic implementation of a valve in Python."},{"objectID":"Home","href":"examples/gallery_examples/01_basic/valve.html#import-the-necessary-libraries","title":"Basic valve implementation > Import the necessary libraries","text":"Import the necessary libraries"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/valve.html#initialize-the-embedded-application","title":"Basic valve implementation > Initialize the embedded application","text":"Initialize the embedded application"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/valve.html#create-functions-to-set-camera-and-display-images","title":"Basic valve implementation > Create functions to set camera and display images","text":"Create functions to set camera and display images"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/valve.html#configure-graphics-for-image-export","title":"Basic valve implementation > Configure graphics for image export","text":"Configure graphics for image export"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/valve.html#download-and-import-the-geometry-file","title":"Basic valve implementation > Download and import the geometry file","text":"Download and import the geometry file\n\nImport the geometry\n\nStatic Scene\n\n\n\nInteractive Scene\n\n"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/valve.html#assign-the-materials-and-mesh-the-geometry","title":"Basic valve implementation > Assign the materials and mesh the geometry","text":"Assign the materials and mesh the geometry\n\nDefine the mesh settings and generate the mesh\n\n"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/valve.html#add-a-static-structural-analysis-and-apply-boundary-conditions","title":"Basic valve implementation > Add a static structural analysis and apply boundary conditions","text":"Add a static structural analysis and apply boundary conditions\n\n\n\nAdd results to the analysis solution"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/valve.html#solve-the-solution","title":"Basic valve implementation > Solve the solution","text":"Solve the solution"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/valve.html#show-messages","title":"Basic valve implementation > Show messages","text":"Show messages"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/valve.html#display-the-results","title":"Basic valve implementation > Display the results","text":"Display the results\n\nShow the total deformation image\n\n\n\nShow the equivalent stress image\n\n\n\nCreate a function to update the animation frames\n\nExport the stress animation\n\n"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/valve.html#display-the-output-file-from-the-solve","title":"Basic valve implementation > Display the output file from the solve","text":"Display the output file from the solve"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/valve.html#print-the-project-tree","title":"Basic valve implementation > Print the project tree","text":"Print the project tree"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/valve.html#clean-up-the-project","title":"Basic valve implementation > Clean up the project","text":"Clean up the project\n\nTotal running time of the script: (0 minutes 20.509 seconds)\n\n\n\nDownload Jupyter notebook: valve.ipynb\n\nDownload Python source code: valve.py\n\nDownload zipped: valve.zip\n\nGallery generated by Sphinx-Gallery\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/background/index.html#the-backgroundpy-module","title":"The background.py module","text":"The background.py module\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/background/index.html#summary","title":"The background.py module > Summary","text":"Summary\n\nClasses\n\n\n\n\n\nBackgroundApp\n\nBackground App.\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/background/index.html#description","title":"The background.py module > Description","text":"Description\n\nClass for running Mechanical on a background thread.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"kil/pymechanical.html#pymechanical","title":"PyMechanical","text":"PyMechanical"},{"objectID":"Home","href":"kil/pymechanical.html#known-issues-and-limitations","title":"PyMechanical > Known issues and limitations","text":"Known issues and limitations\n\nIt is suggested to use latest stable version of PyMechanical.\nAny issues and limitations for previous versions are not currently documented.\nIf you find any other, please create an issue `here <pymechanical_issue_>`_"},{"objectID":"Home","href":"kil/pymechanical.html#limitations-in-v011","title":"PyMechanical > Limitations in v0.11","text":"Limitations in v0.11\n\nApp.plot() visualization feature is available only for geometry. You cannot plot mesh or results\nbut you can export these data as images or an animation.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/rpc/server/index.html#the-serverpy-module","title":"The server.py module","text":"The server.py module\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/rpc/server/index.html#summary","title":"The server.py module > Summary","text":"Summary\n\nClasses\n\n\n\n\n\nForegroundAppBackend\n\nBackend for the python server where mechanical uses the main thread.\n\nBackgroundAppBackend\n\nBackend for the python server where mechanical uses the background thread.\n\nMechanicalService\n\nStarts Mechanical app services.\n\nMechanicalEmbeddedServer\n\nStart rpc server.\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/rpc/server/index.html#description","title":"The server.py module > Description","text":"Description\n\nRemote Procedure Call (RPC) server.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/examples/downloads/index.html#the-downloadspy-module","title":"The downloads.py module","text":"The downloads.py module\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/examples/downloads/index.html#summary","title":"The downloads.py module > Summary","text":"Summary\n\nFunctions\n\n\n\n\n\ndownload_file\n\nDownload a file from PyAnsys examples Github repo.\n\ndelete_downloads\n\nDelete all downloaded examples to free space or update the files."},{"objectID":"Home","href":"api/ansys/mechanical/core/examples/downloads/index.html#description","title":"The downloads.py module > Description","text":"Description\n\nFunctions to download sample datasets from the PyAnsys data repository."},{"objectID":"Home","href":"api/ansys/mechanical/core/examples/downloads/index.html#module-detail","title":"The downloads.py module > Module detail","text":"Module detail\n\n\n\ndownloads.download_file(filename: str, *directory: str, destination: str | None = None, force: bool = False)\n\nDownload a file from PyAnsys examples Github repo.\n\nParameters\n\nfilename: str\n\nName of the file to download\n\ndirectory: tuple[str]\n\nPath under the PyAnsys Github examples repo\n\ndestination: Optional[str]\n\nOptional destination to download the directory to\n\nforce: bool\n\nFlag to force download even if the file exists in cache\n\nReturns\n\nTuple[python:str, python:str]\n\nTuple containing filepath to be used and the local filepath of the downloaded directory\nThe two are different in case of containers.\n\nExamples\n\nDownload a file from the server\n\n>>> from ansys.mechanical.core import examples\n>>> filename = examples.download_file('example_01_geometry.agdb', 'pymechanical', '00_basic')\n>>> filename\n'C:/Users/user/AppData/Local/ansys_mechanical_core/ansys_mechanical_core/examples/example_01_geometry.agdb'\n\n\n\ndownloads.delete_downloads() -> bool\n\nDelete all downloaded examples to free space or update the files.\n\nReturns\n\nbool\n\nTrue if delete_downlaods succeeds, False otherwise.\n\nExamples\n\nDelete all downloaded examples\n\n>>> from ansys.mechanical.core import examples\n>>> return_value = examples.delete_downloads()\n>>> return_value\n'True'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"getting_started/wsl.html#windows-subsystem-for-linux-wsl","title":"Windows Subsystem for Linux (WSL)","text":"Windows Subsystem for Linux (WSL)\n\nThis page explains how you use a PyAnsys library, more specifically PyMechanical,\nin the Windows Subsystem for Linux (WSL). WSL is a compatibility layer for\nrunning Linux binary executables natively on Windows 10, Windows 11, and\nWindows Server 2019. For more information, see:\n\nWikipedia’s Windows Subsystem for Linux\n\nMicrosoft’s What is the Windows Subsystem for Linux?\n\n\n\n\n\nThis page walks you through the installation of WSL on Windows and then\nshows how to use it together with Mechanical, PyMechanical, and\nDocker.\n\nThese instructions have not been fully tested with a VPN connection. If you\nexperience any problems connecting WSL to the internet, try to disconnect from the VPN."},{"objectID":"Home","href":"getting_started/wsl.html#run-pymechanical-on-wsl","title":"Windows Subsystem for Linux (WSL) > Run PyMechanical on WSL","text":"Run PyMechanical on WSL\n\nThere are two versions of WSL: WSL1 and WSL2. Because WSL2 provides many improvements\nover WSL1, you should upgrade to and use WSL2."},{"objectID":"Home","href":"getting_started/wsl.html#install-wsl","title":"Windows Subsystem for Linux (WSL) > Install WSL","text":"Install WSL\n\nInstall WSL by following the instructions in Microsoft’s Install Linux on Windows with WSL.\n\n"},{"objectID":"Home","href":"getting_started/wsl.html#install-the-centos7-wsl-distribution","title":"Windows Subsystem for Linux (WSL) > Install the CentOS7 WSL distribution","text":"Install the CentOS7 WSL distribution\n\nYou can install the CentOS7 WSL using an unofficial distribution from the\nhttps://github.com/wsldl-pg/CentWSL/ package or the\nhttps://github.com/mishamosher/CentOS-WSL/ package.\n\nOptionally, you can try Ubuntu, but it has not been tested yet in the context of WSL."},{"objectID":"Home","href":"getting_started/wsl.html#install-ansys-products-in-wsl-centos7","title":"Windows Subsystem for Linux (WSL) > Install Ansys products in WSL CentOS7","text":"Install Ansys products in WSL CentOS7\n\nIf you are using CentOS 7, before installing Mechanical, you must install some\nrequired libraries:"},{"objectID":"Home","href":"getting_started/wsl.html#install-ansys-products","title":"Windows Subsystem for Linux (WSL) > Install Ansys products","text":"Install Ansys products\n\nTo install Ansys products in WSL, perform these steps:\n\nDownload the Ansys Structures image for the current Ansys release from the Ansys Customer Portal.\n\nIf you are  downloading the image on a Windows machine, you should later copy the image to\nWSL.\n\nExtract the compressed source code file (tar.gz) with this command:\n\nTo install Mechanical, go into the folder where the files have been extracted\nand run this command:\n\nwhere:\n\n-silent : Initiates a silent installation, which means no GUI is shown.\n\n-install_dir /path/ : Specifies the directory to install the product or\nlicense manager to. If you want to install to the default location, you can\nomit the -install_dir argument. The default location is /ansys_inc\nif the symbolic link is set. Otherwise, it defaults to /usr/ansys_inc.\n\n-<product_flag> : Specifies the one or more products to install.\nIf you omit this argument, all products are installed. The Ansys, Inc.\nInstallation Guides in the Ansys Help provides a list of valid\nvalues for the product_flags argument in Chapter 6\nof the Linux Installation Guide and Chapter 7\nof the Windows Installation Guide.\n\nIn the preceding example for Mechanical, you only need to specify the -mechapdl flag.\n\nAfter installing Mechanical directly in /ansys_inc or /usr/ansys_inc,\nyou create a symbolic link with this command:\n\nBy default, PyMechanical expects the Mechanical executable to be in\n/usr/ansys_inc. Whether you install it there or not, you should\nuse a symbolic link to associate that directory with your Ansys installation\ndirectory (/*/ansys_inc)."},{"objectID":"Home","href":"getting_started/wsl.html#post-installation-setup","title":"Windows Subsystem for Linux (WSL) > Post-installation setup","text":"Post-installation setup"},{"objectID":"Home","href":"getting_started/wsl.html#open-ports-for-license-server-communication","title":"Windows Subsystem for Linux (WSL) > Open ports for license server communication","text":"Open ports for license server communication\n\nTheory: You should open the ports 1055 and 2325 for license server\ncommunication in the Windows Control Panel. For the steps to set advanced\nWindows firewall options, see Microsoft’s How to open port in Windows 10 Firewall?\n\nReality: This works if you want to run a Docker image using a WSL Linux image\nto host this Docker image. The Docker image successfully communicates with the Windows\nlicense server using these ports if you use the '-p' flag when running the\nDocker image with these ports open. For more information, see\nRun Mechanical on a local Docker image.\n\nIf you want to run Mechanical in the CentOS7 image and use the Windows license\nserver, opening the ports might not work properly because the Windows firewall\nseems to block all traffic coming from WSL.  For security purposes, you should\nstill try to open ports 1055 and 2325 in the Windows firewall and check if your\nMechanical installation can communicate with the Windows hosts. If you are having\nproblems after setting the firewall rules, you might have to disable the Windows\nfirewall for the WSL ethernet’s virtual interface. Because this might pose some\nunknown side effects and security risks, do so with caution. For more information,\nsee Disable the firewall on the WSL ethernet."},{"objectID":"Home","href":"getting_started/wsl.html#create-an-environmental-variable-in-wsl-that-points-to-the-license-server-on-the-windows-host","title":"Windows Subsystem for Linux (WSL) > Create an environmental variable in WSL that points to the license server on the Windows host","text":"Create an environmental variable in WSL that points to the license server on the Windows host\n\nThe IP address for the Windows host is given in the WSL /etc/hosts file before the name\nhost.docker.internal.\n\nThis host.docker.internal definition might not be available if Docker is\nnot installed.\n\nHere is an example of the WSL /etc/hosts file:\n\nYou can add the next lines to your WSL ~/.bashrc file to create an\nenvironment variable with the IP address:"},{"objectID":"Home","href":"getting_started/wsl.html#run-mechanical-on-a-local-docker-image","title":"Windows Subsystem for Linux (WSL) > Run Mechanical on a local Docker image","text":"Run Mechanical on a local Docker image\n\nTo run a Docker image, you must follow all steps in Run PyMechanical on WSL.\n\nAdditionally, run a Docker image of PyMechanical with this command:\n\nSuccessive runs should restart the container. Or, delete the container and rerun it with\nthis code:\n\nRunning a Docker image creates a log.txt file in your current directory location.\n\nEnsure that your port 10001 is open in your firewall.\n\nYou should use a script file (batch .bat or PowerShell .ps)\nto run the preceding commands all at once.\n\nNotice that the WSL internal gRPC port (10000) is being mapped to a\ndifferent Windows host port (10001) to avoid ports conflicts.\n\nThis image is ready to be connected to from WSL or the Windows host. However,\nyou should specify the IP address and port using one of the following methods.\n\nMethod 1\n\nMethod 2\n\nMethod 3\n\nThis method specifies the IP address and port using environment variables that are read when\nthe Mechanical instance is launched."},{"objectID":"Home","href":"getting_started/wsl.html#additional-information","title":"Windows Subsystem for Linux (WSL) > Additional information","text":"Additional information"},{"objectID":"Home","href":"getting_started/wsl.html#ip-addresses","title":"Windows Subsystem for Linux (WSL) > IP addresses","text":"IP addresses\n\nThe IP address 127.0.0.1 specified in Run Mechanical on a local Docker image is\nthe IP address of WSL CentOS from the WSL perspective, whereas the IP address for the Windows\nhost is typically 127.0.1.1.\n\nDocker builds the PyMechanical images using the WSL distribution as the base. Hence, PyMechanical\nis running on a Linux WSL distribution, which is running on a Windows host. Because the Docker image\nshares resources with WSL, it also shares the internal IP address with the WSL distribution."},{"objectID":"Home","href":"getting_started/wsl.html#ansys-installation-flags","title":"Windows Subsystem for Linux (WSL) > Ansys installation flags","text":"Ansys installation flags\n\nTo obtain license server information, use one of the following methods to access the INSTALL file\nand then inspect the last few lines.\n\nMethod 1\n\nMethod 2"},{"objectID":"Home","href":"getting_started/wsl.html#license-server-information-for-the-client","title":"Windows Subsystem for Linux (WSL) > License server information for the client","text":"License server information for the client\n\nThe -licserverinfo argument specifies information that the client for the license server uses.\nThis argument is valid only in conjunction with a silent installation (INSTALL).\n\nSingle license server\n\nThe format for a single license server is:\n\nHere is an example:\n\nThree license servers\n\nThe format for three license servers is:\n\nHere is an example:"},{"objectID":"Home","href":"getting_started/wsl.html#language-for-the-installation","title":"Windows Subsystem for Linux (WSL) > Language for the installation","text":"Language for the installation\n\nThe -lang argument specifies the language that the installation uses."},{"objectID":"Home","href":"getting_started/wsl.html#file-specifying-the-products-to-install","title":"Windows Subsystem for Linux (WSL) > File specifying the products to install","text":"File specifying the products to install\n\nYou can specify an options file that lists the products that you want to\ninstall. When you do so, you must use the -productfile argument to specify the\nfull path to the options file."},{"objectID":"Home","href":"getting_started/wsl.html#ip-addresses-in-wsl-and-the-windows-host","title":"Windows Subsystem for Linux (WSL) > IP addresses in WSL and the Windows host","text":"IP addresses in WSL and the Windows host\n\nTheory: You should be able to access the Windows host using the IP address\nspecified in the WSL /etc/hosts file. This IP address is typically 127.0.1.1.\nThis means that the local WSL IP address is 127.0.0.1.\n\nReality: It is almost impossible to use the IP address 127.0.1.1 to\nconnect to the Windows host. However, it is possible to use the host.docker.internal\nhostname in the same WSL /etc/hosts file. This is an IP address that is\nrandomly allocated, which is an issue when you define the license server. However,\nupdating the .bashrc file as mentioned earlier resolves this issue."},{"objectID":"Home","href":"getting_started/wsl.html#disable-the-firewall-on-the-wsl-ethernet","title":"Windows Subsystem for Linux (WSL) > Disable the firewall on the WSL ethernet","text":"Disable the firewall on the WSL ethernet\n\nThere are two methods for disabling the firewall on the WSL ethernet.\n\nMethod 1\n\nThis method shows a notification:\n\nMethod 2\n\nThis method does not show a notification:\n\nOn Windows 10, you can use the wsl-windows-toolbar-launcher\npackage to launch Linux native apps directly from Windows with the standard\nWindows toolbar. Because the toolbar in Windows 11 differs, the README\nfile for this package explains how to run Microsoft’s PowerToys\npackage instead."},{"objectID":"Home","href":"getting_started/wsl.html#port-forwarding-on-windows-10","title":"Windows Subsystem for Linux (WSL) > Port forwarding on Windows 10","text":"Port forwarding on Windows 10\n\nYou can use Windows PowerShell commands for port forwarding on Windows 10."},{"objectID":"Home","href":"getting_started/wsl.html#link-ports-between-wsl-and-windows","title":"Windows Subsystem for Linux (WSL) > Link ports between WSL and Windows","text":"Link ports between WSL and Windows\n\nThis command links ports between WSL and Windows:"},{"objectID":"Home","href":"getting_started/wsl.html#view-all-forwards","title":"Windows Subsystem for Linux (WSL) > View all forwards","text":"View all forwards\n\nThis command allows you to view all forwards:"},{"objectID":"Home","href":"getting_started/wsl.html#delete-port-forwarding","title":"Windows Subsystem for Linux (WSL) > Delete port forwarding","text":"Delete port forwarding\n\nThis command allows you to delete port forwarding:"},{"objectID":"Home","href":"getting_started/wsl.html#reset-windows-network-adapters","title":"Windows Subsystem for Linux (WSL) > Reset Windows network adapters","text":"Reset Windows network adapters\n\nYou can reset Windows network adapters with this code:"},{"objectID":"Home","href":"getting_started/wsl.html#restart-the-wsl-service","title":"Windows Subsystem for Linux (WSL) > Restart the WSL service","text":"Restart the WSL service\n\nYou can restart the WSL service with this command:"},{"objectID":"Home","href":"getting_started/wsl.html#stop-all-processes-with-a-given-name","title":"Windows Subsystem for Linux (WSL) > Stop all processes with a given name","text":"Stop all processes with a given name\n\nYou can stop all processes with a given name with this command."},{"objectID":"Home","href":"getting_started/wsl.html#install-xvfb-in-centos7","title":"Windows Subsystem for Linux (WSL) > Install xvfb in CentOS7","text":"Install xvfb in CentOS7\n\nIf you want to replicate the CI/CD behavior, you must install the xvfb package\nas shown in the following command. For more information, see the .ci folder.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/remote_examples/index.html#remote-examples","title":"Remote examples","text":"Remote examples\n\nRemote examples demonstrate the basic simulation capabilities of Mechanical using remote sessions.\n\nFor more information, see Remote sessions examples.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/harmonic_acoustics.html#harmonic-acoustic-analysis","title":"Harmonic acoustic analysis","text":"Harmonic acoustic analysis\n\nThis example examines a harmonic acoustic analysis that uses\nsurface velocity to determine the steady-state response of a\nstructure and the surrounding fluid medium to loads and excitations\nthat vary sinusoidally with time."},{"objectID":"Home","href":"examples/gallery_examples/01_basic/harmonic_acoustics.html#import-the-necessary-libraries","title":"Harmonic acoustic analysis > Import the necessary libraries","text":"Import the necessary libraries"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/harmonic_acoustics.html#initialize-the-embedded-application","title":"Harmonic acoustic analysis > Initialize the embedded application","text":"Initialize the embedded application"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/harmonic_acoustics.html#create-functions-to-set-camera-and-display-images","title":"Harmonic acoustic analysis > Create functions to set camera and display images","text":"Create functions to set camera and display images"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/harmonic_acoustics.html#configure-graphics-for-image-export","title":"Harmonic acoustic analysis > Configure graphics for image export","text":"Configure graphics for image export"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/harmonic_acoustics.html#download-geometry-and-materials-files","title":"Harmonic acoustic analysis > Download geometry and materials files","text":"Download geometry and materials files"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/harmonic_acoustics.html#import-the-geometry","title":"Harmonic acoustic analysis > Import the geometry","text":"Import the geometry\n\nStatic Scene\n\n\n\nInteractive Scene\n\n"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/harmonic_acoustics.html#store-all-variables-necessary-for-analysis","title":"Harmonic acoustic analysis > Store all variables necessary for analysis","text":"Store all variables necessary for analysis"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/harmonic_acoustics.html#set-up-the-analysis","title":"Harmonic acoustic analysis > Set up the analysis","text":"Set up the analysis\n\nImport and assign the materials\n\nCreate a coordinate system\n\nGenerate the mesh"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/harmonic_acoustics.html#create-named-selections","title":"Harmonic acoustic analysis > Create named selections","text":"Create named selections\n\nCreate a function to set up named selections\n\nCreate a function to add generation criteria to the named selection\n\nAdd a named selection for the surface velocity and define its generation criteria\n\nAdd named selections for the absorption faces and define its generation criteria\n\nAdd named selections for the pressure faces and define its generation criteria\n\nAdd named selections for the acoustic region and define its generation criteria"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/harmonic_acoustics.html#set-up-the-analysis-settings","title":"Harmonic acoustic analysis > Set up the analysis settings","text":"Set up the analysis settings"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/harmonic_acoustics.html#set-the-boundary-conditions-and-load","title":"Harmonic acoustic analysis > Set the boundary conditions and load","text":"Set the boundary conditions and load\n\nSet the location for the acoustics region from the harmonic acoustics analysis\n\nAdd a surface velocity boundary condition to the harmonic acoustics analysis\n\nAdd an acoustic pressure boundary condition to the harmonic acoustics analysis\n\nAdd an acoustic absorption surface to the harmonic acoustics analysis\n\n"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/harmonic_acoustics.html#add-results-to-the-harmonic-acoustics-solution","title":"Harmonic acoustic analysis > Add results to the harmonic acoustics solution","text":"Add results to the harmonic acoustics solution\n\nAdd the acoustic pressure result\n\nAdd the acoustic total and directional velocity results\n\nAdd the acoustic sound pressure levels and frequency band responses\n\nAdd the acoustic kinetic and potentional energy frequency responses\n\nCreate a function to set the properties of the acoustic velocity result\n\nAdd the acoustic total and directional velocity results\n\nAdd the acoustic kinetic and potential energy results"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/harmonic_acoustics.html#solve-the-harmonic-acoustics-analysis-solution","title":"Harmonic acoustic analysis > Solve the harmonic acoustics analysis solution","text":"Solve the harmonic acoustics analysis solution"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/harmonic_acoustics.html#show-messages","title":"Harmonic acoustic analysis > Show messages","text":"Show messages"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/harmonic_acoustics.html#postprocessing","title":"Harmonic acoustic analysis > Postprocessing","text":"Postprocessing\n\nDisplay the total acoustic pressure result\n\n\n\nDisplay the total acoustic velocity\n\n\n\nDisplay the acoustic sound pressure level\n\n\n\nDisplay the acoustic directional velocity\n\n\n\nDisplay the acoustic kinetic energy\n\n\n\nCreate a function to update the animation frames\n\nDisplay the total acoustic pressure animation\n\n"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/harmonic_acoustics.html#display-the-output-file-from-the-solve","title":"Harmonic acoustic analysis > Display the output file from the solve","text":"Display the output file from the solve"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/harmonic_acoustics.html#print-the-project-tree","title":"Harmonic acoustic analysis > Print the project tree","text":"Print the project tree"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/harmonic_acoustics.html#clean-up-the-project","title":"Harmonic acoustic analysis > Clean up the project","text":"Clean up the project\n\nTotal running time of the script: (0 minutes 26.897 seconds)\n\n\n\nDownload Jupyter notebook: harmonic_acoustics.ipynb\n\nDownload Python source code: harmonic_acoustics.py\n\nDownload zipped: harmonic_acoustics.zip\n\nGallery generated by Sphinx-Gallery\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Contribute","href":"contribute/documentarian.html#contributing-as-a-documentarian","title":"Contribute > Contributing as a documentarian","text":"Contributing as a documentarian\n\n Write documentation\n\nExplain how to get started, use, and contribute to the project.\n\nwrite-documentation\n\n Add a new example\n\nShowcase the capabilities of PyMechanical by adding a new example.\n\nwrite-examples\n\n Build the documentation\n\nRender the documentation to see your changes reflected.\n\nbuild-documentation\n\n"},{"objectID":"Contribute","href":"contribute/documentarian.html#write-documentation","title":"Contribute > Contributing as a documentarian > Write documentation","text":"Write documentation\n\nThe documentation generator used in PyMechanical is Sphinx. Most of the documents\nare written in reStructuredText. Some parts of the documentation, like the\nExamples, use Python files. If\nyou are interested in writing examples, see the writing examples\nsection.\n\nThe documentation is located in the doc/source directory. The landing page\nis declared in the doc/source/index.rst file. The rest of the files contain\nthe main pages of different sections of the documentation. Finally, the\ndoc/source/_static/ folder contains various assets like images, and CSS\nfiles.\n\nThe layout of the doc/source directory is reflected in the slug of the\nonline documentation. For example, the\ndoc/source/contribute.rst renders as\nhttps://mechanical.docs.pyansys.com/version/stable/contribute.html.\n\nThus, if you create a new file, it important to follow these rules:\n\nUse lowercase letters for file and directory names\n\nUse short and descriptive names\n\nUse hyphens to separate words\n\nPlay smart with the hierarchy of the files and directories\n\nAll files need to be included in a table of contents. No dangling files are\npermitted. If a file is not included in the table of contents, Sphinx raises a\nwarning that makes the build to fail.\n\nA table of contents can be declared using a directive like this:\n\nThe path to the file is relative to the directory where the table of contents\nis declared.\n\n"},{"objectID":"Contribute","href":"contribute/documentarian.html#write-a-new-example","title":"Contribute > Contributing as a documentarian > Write a new example","text":"Write a new example\n\nThe Examples section of the documentation showcases different\ncapabilities of PyMechanical. Each example is a standalone Python script. Despite\nbeing *.py files, they are written in a mix of reStructuredText and Python.\n\nDocumentarians writing new examples are encouraged to open a new Jupyter Lab\nsession and write the example as a Jupyter Notebook. This way, the\ndocumentation can test the code and see the output in real-time. The created\nJupyter Notebook gets stored as a Python file automatically.\n\nFinally, here are some tips for writing examples:\n\nBegin your PyMechanical example by briefly describing the feature or workflow being demonstrated.\nFor instance, clarify if the example covers geometry creation, simulation setup, or result extraction.\n\nNext, clearly state the objective of the example.\nDefine the problem, list all required parameters (such as geometry details, material properties,\nboundary conditions), and specify what the example accomplishes\n(for example, running a modal analysis, extracting displacement results).\n\nFor each code cell, precede it with a concise explanation. In Jupyter notebooks,\nuse a markdown cell before each code cell to describe its purpose—such as importing modules,\nconfiguring the simulation, or visualizing results. This helps readers understand the context\nand reasoning behind each step.\n\n"},{"objectID":"Contribute","href":"contribute/documentarian.html#build-the-documentation","title":"Contribute > Contributing as a documentarian > Build the documentation","text":"Build the documentation\n\nTo build the documentation,  you need several dependencies installed.\nThese dependencies are listed in the pyproject.toml file under the\n[project.optional-dependencies] section. To install them, run:\n\nFor building documentation, you can run the usual rules provided in the\nSphinx make file:\n\nLinux / macOS\n\n\n\nWindows\n\n\n\nHowever, the recommended way of checking documentation integrity is to use\ntox:\n\nDocumentation building process involves building cheatsheets, which are generated using\nquarto. If have quarto installed locally and want to build cheatsheets, then set the\nenvironment variable BUILD_CHEATSHEET to true.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/app/GetterWrapper.html#getterwrapper","title":"GetterWrapper","text":"GetterWrapper\n\n\n\nclass ansys.mechanical.core.embedding.app.GetterWrapper(obj, getter)\n\nBases: object\n\nWrapper class around an attribute of an object."},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/app/GetterWrapper.html#overview","title":"GetterWrapper > Overview","text":"Overview\n\nSpecial methods\n\n\n\n\n\n__getattr__\n\nWrap getters to the wrapped object.\n\n__setattr__\n\nWrap setters to the wrapped object."},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/app/GetterWrapper.html#import-detail","title":"GetterWrapper > Import detail","text":"Import detail\n\nfrom ansys.mechanical.core.embedding.app import GetterWrapper"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/app/GetterWrapper.html#method-detail","title":"GetterWrapper > Method detail","text":"Method detail\n\n\n\nGetterWrapper.__getattr__(attr)\n\nWrap getters to the wrapped object.\n\n\n\nGetterWrapper.__setattr__(attr, value)\n\nWrap setters to the wrapped object.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/gallery_examples/index.html#basic-examples","title":"Basic Examples","text":"Basic Examples\n\nThis section demonstrates the basic simulation capabilities of PyMechanical.\n\nsphx_glr_examples_gallery_examples_01_basic_bolt_pretension.py\n\nsphx_glr_examples_gallery_examples_01_basic_cooling_holes_thermal_analysis.py\n\nsphx_glr_examples_gallery_examples_01_basic_fracture_analysis_contact_debonding.py\n\nsphx_glr_examples_gallery_examples_01_basic_harmonic_acoustics.py\n\nsphx_glr_examples_gallery_examples_01_basic_modal_acoustics_analysis.py\n\nsphx_glr_examples_gallery_examples_01_basic_steady_state_thermal_analysis.py\n\nsphx_glr_examples_gallery_examples_01_basic_topology_optimization_cantilever_beam.py\n\nsphx_glr_examples_gallery_examples_01_basic_valve.py\n\n\n\nGallery generated by Sphinx-Gallery\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/addins/AddinConfiguration.html#addinconfiguration","title":"AddinConfiguration","text":"AddinConfiguration\n\n\n\nclass ansys.mechanical.core.embedding.addins.AddinConfiguration(addin_configuration: str = 'Mechanical', **kwargs)\n\nConfiguration class for Mechanical."},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/addins/AddinConfiguration.html#overview","title":"AddinConfiguration > Overview","text":"Overview\n\nProperties\n\n\n\n\n\nno_act_addins\n\nProperty to disable all ACT Addins.\n\naddin_configuration\n\nWB1 Addin configuration name."},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/addins/AddinConfiguration.html#import-detail","title":"AddinConfiguration > Import detail","text":"Import detail\n\nfrom ansys.mechanical.core.embedding.addins import AddinConfiguration"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/addins/AddinConfiguration.html#property-detail","title":"AddinConfiguration > Property detail","text":"Property detail\n\n\n\nproperty AddinConfiguration.no_act_addins: bool\n\nProperty to disable all ACT Addins.\n\n\n\nproperty AddinConfiguration.addin_configuration: str\n\nWB1 Addin configuration name.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"user_guide/cli/ansys-mechanical-ideconfig.html#ansys-mechanical-ideconfig","title":"ansys-mechanical-ideconfig","text":"ansys-mechanical-ideconfig\n\nCLI tool to update settings.json files for autocomplete with ansys-mechanical-stubs."},{"objectID":"Home","href":"user_guide/cli/ansys-mechanical-ideconfig.html#parameters","title":"ansys-mechanical-ideconfig > Parameters","text":"Parameters\n\nide: str\n\nThe IDE to set up autocomplete settings. By default, it’s vscode.\n\ntarget: str\n\nThe type of settings to update. Either “user” or “workspace” in VS Code.\nBy default, it’s user.\n\nrevision: int\n\nThe Mechanical revision number. For example, “252”.\nIf unspecified, it finds the default Mechanical version from ansys-tools-path."},{"objectID":"Home","href":"user_guide/cli/ansys-mechanical-ideconfig.html#usage","title":"ansys-mechanical-ideconfig > Usage","text":"Usage\n\nThe following example demonstrates the main use of this tool:\n\n$ ansys-mechanical-ideconfig –ide vscode –target user –revision 252\n\nOptions\n\n\n\n-h, --help\n\nShow this message and exit.\n\n\n\n--ide <ide>\n\nThe IDE being used. By default, it’s vscode.\n\n\n\n--target <target>\n\nThe type of settings to update - either user or workspace settings in VS Code.\n\n\n\n--revision <revision>\n\nThe Mechanical revision number, e.g. “252” or “251”. If unspecified,it finds and uses the default version from ansys-tools-path."},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/logger/sinks/StandardSinks.html#standardsinks","title":"StandardSinks","text":"StandardSinks\n\n\n\nclass ansys.mechanical.core.embedding.logger.sinks.StandardSinks\n\nProvides built-in sinks."},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/logger/sinks/StandardSinks.html#overview","title":"StandardSinks > Overview","text":"Overview\n\nAttributes\n\n\n\n\n\nSTANDARD_LOG_FILE\n\n\n\nCONSOLE\n\n\n\nWINDOWS_DEBUGGER\n\n\n\nWINDOWS_ERROR_MESSAGE_BOX\n\n\n\nWINDOWS_FATAL_MESSAGE_BOX\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/logger/sinks/StandardSinks.html#import-detail","title":"StandardSinks > Import detail","text":"Import detail\n\nfrom ansys.mechanical.core.embedding.logger.sinks import StandardSinks"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/logger/sinks/StandardSinks.html#attribute-detail","title":"StandardSinks > Attribute detail","text":"Attribute detail\n\n\n\nStandardSinks.STANDARD_LOG_FILE = 0\n\n\n\n\n\nStandardSinks.CONSOLE = 1\n\n\n\n\n\nStandardSinks.WINDOWS_DEBUGGER = 2\n\n\n\n\n\nStandardSinks.WINDOWS_ERROR_MESSAGE_BOX = 3\n\n\n\n\n\nStandardSinks.WINDOWS_FATAL_MESSAGE_BOX = 4\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Contribute","href":"contribute/user.html#contributing-as-a-user","title":"Contribute > Contributing as a user","text":"Contributing as a user\n\nUsers can contribute in a variety of ways, such as reporting bugs, requesting\nnew features, testing in-development features, starting discussions, answering\nquestions, and sharing their work with the community.\n\nDo not include any proprietary or sensitive information when reporting bugs\nor showcasing your work.\n\n Report bugs\n\nFound a bug? Report it here.\n\nreport-bugs\n\n Request a new feature\n\nGot an idea for a new feature? Share it!\n\nrequest-a-new-feature\n\n Test a new feature\n\nAnxious to try out a new feature? Here’s how you can do it.\n\ntest-a-new-feature\n\n Start a discussion\n\nWant to discuss something? Start a discussion here.\n\nstart-a-discussion\n\n Answer questions\n\nHelp others by answering their questions.\n\nanswer-questions\n\n Share your work\n\nShare your work with the community.\n\nshare-your-work\n\n"},{"objectID":"Contribute","href":"contribute/user.html#report-bugs","title":"Contribute > Contributing as a user > Report bugs","text":"Report bugs\n\nIf you encounter a bug or an issue while using the project, please report it.\nYour feedback helps to identify problems.\n\nSearch the PyMechanical issue to see if the issue has already been reported.\n\nCreate a new issue if it hasn’t been reported.\n\nInclude a clear description of the problem.\n\nProvide steps to reproduce the issue.\n\nMention the version of the project you’re using.\n\nInclude screenshots or logs if possible.\n\n"},{"objectID":"Contribute","href":"contribute/user.html#request-a-new-feature","title":"Contribute > Contributing as a user > Request a new feature","text":"Request a new feature\n\nDo you have an idea for a new feature or an improvement? Your suggestions are\nwelcome. You can request a new feature by creating an issue in the PyMechanical issue\nboard.\n\n"},{"objectID":"Contribute","href":"contribute/user.html#test-a-new-feature","title":"Contribute > Contributing as a user > Test a new feature","text":"Test a new feature\n\nIt is possible to test a new feature before it is officially released. To do\nso, you can install PyMechanical from the source code.\n\n"},{"objectID":"Contribute","href":"contribute/user.html#start-a-discussion","title":"Contribute > Contributing as a user > Start a discussion","text":"Start a discussion\n\nComplex topics may require a discussion. Whether you want to know how to use\nPyMechanical for solving your specific problem or you have a suggestion for a new\nfeature, a discussion is a good place to start. You can open a new discussion\nin the PyMechanical discussion section.\n\n"},{"objectID":"Contribute","href":"contribute/user.html#answer-questions","title":"Contribute > Contributing as a user > Answer questions","text":"Answer questions\n\nAnother great way to contribute is to help others by answering their questions.\nMaintain a positive and constructive attitude while answering questions. If you\ndon’t know the answer, you can still help by pointing the person in the right\ndirection.\n\n"},{"objectID":"Contribute","href":"contribute/user.html#share-your-work","title":"Contribute > Contributing as a user > Share your work","text":"Share your work\n\nIf you have used PyMechanical to create something interesting, share it with the rest\nof the community. You can share your work in the PyMechanical discussion. Include\na brief description of your work and any relevant links that others may find\nuseful.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"user_guide/cli/ansys-mechanical.html#ansys-mechanical","title":"ansys-mechanical","text":"ansys-mechanical\n\nCLI tool to run mechanical.\n\nUSAGE:\n\nThe following example demonstrates the main use of this tool:\n\n$ ansys-mechanical -r 252 -g\n\nStarting Ansys Mechanical version 2025R2 in graphical mode…\n\nOptions\n\n\n\n-h, --help\n\nShow this message and exit.\n\n\n\n-p, --project-file <project_file>\n\nOpens Mechanical project file (.mechdb). Cannot be mixed with -i\n\n\n\n--private-appdata\n\nMake the appdata folder private. This enables you to run parallel instances of Mechanical.\n\n\n\n--port <port>\n\nStart mechanical in server mode with the given port number\n\n\n\n--features <features>\n\nBeta feature flags to set, as a semicolon delimited list. Options: [‘CPython’, ‘MultistageHarmonic’, ‘ThermalShells’]\n\n\n\n--enginetype <enginetype>\n\nEngine type to use with input scripts. Only applicable for version 261 when used with -i/–input-script.Default is ‘ironpython’.\n\nOptions\n\nironpython | cpython\n\n\n\n-i, --input-script <input_script>\n\nName of the input Python script. Cannot be mixed with -p\n\n\n\n--script-args <script_args>\n\nArguments to pass into the –input-script, -i. Write the arguments as a string, with each argument separated by a comma. For example, –script-args “arg1,arg2” This can only be used with the –input-script argument.\n\n\n\n--exit\n\nExit the application after running an input script. You can only use this command with –input-script argument (-i). The command defaults to true you are not running the application in graphical mode. The exit command is only supported in version 2024 R1 or later.\n\n\n\n-s, --show-welcome-screen\n\nShow the welcome screen, where you can select the file to open. Only affects graphical mode\n\n\n\n--debug\n\nShow a debug dialog right when the process starts.\n\n\n\n-r, --revision <revision>\n\nAnsys Revision number, e.g. “251” or “252”. If none is specified, uses the default from ansys-tools-path\n\n\n\n-g, --graphical\n\nGraphical mode"},{"objectID":"Home","href":"api/ansys/mechanical/core/launcher/index.html#the-launcherpy-module","title":"The launcher.py module","text":"The launcher.py module\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/launcher/index.html#summary","title":"The launcher.py module > Summary","text":"Summary\n\nClasses\n\n\n\n\n\nMechanicalLauncher\n\nLaunches Mechanical in batch or UI mode.\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/launcher/index.html#description","title":"The launcher.py module > Description","text":"Description\n\nLaunch Mechanical in batch or UI mode.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"kil/index.html#known-issues-and-limitations","title":"Known issues and limitations","text":"Known issues and limitations\n\nNote the following known issues and limitations. Some features may not be fully compatible across different versions of Mechanical and PyMechanical.\nAnsys recommends that you always use the latest version of both to achieve the best results.\n\n\n\n Mechanical\n\nKnown issues and limitations of Standalone Mechanical\n\nmechanical\n\n PyMechanical\n\nKnown issues and limitations of PyMechanical\n\npymechanical"},{"objectID":"Home","href":"kil/index.html#support","title":"Known issues and limitations > Support","text":"Support\n\nIf you encounter any issues or limitations with PyMechanical that hinder your work, please create\nan issue or discussion so the team can address them promptly:\n\nPyMechanical Issues: Report bugs and request new features.\n\nPyMechanical Discussions: Post questions, share ideas, and get community feedback.\n\nFor issues pertaining to Mechanical Scripting,\nplease make a post on the Ansys Developer Forum for Mechanical.\n\nIf you have general questions about PyAnsys or are unsure which repository to place an issue in,\nemail pyansys.core@ansys.com.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"user_guide/index.html#user-guide","title":"User guide","text":"User guide\n\nThis section provides a general overview of PyMechanical and how you use it. It also contains\ndetailed how-to guides on specific topics. The user guide is divided into the following sections:\n\nMechanical Scripting - Covers how to record scripts inside Mechanical, and threading.\n\nHow to - Provides step-by-step instructions for configuring PyMechanical, using globals, logging, and more.\n\nCommand Line Interface (CLI) - Details the CLI commands available for PyMechanical.\n\nRemote session - Explains how to use PyMechanical in a remote session.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Computation times","href":"sg_execution_times.html#computation-times","title":"Computation times","text":"Computation times\n\n05:32.429 total execution time for 8 files from all galleries:\n\n\n\n\n\n\n\nExample\n\nTime\n\nMem (MB)\n\nsphx_glr_examples_gallery_examples_01_basic_bolt_pretension.py (../../examples/01_basic/bolt_pretension.py)\n\n01:56.938\n\n0.0\n\nsphx_glr_examples_gallery_examples_01_basic_modal_acoustics_analysis.py (../../examples/01_basic/modal_acoustics_analysis.py)\n\n00:47.977\n\n0.0\n\nsphx_glr_examples_gallery_examples_01_basic_fracture_analysis_contact_debonding.py (../../examples/01_basic/fracture_analysis_contact_debonding.py)\n\n00:42.299\n\n0.0\n\nsphx_glr_examples_gallery_examples_01_basic_topology_optimization_cantilever_beam.py (../../examples/01_basic/topology_optimization_cantilever_beam.py)\n\n00:42.268\n\n0.0\n\nsphx_glr_examples_gallery_examples_01_basic_harmonic_acoustics.py (../../examples/01_basic/harmonic_acoustics.py)\n\n00:26.897\n\n0.0\n\nsphx_glr_examples_gallery_examples_01_basic_valve.py (../../examples/01_basic/valve.py)\n\n00:20.509\n\n0.0\n\nsphx_glr_examples_gallery_examples_01_basic_cooling_holes_thermal_analysis.py (../../examples/01_basic/cooling_holes_thermal_analysis.py)\n\n00:18.331\n\n0.0\n\nsphx_glr_examples_gallery_examples_01_basic_steady_state_thermal_analysis.py (../../examples/01_basic/steady_state_thermal_analysis.py)\n\n00:17.210\n\n0.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/resolver/index.html#the-resolverpy-module","title":"The resolver.py module","text":"The resolver.py module\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/resolver/index.html#summary","title":"The resolver.py module > Summary","text":"Summary\n\nFunctions\n\n\n\n\n\nresolve\n\nResolve function for all versions of Ansys Mechanical."},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/resolver/index.html#description","title":"The resolver.py module > Description","text":"Description\n\nThis is the .NET assembly resolving for embedding Ansys Mechanical.\n\nNote that for some Mechanical Addons - additional resolving may be\nnecessary. A resolve handler is shipped with Ansys Mechanical on Windows\nstarting in version 23.1 and on Linux starting in version 23.2"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/resolver/index.html#module-detail","title":"The resolver.py module > Module detail","text":"Module detail\n\n\n\nresolver.resolve(version)\n\nResolve function for all versions of Ansys Mechanical.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/initializer/index.html#the-initializerpy-module","title":"The initializer.py module","text":"The initializer.py module\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/initializer/index.html#summary","title":"The initializer.py module > Summary","text":"Summary\n\nFunctions\n\n\n\n\n\ninitialize\n\nInitialize Mechanical embedding.\n\nConstants\n\n\n\n\n\nINITIALIZED_VERSION\n\nConstant for the initialized version.\n\nSUPPORTED_MECHANICAL_EMBEDDING_VERSIONS\n\nSupported Mechanical embedding versions on Windows."},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/initializer/index.html#description","title":"The initializer.py module > Description","text":"Description\n\nInitializer for Mechanical embedding. Sets up paths and resolvers."},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/initializer/index.html#module-detail","title":"The initializer.py module > Module detail","text":"Module detail\n\n\n\ninitializer.initialize(version: int = None)\n\nInitialize Mechanical embedding.\n\n\n\ninitializer.INITIALIZED_VERSION = None\n\nConstant for the initialized version.\n\n\n\ninitializer.SUPPORTED_MECHANICAL_EMBEDDING_VERSIONS\n\nSupported Mechanical embedding versions on Windows.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/logger/windows_api/index.html#the-windows_apipy-module","title":"The windows_api.py module","text":"The windows_api.py module\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/logger/windows_api/index.html#summary","title":"The windows_api.py module > Summary","text":"Summary\n\nClasses\n\n\n\n\n\nAPIBackend\n\nProvides API backend for Mechanical logging system.\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/logger/windows_api/index.html#description","title":"The windows_api.py module > Description","text":"Description\n\nWindows API for internal Mechanical logging.\n\nThis API does not support some options, namely the base directory\nand log filename.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"user_guide/howto/globals.html#globals","title":"Globals","text":"Globals\n\nWhen using Mechanical scripting APIs (in either Mechanical’s graphical user interface or when\nsending scripts to a remote session of Mechanical), there are many global variables that are\nby default usable from Python. Some of these are API entry points, like those discussed in\nMechanical Scripting overview , while others are types and namespaces that are used by the\nscripting APIs. Examples of those are the Quantity, Transaction class or the DataModel\nentry point.\n\nTo add these global variables to the Python scope, create an instance of the App class\nwith the globals argument set to the Python global variables:\n\nAlternatively, you can use the update_globals method of the App class to update the global\nvariables:\n\nSome enum types are available when scripting inside of Mechanical, such as SelectionTypeEnum\nor LoadDefineBy. Because these number in the thousands, by default, these enums are\nincluded in these global variables. To avoid including them, set the second argument of\nupdate_globals to False. This option is only available for the update_globals method,\nnot for the globals argument of the App class:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/addins/index.html#the-addinspy-module","title":"The addins.py module","text":"The addins.py module\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/addins/index.html#summary","title":"The addins.py module > Summary","text":"Summary\n\nClasses\n\n\n\n\n\nAddinConfiguration\n\nConfiguration class for Mechanical.\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/addins/index.html#description","title":"The addins.py module > Description","text":"Description\n\nConfiguration system for embedded mechanical.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/mechanical_warnings/index.html#the-mechanical_warningspy-module","title":"The mechanical_warnings.py module","text":"The mechanical_warnings.py module\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/mechanical_warnings/index.html#summary","title":"The mechanical_warnings.py module > Summary","text":"Summary\n\nFunctions\n\n\n\n\n\nconnect_warnings\n\nConnect Mechanical warnings to the warnings Python module.\n\ndisconnect_warnings\n\nDisconnect Mechanical warnings from the warnings Python module."},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/mechanical_warnings/index.html#description","title":"The mechanical_warnings.py module > Description","text":"Description\n\nHook to register obsolete warnings."},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/mechanical_warnings/index.html#module-detail","title":"The mechanical_warnings.py module > Module detail","text":"Module detail\n\n\n\nmechanical_warnings.connect_warnings(app: ansys.mechanical.core.embedding.app.App)\n\nConnect Mechanical warnings to the warnings Python module.\n\n\n\nmechanical_warnings.disconnect_warnings(app)\n\nDisconnect Mechanical warnings from the warnings Python module.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/graphics/index.html#the-graphics-package","title":"The graphics package","text":"The graphics package\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/graphics/index.html#summary","title":"The graphics package > Summary","text":"Summary\n\nSubmodules\n\n\n\n\n\nembedding_plotter\n\nPyVista plotter.\n\nusd_converter\n\nConverter to OpenUSD.\n\nutils\n\nCommon plotting utilities.\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/graphics/index.html#description","title":"The graphics package > Description","text":"Description\n\nNamespace module for embedding visualization.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/transaction/index.html#the-transactionpy-module","title":"The transaction.py module","text":"The transaction.py module\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/transaction/index.html#summary","title":"The transaction.py module > Summary","text":"Summary\n\nClasses\n\n\n\n\n\nTransaction\n\nA class to speed up bulk user interactions using Ansys ACT Mechanical Transaction.\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/transaction/index.html#description","title":"The transaction.py module > Description","text":"Description\n\nA class to speed up bulk user interactions using Ansys ACT Mechanical Transaction.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/ui/index.html#the-uipy-module","title":"The ui.py module","text":"The ui.py module\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/ui/index.html#summary","title":"The ui.py module > Summary","text":"Summary\n\nClasses\n\n\n\n\n\nUILauncher\n\nLaunch the GUI using a temporary mechdb file.\n\nFunctions\n\n\n\n\n\nlaunch_ui\n\nLaunch the Mechanical UI.\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/ui/index.html#description","title":"The ui.py module > Description","text":"Description\n\nRun Mechanical UI from Python."},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/ui/index.html#module-detail","title":"The ui.py module > Module detail","text":"Module detail\n\n\n\nui.launch_ui(app: ansys.mechanical.core.embedding.App, delete_tmp_on_close: bool = True, dry_run: bool = False) -> None\n\nLaunch the Mechanical UI.\n\nPrecondition: Mechanical has to have already been saved\nSide effect: If Mechanical has ever been saved, it overwrites that save.\n\nParameters\n\napp: ansys.mechanical.core.embedding.app.App\n\nA Mechanical embedding application.\n\ndelete_tmp_on_close: bool\n\nWhether to delete the temporary mechdb file when the GUI is closed.\nBy default, this is True.\n\ndry_run: bool\n\nWhether or not to launch the GUI. By default, this is False.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"PyMechanical architecture","href":"architecture.html#pymechanical-architecture","title":"PyMechanical architecture","text":"PyMechanical architecture\n\nPyMechanical provides a Python interface to Ansys Mechanical. Mechanical is a\npolyglot 1 desktop app whose graphical user interface (GUI) runs on either\nthe Windows or Linux operating system. Mechanical’s APIs are implemented in C#\nusing .NET Framework 4.x. They are exposed to both C# and two implementations\n2 of Python, namely IronPython 3 and CPython.\n\nWithin Mechanical, Python scripting enables you to automate repetitive GUI\nactions. This is not unlike other apps developed either by Ansys or other\nsoftware companies. Python scripting leverages the Mechanical API.\n\nMechanical, like some other apps, is customizable. Using the same API that you\nwould use for scripting, you can implement extensions that add to the\ncapabilities of Mechanical. For example, buttons can be added to the GUI and\ncustom objects can be added to the data model. Even third-party or in-house\nsolvers can be integrated into Mechanical and can take advantage of the\npowerful meshing, generic CAD reader, and the intuitive pre- and post-\nprocessing experience of Mechanical.\n\nBefore discussing how Mechanical’s API is implemented, let’s first look at the software design\npattern known as the command pattern. You can use this pattern with many programming languages.\nFor a general description (using the Java programming language) of the command pattern, see\nCommand Design Pattern\nin the HowToDoInJava newsletter."},{"objectID":"PyMechanical architecture","href":"architecture.html#command-pattern","title":"PyMechanical architecture > Command pattern","text":"Command pattern\n\nMany interactive apps use the command pattern. It turns anything that the user\ndoes within the app into a command object, which is immediately executed. This\napproach carries some additional benefits 4.\n\nMore relevant to this discussion is how command patterns can be used to\nimplement automation APIs. If every action is a command, then that Command can\nserve as the API. So long as the Commands can be encoded in text, a scripting\nlanguage can be used to execute them. In fact, this approach is roughly how the\nAnsys Electronics Desktop, Ansys Mechanical APDL, and the Ansys Workbench apps\nimplement automation APIs for scripting.\n\nUsing the command pattern as a scripting API has disadvantages. Most\nimportantly, command APIs are not symmetric. The four fundamental operations on\ndata within a software app are Create, Read, Update, and\nDelete. These are often abbreviated as CRUD. While you can conceptually\nupdate, create, and delete using commands, you can not read using a command.\nThis makes it difficult to “visit” the app’s data model."},{"objectID":"PyMechanical architecture","href":"architecture.html#mechanical-api-implementation","title":"PyMechanical architecture > Mechanical API implementation","text":"Mechanical API implementation\n\nMechanical’s API serves the needs of both automation and customization. For\ncustomization, it is necessary to read the data model. For example, when\nintegrating a third-party solver, you must access boundary conditions,\ngeometry, material properties, mesh, and connections to properly input them to\nthe solver. As discussed earlier, the command pattern does not allow this kind\nof access. Due to this fact, the Mechanical API exposes its data model directly\nto the user. This is how a hypothetical command-based API would look for\nrenaming an object.\n\nInstead, an API based on a data model, like Mechanical’s API, looks like this:\n\nNotice that you could print the name by Reading a property of the object. A\ncommand-based API can not provide the same experience."},{"objectID":"PyMechanical architecture","href":"architecture.html#pymechanical-remote-interface","title":"PyMechanical architecture > PyMechanical remote interface","text":"PyMechanical remote interface\n\nOne way to interact with the Mechanical API from Python is as a remote session.\nYou can run Mechanical as a server and send a Remote Procedure Call (RPC).\nThe server handles the RPC and returns the response to the client. Currently,\nsending commands as a string and getting the result as a string is the only\noption."},{"objectID":"PyMechanical architecture","href":"architecture.html#pymechanical-embedded-instance","title":"PyMechanical architecture > PyMechanical embedded instance","text":"PyMechanical embedded instance\n\nThe embedded instance used by PyMechanical embeds an entire instance of the\nMechanical app in-memory inside of a Python program. There is no additional\nrunning process associated with it. Mechanical’s data model is directly\navailable within Python, which means that the fully CRUD data model of the\nMechanical API can be used."},{"objectID":"PyMechanical architecture","href":"architecture.html#distributed-systems","title":"PyMechanical architecture > Distributed systems","text":"Distributed systems\n\nThis section contains a very basic explanation of distributed systems. It is\nnot meant be exhaustive and rigorous, but it instead introduces just the topics\nnecessary as simply as possible to help you understand the choices made by the\ndesigners of PyMechanical.\n\nA distributed system is a software system that uses a network to distribute\nsoftware across physical machines. With a distributed system, the individual\npieces of that system do not share an address space and therefore cannot call\nfunctions of each other directly. Instead, they communicate with each other by\nsending messages to each other. Examples include email, multiplayer games, web\napps, and high-performance computing, among other things.\n\nDistributed systems have unique characteristics when compared to classical\nsoftware systems that share an address space. For instance, in a distributed\nsystem, any call can fail because of a problem with the network, and the caller\ncan not always know whether a call has failed. For this reason, features of\ninterest to distributed system designers, such as fault tolerance, redundancy,\nand idempotency, are not emphasized by classical software systems.\n\nIn a distributed system, any computer can theoretically talk to any other\ncomputer. However, it is useful to divide them conceptually into clients and\nservers. Clients send requests to servers. Servers are expected return a\nresponse to the client.\n\nThere are protocols 5 that describe how information moves between\ncomputers. The next section begins with an explanation of remote procedure calls."},{"objectID":"PyMechanical architecture","href":"architecture.html#remote-procedure-calls","title":"PyMechanical architecture > Remote procedure calls","text":"Remote procedure calls\n\nWhen one computer invokes a procedure on another computer using a network, it\nis said to have done an RPC. Unlike a normal procedure call, it can be\nunreliable and orders of magnitude slower. There also needs to be a handshake\nso that both sides understand how to interpret the bytes that move between\ncomputers 6. This handshake can be negotiated byte-per-byte, but in\npractice, the internet protocols provide useful conventions and standards that\nhave been tried and tested.\n\nWhile standards are useful, it is not practical for every developer to craft\npackets to send over the wire by hand. In many programming languages, libraries,\nand tools wrap around the most popular conventions of internet protocols. These\nlibraries and tools can be opinionated in how RPCs can and should be written.\nSome offer low-level method invocation facilities, like gRPC and zeroMQ. Others\ntake a view on how RPCs should be done. Two such views are Representational\nState Transfer (REST) and Remote Method Invocation (RMI)."},{"objectID":"PyMechanical architecture","href":"architecture.html#rest","title":"PyMechanical architecture > REST","text":"REST\n\nThe design principles of REST are often credited as being responsible for the\ninfinite scalability of the internet. It can be thought of as a set of styles\nor constraints that most web apps comply with or at least try to. Since REST\nis not an official standard, it can be implemented on any protocol. Since it\nwas designed for HTTP, it is usually associated with it and its direct\ndescendants 7. However, the principles of REST can be applied on any\nprotocol.\n\nApplications that conform to REST are said to provide RESTful APIs. For a more\ndetailed description, see What is a REST API on the Red Hat\nTechnology Topics page."},{"objectID":"PyMechanical architecture","href":"architecture.html#remote-method-invocation","title":"PyMechanical architecture > Remote method invocation","text":"Remote method invocation\n\nIn the nineties, Object Oriented Programming (OOP) exploded in popularity.\nAmong other things, OOP allows programmers to add abstractions on top of data\nin their code using objects. When done well, objects can reduce code complexity\nand makes large scale software easier to reason about. It was thought that even\nthe difference between RPCs and calls made in a program’s address space could\nbe abstracted. In effect, the user of an object does not need to know whether\nan object exists remotely or locally. Operations on that object could be done\nin the same way, regardless.\n\nThis approach is known as Remote Method Invocation (RMI). RMI was widely\nimplemented using CORBA, DCOM, Remoting (.NET), and Java RMI. However, this\napproach has fallen out of favor with the rise of the internet, as it was\nobserved that it does not scale in the same way that something like REST does.\nAs it became less popular, tools, and library support fell away. For instance,\nrecent versions of .NET do not implement the Remoting library, and COM/DCOM are\nno longer taken seriously by web apps.\n\nFor an illuminating discussion of the problems with RMI, see Microservices and\nthe First Law of Distributed Objects on\nMartin Fowler’s website."},{"objectID":"PyMechanical architecture","href":"architecture.html#remote-mechanical","title":"PyMechanical architecture > Remote mechanical","text":"Remote mechanical\n\nMechanical’s official API is that of an object model, and PyMechanical provides\nexactly that API to Python. Because object models are not suitable as remote\nAPIs, PyMechanical does not provide that API in a remote fashion. This is why\nthe remote session API is based on strings, while the embedded instance API can\nprovide the Mechanical API directly to Python."},{"objectID":"PyMechanical architecture","href":"architecture.html#a-different-remote-interface","title":"PyMechanical architecture > A different remote interface","text":"A different remote interface\n\nAn alternative remote API for Mechanical is practical so long as it is not\nusing RMI. In fact, Mechanical uses a REST API internally as part of its GUI.\nThis is not the official Mechanical API and is not currently documented. A new\nremote interface for Mechanical is not an immediate goal of PyMechanical."},{"objectID":"PyMechanical architecture","href":"architecture.html#using-pymechanical-in-a-distributed-system","title":"PyMechanical architecture > Using PyMechanical in a distributed system","text":"Using PyMechanical in a distributed system\n\nYou can still build a distributed system where Mechanical is run remotely using\nthe embedded instance of Mechanical in PyMechanical. For this to work, Python\nitself would run remotely, and therefore the embedded instance would run\nremotely. The communication across the network in that system would be done in\nPython.\n\nFootnotes\n\n1\n\nThis means that it is implemented using more than one programming language.\n\n2\n\nThe Python programming language is in fact only a specification of a language. CPython is the reference implementation developed by the creator of Python. There are others, including IronPython, PyPy, Cinder, and GraalPy.\n\n3\n\nIronPython is an implementation of the Python programming language using the DLR from .NET. It does not implement the Python/C API, which is why many Python packages cannot run within IronPython. It also currently only implements Python2.7.\n\n4\n\nUndo and redo are often implemented using a command pattern. They store all executed commands in a stack. Each command not only has the ability to execute, it also has the ability to undo itself. Undo and redo are then implemented by walking up and down the stack and executing the Command or its inverse function.\n\n5\n\nThe Internet Protocol (IP) model is a layered description and specification that describes how information moves on the internet.\n\n6\n\nActually, for normal procedure calls within an address space, there needs to be a similar handshake about how the inputs and arguments are passed. This is called a calling convention, and describes what to do with CPU registers.\n\n7\n\nHTTPS, HTTP/2, and HTTP/3.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Oops","href":"404.html#oops","title":"Oops","text":"Oops\n\nThis is unexpected.\n\nThe page you are requesting does not exist.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"getting_started/running_mechanical.html#launching-pymechanical","title":"Launching PyMechanical","text":"Launching PyMechanical\n\nThe ansys-mechanical-core package requires either a local or\nremote instance of Mechanical to communicate with. This page describes\nhow Mechanical is installed from the Ansys standard installer and\ndescribes how you launch and interface with Mechanical from Python."},{"objectID":"Home","href":"getting_started/running_mechanical.html#install-mechanical","title":"Launching PyMechanical > Install Mechanical","text":"Install Mechanical\n\nMechanical is installed by default from the Ansys standard installer.\nWhen you run the standard installer, look under the Structural Mechanics\nheading to verify that the Mechanical Products checkbox is selected.\nAlthough options in the standard installer might change, this image provides\na reference:"},{"objectID":"Home","href":"getting_started/running_mechanical.html#launch-a-remote-mechanical-session","title":"Launching PyMechanical > Launch a remote Mechanical session","text":"Launch a remote Mechanical session\n\nYou can use PyMechanical to launch a Mechanical session on the local machine\nPython is running on. Alternatively, you can run Mechanical’s command line\ndirectly on any machine to start Mechanical in server mode and then use its\nIP address to manually connect to it from Python."},{"objectID":"Home","href":"getting_started/running_mechanical.html#launch-mechanical-on-the-local-machine-using-python","title":"Launching PyMechanical > Launch Mechanical on the local machine using Python","text":"Launch Mechanical on the local machine using Python\n\nWhen Mechanical is installed locally on your machine, you can use the\nlaunch_mechanical()\nmethod to launch and automatically connect to Mechanical. While this method provides the\neasiest and fastest way to launch Mechanical, it only works with a local Mechanical installation.\n\nLaunch Mechanical locally with this code:"},{"objectID":"Home","href":"getting_started/running_mechanical.html#launch-mechanical-from-the-command-line","title":"Launching PyMechanical > Launch Mechanical from the command line","text":"Launch Mechanical from the command line\n\nThe ansys-mechanical utility is installed automatically with PyMechanical,\nand can be used to run Mechanical from the command line. To obtain help on\nusage, type the following command:\n\nYou can launch Mechanical in server mode from the command line and then\nmanually connect to the server. Use the port argument to select the port."},{"objectID":"Home","href":"getting_started/running_mechanical.html#connect-to-a-mechanical-session","title":"Launching PyMechanical > Connect to a Mechanical session","text":"Connect to a Mechanical session\n\nYou can connect to a Mechanical session from the same host or from an external host.\n\nAssuming that Mechanical is running locally at the default IP address (127.0.0.1) on the\ndefault port (10000), you would use this code to connect to it with this code:\n\nAlternatively, you can use the\nconnect_to_mechanical()\nfor same functionality.\n\nNow assume that a remote instance of Mechanical has been started in server mode. To connect to\nthe computer on your local area network that is running Mechanical, you can use either\nan IP address and port or a hostname and port.\n\nIP address and port\n\nAssume that Mechanical is running remotely at IP address 192.168.0.1 on port 10000.\n\nYou would connect to it with this code:\n\nor\n\nHostname and port\n\nAssume that Mechanical is running remotely at hostname myremotemachine on port 10000.\n\nYou would connect to it with this code:\n\nor"},{"objectID":"Home","href":"getting_started/running_mechanical.html#launching-issues","title":"Launching PyMechanical > Launching issues","text":"Launching issues\n\nFor any number of reasons, launching Mechanical can fail. Some approaches\nfollow for debugging launch failures."},{"objectID":"Home","href":"getting_started/running_mechanical.html#manually-set-the-location-of-the-executable-file","title":"Launching PyMechanical > Manually set the location of the executable file","text":"Manually set the location of the executable file\n\nIf you have a non-standard installation of Mechanical, PyMechanical might\nnot be able to find your installation. In this case, you should manually\nset the location of your Mechanical executable file as the first parameter\nfor the launch_mechanical() method.\n\nOn Windows\n\nOn Linux\n\nIf, when using the launch_mechanical()\nmethod, Mechanical still fails to launch or hangs while launching, pass the\nverbose_mechanical=True parameter. This prints the output of Mechanical in the Python console.\nYou can then use this output to debug why Mechanical isn’t launching.\n\nOn Windows, output is limited because of the way Mechanical launches."},{"objectID":"Home","href":"getting_started/running_mechanical.html#debug-from-the-command-line","title":"Launching PyMechanical > Debug from the command line","text":"Debug from the command line\n\nYou may need to run the launch command from the command line to debug why Mechanical is not launching.\nrunning the launch command from the command line.\n\nOpen a terminal and run the following command:\n\nIf the preceding command for your operating system doesn’t launch Mechanical, you might have\na variety of issues, including:\n\nLicense server setup\n\nRunning behind a VPN\n\nMissing dependencies"},{"objectID":"Home","href":"getting_started/running_mechanical.html#embed-a-mechanical-instance","title":"Launching PyMechanical > Embed a Mechanical instance","text":"Embed a Mechanical instance\n\nThe instructions for embedding a Mechanical instance are different on\nWindows and Linux. While the Python code is the same in both cases,\nLinux requires some additional environment variables."},{"objectID":"Home","href":"getting_started/running_mechanical.html#python-code","title":"Launching PyMechanical > Python code","text":"Python code"},{"objectID":"Home","href":"getting_started/running_mechanical.html#additional-information-for-linux","title":"Launching PyMechanical > Additional information for Linux","text":"Additional information for Linux\n\nStarting with 2023 R2, it is possible to embed an instance of Mechanical on Linux.\nHowever, because of differences in how Mechanical works on Linux, you cannot simply\nrun Python as usual. On Linux, certain environment variables must be set for the Python\nprocess before it starts. You can set up these environment variables using the mechanical-env\nscript which is part of PyMechanical"},{"objectID":"Home","href":"getting_started/running_mechanical.html#licensing-issues","title":"Launching PyMechanical > Licensing issues","text":"Licensing issues\n\nPADT has an Ansys\nproduct section. Posts about licensing are common.\n\nIf you are responsible for maintaining an Ansys license or have a personal installation\nof Ansys, you likely can access the\nLicensing\nsection of the Ansys Help, where you can view or download the Ansys, Inc. Licensing Guide for\ncomprehensive licensing information."},{"objectID":"Home","href":"getting_started/running_mechanical.html#vpn-issues","title":"Launching PyMechanical > VPN issues","text":"VPN issues\n\nSometimes, Mechanical has issues starting when VPN software is running. For more information,\naccess the Mechanical Users Guide\nin the Ansys Help.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/index.html#basic-examples","title":"Basic Examples","text":"Basic Examples\n\nThis section demonstrates the basic simulation capabilities of PyMechanical.\n\nsphx_glr_examples_gallery_examples_01_basic_bolt_pretension.py\n\nsphx_glr_examples_gallery_examples_01_basic_cooling_holes_thermal_analysis.py\n\nsphx_glr_examples_gallery_examples_01_basic_fracture_analysis_contact_debonding.py\n\nsphx_glr_examples_gallery_examples_01_basic_harmonic_acoustics.py\n\nsphx_glr_examples_gallery_examples_01_basic_modal_acoustics_analysis.py\n\nsphx_glr_examples_gallery_examples_01_basic_steady_state_thermal_analysis.py\n\nsphx_glr_examples_gallery_examples_01_basic_topology_optimization_cantilever_beam.py\n\nsphx_glr_examples_gallery_examples_01_basic_valve.py\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/ide_config/index.html#the-ide_configpy-module","title":"The ide_config.py module","text":"The ide_config.py module\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/ide_config/index.html#summary","title":"The ide_config.py module > Summary","text":"Summary\n\nFunctions\n\n\n\n\n\nget_stubs_location\n\nFind the ansys-mechanical-stubs installation location in site-packages.\n\nget_stubs_versions\n\nRetrieve the revision numbers in ansys-mechanical-stubs.\n\ncli\n\nCLI tool to update settings.json files for autocomplete with ansys-mechanical-stubs."},{"objectID":"Home","href":"api/ansys/mechanical/core/ide_config/index.html#description","title":"The ide_config.py module > Description","text":"Description\n\nConvenience CLI to run mechanical."},{"objectID":"Home","href":"api/ansys/mechanical/core/ide_config/index.html#module-detail","title":"The ide_config.py module > Module detail","text":"Module detail\n\n\n\nide_config.get_stubs_location()\n\nFind the ansys-mechanical-stubs installation location in site-packages.\n\nReturns\n\npathlib.Path\n\nThe path to the ansys-mechanical-stubs installation in site-packages.\n\n\n\nide_config.get_stubs_versions(stubs_location: pathlib.Path)\n\nRetrieve the revision numbers in ansys-mechanical-stubs.\n\nParameters\n\npathlib.Path\n\nThe path to the ansys-mechanical-stubs installation in site-packages.\n\nReturns\n\npython:list\n\nThe list containing minimum and maximum versions in the ansys-mechanical-stubs package.\n\n\n\nide_config.cli(ide: str, target: str, revision: int) -> None\n\nCLI tool to update settings.json files for autocomplete with ansys-mechanical-stubs.\n\nParameters\n\nide: str\n\nThe IDE to set up autocomplete settings. By default, it’s vscode.\n\ntarget: str\n\nThe type of settings to update. Either “user” or “workspace” in VS Code.\nBy default, it’s user.\n\nrevision: int\n\nThe Mechanical revision number. For example, “252”.\nIf unspecified, it finds the default Mechanical version from ansys-tools-path.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/logger/environ/index.html#the-environpy-module","title":"The environ.py module","text":"The environ.py module\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/logger/environ/index.html#summary","title":"The environ.py module > Summary","text":"Summary\n\nClasses\n\n\n\n\n\nEnvironBackend\n\nProvides the environment variable backend for Mechanical logging.\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/logger/environ/index.html#description","title":"The environ.py module > Description","text":"Description\n\nEnvironment variables for mechanical logging.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/rpc/default_server/DefaultServiceMethods.html#defaultservicemethods","title":"DefaultServiceMethods","text":"DefaultServiceMethods\n\n\n\nclass ansys.mechanical.core.embedding.rpc.default_server.DefaultServiceMethods(app: ansys.mechanical.core.embedding.app.App)\n\nDefault service methods for MechanicalEmbeddedServer."},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/rpc/default_server/DefaultServiceMethods.html#overview","title":"DefaultServiceMethods > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nrun_python_script\n\nRun scripts using Internal python engine.\n\nrun_python_script_from_file\n\nRun scripts using Internal python engine.\n\nclear\n\nClear the current project.\n\nlist_files\n\nList all files in the project directory.\n\nProperties\n\n\n\n\n\nproject_directory\n\nGet the project directory.\n\nSpecial methods\n\n\n\n\n\n__repr__\n\nReturn the representation of the instance."},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/rpc/default_server/DefaultServiceMethods.html#import-detail","title":"DefaultServiceMethods > Import detail","text":"Import detail\n\nfrom ansys.mechanical.core.embedding.rpc.default_server import DefaultServiceMethods"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/rpc/default_server/DefaultServiceMethods.html#property-detail","title":"DefaultServiceMethods > Property detail","text":"Property detail\n\n\n\nproperty DefaultServiceMethods.project_directory\n\nGet the project directory."},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/rpc/default_server/DefaultServiceMethods.html#method-detail","title":"DefaultServiceMethods > Method detail","text":"Method detail\n\n\n\nDefaultServiceMethods.__repr__()\n\nReturn the representation of the instance.\n\n\n\nDefaultServiceMethods.run_python_script(script: str, enable_logging=False, log_level='WARNING', progress_interval=2000)\n\nRun scripts using Internal python engine.\n\n\n\nDefaultServiceMethods.run_python_script_from_file(file_path: str, enable_logging=False, log_level='WARNING', progress_interval=2000)\n\nRun scripts using Internal python engine.\n\n\n\nDefaultServiceMethods.clear()\n\nClear the current project.\n\n\n\nDefaultServiceMethods.list_files()\n\nList all files in the project directory.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/index.html#examples","title":"Examples","text":"Examples\n\nHere is a series of examples using Mechanical with the ansys-mechanical-core library."},{"objectID":"Home","href":"examples/index.html#basic-examples","title":"Examples > Basic Examples","text":"Basic Examples\n\nThis section demonstrates the basic simulation capabilities of PyMechanical.\n\nsphx_glr_examples_gallery_examples_01_basic_bolt_pretension.py\n\nsphx_glr_examples_gallery_examples_01_basic_cooling_holes_thermal_analysis.py\n\nsphx_glr_examples_gallery_examples_01_basic_fracture_analysis_contact_debonding.py\n\nsphx_glr_examples_gallery_examples_01_basic_harmonic_acoustics.py\n\nsphx_glr_examples_gallery_examples_01_basic_modal_acoustics_analysis.py\n\nsphx_glr_examples_gallery_examples_01_basic_steady_state_thermal_analysis.py\n\nsphx_glr_examples_gallery_examples_01_basic_topology_optimization_cantilever_beam.py\n\nsphx_glr_examples_gallery_examples_01_basic_valve.py\n\n\n\nGallery generated by Sphinx-Gallery\n\n"},{"objectID":"Home","href":"examples/index.html#advanced-examples","title":"Examples > Advanced examples","text":"Advanced examples\n\nThis section contains examples that demonstrates advanced capabilities of Mechanical\nusing Pymechanical.\nFor more information, see Advanced examples.\n\n"},{"objectID":"Home","href":"examples/index.html#remote-examples","title":"Examples > Remote examples","text":"Remote examples\n\nRemote examples demonstrate the basic simulation capabilities of Mechanical using remote sessions.\n\nFor more information, see Remote sessions examples.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/utils/index.html#the-utilspy-module","title":"The utils.py module","text":"The utils.py module\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/utils/index.html#summary","title":"The utils.py module > Summary","text":"Summary\n\nFunctions\n\n\n\n\n\nsleep\n\nNon-blocking sleep for ms milliseconds.\n\nload_library_windows\n\nLoad a library into the python process on windows."},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/utils/index.html#description","title":"The utils.py module > Description","text":"Description\n\nMiscellaneous utilities."},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/utils/index.html#module-detail","title":"The utils.py module > Module detail","text":"Module detail\n\n\n\nutils.sleep(ms: int) -> None\n\nNon-blocking sleep for ms milliseconds.\n\nMechanical should still work during the sleep.\n\n\n\nutils.load_library_windows(library: str) -> int\n\nLoad a library into the python process on windows.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/run/index.html#the-runpy-module","title":"The run.py module","text":"The run.py module\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/run/index.html#summary","title":"The run.py module > Summary","text":"Summary\n\nFunctions\n\n\n\n\n\ncli\n\nCLI tool to run mechanical.\n\nConstants\n\n\n\n\n\nDRY_RUN\n\nDry run constant."},{"objectID":"Home","href":"api/ansys/mechanical/core/run/index.html#description","title":"The run.py module > Description","text":"Description\n\nConvenience CLI to run mechanical."},{"objectID":"Home","href":"api/ansys/mechanical/core/run/index.html#module-detail","title":"The run.py module > Module detail","text":"Module detail\n\n\n\nrun.cli(project_file: str, port: int, debug: bool, input_script: str, script_args: str, revision: int, graphical: bool, show_welcome_screen: bool, private_appdata: bool, exit: bool, features: str, enginetype: str)\n\nCLI tool to run mechanical.\n\nUSAGE:\n\nThe following example demonstrates the main use of this tool:\n\n$ ansys-mechanical -r 252 -g\n\nStarting Ansys Mechanical version 2025R2 in graphical mode…\n\n\n\nrun.DRY_RUN = False\n\nDry run constant.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/mechanical/Mechanical.html#mechanical","title":"Mechanical","text":"Mechanical\n\n\n\nclass ansys.mechanical.core.mechanical.Mechanical(ip=None, port=None, timeout=60.0, loglevel='WARNING', log_file=False, log_mechanical=None, cleanup_on_exit=False, channel=None, remote_instance=None, keep_connection_alive=True, **kwargs)\n\nBases: object\n\nConnects to a gRPC Mechanical server and allows commands to be passed."},{"objectID":"Home","href":"api/ansys/mechanical/core/mechanical/Mechanical.html#overview","title":"Mechanical > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nget_product_info\n\nGet product information by running a script on the Mechanical gRPC server.\n\nlaunch\n\nLaunch Mechanical in batch or UI mode.\n\nwait_till_mechanical_is_ready\n\nWait until Mechanical is ready.\n\nrun_python_script\n\nRun a Python script block inside Mechanical.\n\nrun_python_script_from_file\n\nRun the contents a python file inside Mechanical.\n\nexit\n\nExit Mechanical.\n\nupload\n\nUpload a file to the Mechanical instance.\n\nget_file_chunks\n\nConstruct the file upload request for the server.\n\nlist_files\n\nList the files in the working directory of Mechanical.\n\ndownload\n\nDownload files from the working directory of the Mechanical instance.\n\nsave_chunks_to_file\n\nSave chunks to a local file.\n\ndownload_project\n\nDownload all project files in the working directory of the Mechanical instance.\n\nclear\n\nClear the database.\n\nlog_message\n\nLog the message using the given log level.\n\nlog_debug\n\nLog the debug message.\n\nlog_info\n\nLog the info message.\n\nlog_warning\n\nLog the warning message.\n\nlog_error\n\nLog the error message.\n\nverify_valid_connection\n\nVerify whether the connection to Mechanical is valid.\n\nProperties\n\n\n\n\n\nlog\n\nLog associated with the current Mechanical instance.\n\nbackend\n\nReturn the backend type.\n\nversion\n\nGet the Mechanical version based on the instance.\n\nname\n\nName (unique identifier) of the Mechanical instance.\n\nbusy\n\nReturn True when the Mechanical gRPC server is executing a command.\n\nlocked\n\nInstance is in use within a pool.\n\nis_alive\n\nWhether there is an active connection to the Mechanical gRPC server.\n\nproject_directory\n\nGet the project directory for the currently connected Mechanical instance.\n\nexited\n\nWhether Mechanical already exited.\n\nStatic methods\n\n\n\n\n\nset_log_level\n\nSet the log level.\n\nconvert_to_server_log_level\n\nConvert the log level to the server log level.\n\nSpecial methods\n\n\n\n\n\n__del__\n\nClean up on exit.\n\n__repr__\n\nGet the user-readable string form of the Mechanical instance."},{"objectID":"Home","href":"api/ansys/mechanical/core/mechanical/Mechanical.html#import-detail","title":"Mechanical > Import detail","text":"Import detail\n\nfrom ansys.mechanical.core.mechanical import Mechanical"},{"objectID":"Home","href":"api/ansys/mechanical/core/mechanical/Mechanical.html#property-detail","title":"Mechanical > Property detail","text":"Property detail\n\n\n\nproperty Mechanical.log\n\nLog associated with the current Mechanical instance.\n\n\n\nproperty Mechanical.backend: str\n\nReturn the backend type.\n\n\n\nproperty Mechanical.version: str\n\nGet the Mechanical version based on the instance.\n\nExamples\n\nGet the version of the connected Mechanical instance.\n\n>>> mechanical.version\n'252'\n\n\n\nproperty Mechanical.name\n\nName (unique identifier) of the Mechanical instance.\n\n\n\nproperty Mechanical.busy\n\nReturn True when the Mechanical gRPC server is executing a command.\n\n\n\nproperty Mechanical.locked\n\nInstance is in use within a pool.\n\n\n\nproperty Mechanical.is_alive: bool\n\nWhether there is an active connection to the Mechanical gRPC server.\n\n\n\nproperty Mechanical.project_directory\n\nGet the project directory for the currently connected Mechanical instance.\n\nExamples\n\nGet the project directory of the connected Mechanical instance.\n\n>>> mechanical.project_directory\n'/tmp/ANSYS.username.1/AnsysMech3F97/Project_Mech_Files/'\n\n\n\nproperty Mechanical.exited\n\nWhether Mechanical already exited."},{"objectID":"Home","href":"api/ansys/mechanical/core/mechanical/Mechanical.html#method-detail","title":"Mechanical > Method detail","text":"Method detail\n\n\n\nMechanical.__del__()\n\nClean up on exit.\n\n\n\nstatic Mechanical.set_log_level(loglevel)\n\nSet the log level.\n\nParameters\n\nloglevel\n\npython:str, python:int\n\nLevel of logging. Options are \"DEBUG\", \"INFO\", \"WARNING\"\nand \"ERROR\".\n\nExamples\n\nSet the log level to the \"DEBUG\" level.\n\n# >>> mechanical.set_log_level(‘DEBUG’)\n#\n# Set the log level to info\n#\n# >>> mechanical.set_log_level(‘INFO’)\n#\n# Set the log level to warning\n#\n# >>> mechanical.set_log_level(‘WARNING’)\n#\n# Set the log level to error\n#\n# >>> mechanical.set_log_level(‘ERROR’)\n\n\n\nMechanical.get_product_info()\n\nGet product information by running a script on the Mechanical gRPC server.\n\n\n\nMechanical.__repr__()\n\nGet the user-readable string form of the Mechanical instance.\n\n\n\nMechanical.launch(cleanup_on_exit=True)\n\nLaunch Mechanical in batch or UI mode.\n\nParameters\n\ncleanup_on_exit\n\nbool, optional\n\nWhether to exit Mechanical when Python exits. The default is True.\nWhen False, Mechanical is not exited when the garbage for this\nMechanical instance is collected.\n\n\n\nMechanical.wait_till_mechanical_is_ready(wait_time=-1)\n\nWait until Mechanical is ready.\n\nParameters\n\nwait_time\n\npython:float, optional\n\nMaximum allowable time in seconds for connecting to the Mechanical gRPC server.\n\n\n\nstatic Mechanical.convert_to_server_log_level(log_level)\n\nConvert the log level to the server log level.\n\nParameters\n\nlog_level\n\npython:str\n\nLevel of logging. Options are \"DEBUG\", \"INFO\", \"WARNING\",\n\"ERROR\", and \"CRITICAL\".\n\nReturns\n\nConverted log level for the server.\n\n\n\n\n\nMechanical.run_python_script(script_block: str, enable_logging=False, log_level='WARNING', progress_interval=2000, python_api_version=-1)\n\nRun a Python script block inside Mechanical.\n\nIt returns the string value of the last executed statement. If the value cannot be\nreturned as a string, it will return an empty string.\n\nParameters\n\nscript_block\n\npython:str\n\nScript block (one or more lines) to run.\n\nenable_logging: bool, optional\n\nWhether to enable logging. The default is False.\n\nlog_level: str\n\nLevel of logging. The default is \"WARNING\". Options are \"DEBUG\",\n\"INFO\", \"WARNING\", and \"ERROR\".\n\nprogress_interval: int, optional\n\nFrequency in milliseconds for getting log messages from the server.\nThe default is 2000.\n\nReturns\n\npython:str\n\nScript result.\n\nExamples\n\nReturn a value from a simple calculation.\n\n>>> mechanical.run_python_script('2+3')\n'5'\n\nReturn a string value from Project object.\n\n>>> mechanical.run_python_script('ExtAPI.DataModel.Project.ProductVersion')\n'2025 R2'\n\nReturn an empty string, when you try to return the Project object.\n\n>>> mechanical.run_python_script('ExtAPI.DataModel.Project')\n''\n\nReturn an empty string for assignments.\n\n>>> mechanical.run_python_script('version = ExtAPI.DataModel.Project.ProductVersion')\n''\n\nReturn value from the last executed statement from a variable.\n\n>>> script='''\n    addition = 2 + 3\n    multiplication = 3 * 4\n    multiplication\n    '''\n>>> mechanical.run_python_script(script)\n'12'\n\nReturn value from last executed statement from a function call.\n\n>>> script='''\n    import math\n    math.pow(2,3)\n    '''\n>>> mechanical.run_python_script(script)\n'8'\n\nHandle an error scenario.\n\n>>> script = 'hello_world()'\n>>> import grpc\n>>> try:\n        mechanical.run_python_script(script)\n    except grpc.RpcError as error:\n        print(error.details())\nname 'hello_world' is not defined\n\n\n\nMechanical.run_python_script_from_file(file_path, enable_logging=False, log_level='WARNING', progress_interval=2000)\n\nRun the contents a python file inside Mechanical.\n\nIt returns the string value of the last executed statement. If the value cannot be\nreturned as a string, it will return an empty string.\n\nParameters\n\nfile_path\n\nPath for the Python file.\n\nenable_logging: bool, optional\n\nWhether to enable logging. The default is False.\n\nlog_level: str\n\nLevel of logging. The default is \"WARNING\". Options are \"DEBUG\",\n\"INFO\", \"WARNING\", and \"ERROR\".\n\nprogress_interval: int, optional\n\nFrequency in milliseconds for getting log messages from the server.\nThe default is 2000.\n\nReturns\n\npython:str\n\nScript result.\n\nExamples\n\nReturn a value from a simple calculation.\n\nContents of simple.py file\n\n2+3\n\n>>> mechanical.run_python_script_from_file('simple.py')\n'5'\n\nReturn a value from a simple function call.\n\nContents of  test.py file\n\nimport math\n\nmath.pow(2,3)\n\n>>> mechanical.run_python_script_from_file('test.py')\n'8'\n\n\n\nMechanical.exit(force=False)\n\nExit Mechanical.\n\nParameters\n\nforce\n\nbool, optional\n\nWhether to force Mechanical to exit. The default is False, in which case\nonly Mechanical in UI mode asks for confirmation. This parameter overrides\nany environment variables that may inhibit exiting Mechanical.\n\nExamples\n\nExit Mechanical.\n\n>>> mechanical.Exit(force=True)\n\n\n\nMechanical.upload(file_name, file_location_destination=None, chunk_size=DEFAULT_FILE_CHUNK_SIZE, progress_bar=True)\n\nUpload a file to the Mechanical instance.\n\nParameters\n\nfile_name\n\npython:str\n\nLocal file to upload. Only the file name is needed if the file\nis relative to the current working directory. Otherwise, the full path\nis needed.\n\nfile_location_destination\n\npython:str, optional\n\nFile location on the Mechanical server to upload the file to. The default is\nNone, in which case the project directory is used.\n\nchunk_size\n\npython:int, optional\n\nChunk size in bytes. The default is 1048576.\n\nprogress_bar\n\nbool, optional\n\nWhether to show a progress bar using tqdm. The default is True.\nA progress bar is helpful for viewing upload progress.\n\nReturns\n\npython:str\n\nBase name of the uploaded file.\n\nExamples\n\nUpload the hsec.x_t file  with the progress bar not shown.\n\n>>> mechanical.upload('hsec.x_t', progress_bar=False)\n\n\n\nMechanical.get_file_chunks(file_location, file_name, chunk_size, progress_bar)\n\nConstruct the file upload request for the server.\n\nParameters\n\nfile_location_destination\n\npython:str, optional\n\nDirectory where the file to upload to the server is located.\n\nfile_name\n\npython:str\n\nName of the file to upload.\n\nchunk_size\n\npython:int\n\nChunk size in bytes.\n\nprogress_bar\n\nbool\n\nWhether to show a progress bar using tqdm.\n\n\n\nMechanical.list_files()\n\nList the files in the working directory of Mechanical.\n\nReturns\n\npython:list\n\nList of files in the working directory of Mechanical.\n\nExamples\n\nList the files in the working directory.\n\n>>> files = mechanical.list_files()\n>>> for file in files: print(file)\n\n\n\nMechanical.download(files, target_dir=None, chunk_size=DEFAULT_CHUNK_SIZE, progress_bar=None, recursive=False)\n\nDownload files from the working directory of the Mechanical instance.\n\nIt downloads them from the working directory to the target directory. It returns the list\nof local file paths for the downloaded files.\n\nParameters\n\nfiles\n\npython:str, python:list[python:str], python:tuple(python:str)\n\nOne or more files on the Mechanical server to download. The files must be\nin the same directory as the Mechanical instance. You can use the\nMechanical.list_files\nfunction to list current files. Alternatively, you can specify glob expressions to\nmatch file names. For example, you could use file* to match every file whose\nname starts with file.\n\ntarget_dir: str\n\nDefault directory to copy the downloaded files to. The default is None and\ncurrent working directory will be used as target directory.\n\nchunk_size\n\npython:int, optional\n\nChunk size in bytes. The default is 262144. The value must be less than 4 MB.\n\nprogress_bar\n\nbool, optional\n\nWhether to show a progress bar using  tqdm. The default is None, in\nwhich case a progress bar is shown. A progress bar is helpful for viewing download\nprogress.\n\nrecursive\n\nbool, optional\n\nWhether to use recursion when using a glob pattern search. The default is False.\n\nReturns\n\nList[python:str]\n\nList of local file paths.\n\nNotes\n\nThere are some considerations to keep in mind when using the download() method:\n\nThe glob pattern search does not search recursively in remote instances.\n\nIn a remote instance, it is not possible to list or download files in a\nlocation other than the Mechanical working directory.\n\nIf you are connected to a local instance and provide a file path, downloading files\nfrom a different folder is allowed but is not recommended.\n\nExamples\n\nDownload a single file.\n\n>>> local_file_path_list = mechanical.download('file.out')\n\nDownload all files starting with file.\n\n>>> local_file_path_list = mechanical.download('file*')\n\nDownload every file in the Mechanical working directory.\n\n>>> local_file_path_list = mechanical.download('*.*')\n\nAlternatively, the recommended method is to use the\ndownload_project()\nmethod to download all files.\n\n>>> local_file_path_list = mechanical.download_project()\n\n\n\nMechanical.save_chunks_to_file(responses, filename, progress_bar=False, target_name='')\n\nSave chunks to a local file.\n\nParameters\n\nresponses\n\n\n\nfilename\n\npython:str\n\nName of the local file to save chunks to.\n\nprogress_bar\n\nbool, optional\n\nWhether to show a progress bar using  tqdm. The default is False.\n\ntarget_name\n\npython:str, optional\n\nName of the target file on the server. The default is \"\". The file\nmust be in the same directory as the Mechanical instance. You can use the\nmechanical.list_files() function to list current files.\n\nReturns\n\nfile_size\n\npython:int\n\nFile size saved in bytes.  If 0 is returned, no file was written.\n\n\n\nMechanical.download_project(extensions=None, target_dir=None, progress_bar=False)\n\nDownload all project files in the working directory of the Mechanical instance.\n\nIt downloads them from the working directory to the target directory. It returns the list\nof local file paths for the downloaded files.\n\nParameters\n\nextensions\n\npython:list[python:str], python:tuple[python:str], optional\n\nList of extensions for filtering files before downloading them. The\ndefault is None.\n\ntarget_dir\n\npython:str, optional\n\nPath for downloading the files to. The default is None.\n\nprogress_bar\n\nbool, optional\n\nWhether to show a progress bar using tqdm. The default is False.\nA progress bar is helpful for viewing download progress.\n\nReturns\n\nList[python:str]\n\nList of local file paths.\n\nExamples\n\nDownload all the files in the project.\n\n>>> local_file_path_list = mechanical.download_project()\n\n\n\nMechanical.clear()\n\nClear the database.\n\nExamples\n\nClear the database.\n\n>>> mechanical.clear()\n\n\n\nMechanical.log_message(log_level, message)\n\nLog the message using the given log level.\n\nParameters\n\nlog_level: str\n\nLevel of logging. Options are \"DEBUG\", \"INFO\", \"WARNING\",\nand \"ERROR\".\n\nmessage\n\npython:str\n\nMessage to log.\n\nExamples\n\nLog a debug message.\n\n>>> mechanical.log_message('DEBUG', 'debug message')\n\nLog an info message.\n\n>>> mechanical.log_message('INFO', 'info message')\n\n\n\nMechanical.log_debug(message)\n\nLog the debug message.\n\n\n\nMechanical.log_info(message)\n\nLog the info message.\n\n\n\nMechanical.log_warning(message)\n\nLog the warning message.\n\n\n\nMechanical.log_error(message)\n\nLog the error message.\n\n\n\nMechanical.verify_valid_connection()\n\nVerify whether the connection to Mechanical is valid.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/appdata/index.html#the-appdatapy-module","title":"The appdata.py module","text":"The appdata.py module\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/appdata/index.html#summary","title":"The appdata.py module > Summary","text":"Summary\n\nClasses\n\n\n\n\n\nUniqueUserProfile\n\nCreate Unique User Profile (for AppData).\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/appdata/index.html#description","title":"The appdata.py module > Description","text":"Description\n\nTemporary Appdata for Ansys Mechanical.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/modal_acoustics_analysis.html#modal-acoustics-analysis","title":"Modal acoustics analysis","text":"Modal acoustics analysis\n\nThis example demonstrate modal acoustic analysis that involves\nmodeling both a structure and the surrounding\nfluid to analyze frequencies and standing wave patterns within the structure.\nThis type of analysis is essential for applications such as Sonar, concert hall design,\nnoise reduction in various settings, audio speaker design, and geophysical exploration.\n\nMechanical enables you to model pure acoustic problems and fluid-structure\ninteraction (FSI) problems. A coupled acoustic analysis accounts for FSI.\nAn uncoupled acoustic analysis simulates\nthe fluid only and ignores any fluid-structure interaction."},{"objectID":"Home","href":"examples/gallery_examples/01_basic/modal_acoustics_analysis.html#import-the-necessary-libraries","title":"Modal acoustics analysis > Import the necessary libraries","text":"Import the necessary libraries"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/modal_acoustics_analysis.html#initialize-the-embedded-application","title":"Modal acoustics analysis > Initialize the embedded application","text":"Initialize the embedded application"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/modal_acoustics_analysis.html#create-functions-to-set-camera-and-display-images","title":"Modal acoustics analysis > Create functions to set camera and display images","text":"Create functions to set camera and display images"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/modal_acoustics_analysis.html#configure-the-graphics-for-image-export","title":"Modal acoustics analysis > Configure the graphics for image export","text":"Configure the graphics for image export"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/modal_acoustics_analysis.html#download-the-geometry-and-material-files","title":"Modal acoustics analysis > Download the geometry and material files","text":"Download the geometry and material files"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/modal_acoustics_analysis.html#import-and-display-the-geometry","title":"Modal acoustics analysis > Import and display the geometry","text":"Import and display the geometry\n\n"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/modal_acoustics_analysis.html#store-all-variables-necessary-for-analysis","title":"Modal acoustics analysis > Store all variables necessary for analysis","text":"Store all variables necessary for analysis"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/modal_acoustics_analysis.html#add-modal-acoustic-analysis-and-import-the-material","title":"Modal acoustics analysis > Add modal acoustic analysis and import the material","text":"Add modal acoustic analysis and import the material"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/modal_acoustics_analysis.html#assign-material-to-solid-bodies","title":"Modal acoustics analysis > Assign material to solid bodies","text":"Assign material to solid bodies"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/modal_acoustics_analysis.html#add-mesh-methods-and-sizings","title":"Modal acoustics analysis > Add mesh methods and sizings","text":"Add mesh methods and sizings\n\nCreate a function to get the named selection by name\n\nCreate a function to set the mesh properties\n\nAdd automatic mesh methods\n\nAdd mesh sizing\n\nAdd a mesh method for the container bodies\n\nGenerate the mesh and display the image\n\n"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/modal_acoustics_analysis.html#set-up-the-contact-regions-in-the-connection-group","title":"Modal acoustics analysis > Set up the contact regions in the connection group","text":"Set up the contact regions in the connection group\n\nCreate a function to set the contact region properties\n\nAdd contact regions and set their properties\n\nFully define the modal multiphysics region with two physics regions"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/modal_acoustics_analysis.html#set-up-the-analysis-settings","title":"Modal acoustics analysis > Set up the analysis settings","text":"Set up the analysis settings"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/modal_acoustics_analysis.html#set-the-boundary-conditions-and-load","title":"Modal acoustics analysis > Set the boundary conditions and load","text":"Set the boundary conditions and load\n\nAdd the solid fluid interface\n\nAdd the gravity load\n\nAdd fixed support\n\n"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/modal_acoustics_analysis.html#add-results-to-the-solution","title":"Modal acoustics analysis > Add results to the solution","text":"Add results to the solution\n\nAdd the acoustic pressure result to the solution\n\nScope the force reaction to the fixed support"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/modal_acoustics_analysis.html#solve-the-solution","title":"Modal acoustics analysis > Solve the solution","text":"Solve the solution"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/modal_acoustics_analysis.html#show-messages","title":"Modal acoustics analysis > Show messages","text":"Show messages"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/modal_acoustics_analysis.html#display-the-results","title":"Modal acoustics analysis > Display the results","text":"Display the results\n\nActivate the first total deformation result and display the image\n\n\n\nActivate the acoustic pressure result and display the image\n\n\n\nDisplay all modal frequency, force reaction, and acoustic pressure values\n\nCreate a function to update the animation frames\n\nPlay the total deformation animation\n\n"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/modal_acoustics_analysis.html#print-the-project-tree","title":"Modal acoustics analysis > Print the project tree","text":"Print the project tree"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/modal_acoustics_analysis.html#clean-up-the-project","title":"Modal acoustics analysis > Clean up the project","text":"Clean up the project\n\nTotal running time of the script: (0 minutes 47.977 seconds)\n\n\n\nDownload Jupyter notebook: modal_acoustics_analysis.ipynb\n\nDownload Python source code: modal_acoustics_analysis.py\n\nDownload zipped: modal_acoustics_analysis.zip\n\nGallery generated by Sphinx-Gallery\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/cooling_holes_thermal_analysis.html#steady-state-thermal-analysis-of-cooling-holes-on-a-representative-model","title":"Steady State Thermal Analysis of cooling holes on a representative model","text":"Steady State Thermal Analysis of cooling holes on a representative model\n\nThis example illustrates the process of adding a Steady State Thermal\nanalysis to a new standalone Mechanical session, followed by executing\nPython scripting commands to set boundary conditions and solve a thermal\nsimulation of a model with cooling holes. The scripts then assess the\nresults, including temperature plots of plates and fluid lines modeled\nwith Fluid116 elements.\n\nCooling holes are carefully designed small channels within turbine blades\nthat release cool air, creating a protective layer on the blade’s surface\nto shield it from the intense heat of combustion gases. This film cooling\ntechnique helps maintain optimal temperatures, boost turbine efficiency,\nand ensure safe operation. The size, shape, and location of these holes\nare crucial for their effectiveness and to prevent premature failure.\n\nThe model features two plates: one equipped with cooling holes and the\nother without them. Fluid116 elements simulate the flow network through\nthe holes without requiring the holes to be physically present in the\ngeometry.\n\nThe plates are constructed from structural steel, with air\nflowing through the holes. The simulation involves applying convection\nboundary conditions to the plate surfaces, temperature boundary conditions\nat the line vertices, and mass flow rate boundary conditions at the\nfluid lines. After solving the simulation, the results are visualized with\ntemperature plots, showing the temperature distribution on the plates\nand fluid lines using matplotlib."},{"objectID":"Home","href":"examples/gallery_examples/01_basic/cooling_holes_thermal_analysis.html#import-the-necessary-libraries","title":"Steady State Thermal Analysis of cooling holes on a representative model > Import the necessary libraries","text":"Import the necessary libraries"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/cooling_holes_thermal_analysis.html#initialize-the-embedded-application","title":"Steady State Thermal Analysis of cooling holes on a representative model > Initialize the embedded application","text":"Initialize the embedded application"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/cooling_holes_thermal_analysis.html#create-functions-to-set-camera-and-display-images","title":"Steady State Thermal Analysis of cooling holes on a representative model > Create functions to set camera and display images","text":"Create functions to set camera and display images"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/cooling_holes_thermal_analysis.html#download-the-required-files","title":"Steady State Thermal Analysis of cooling holes on a representative model > Download the required files","text":"Download the required files"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/cooling_holes_thermal_analysis.html#configure-graphics-for-image-export","title":"Steady State Thermal Analysis of cooling holes on a representative model > Configure graphics for image export","text":"Configure graphics for image export"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/cooling_holes_thermal_analysis.html#define-python-variables","title":"Steady State Thermal Analysis of cooling holes on a representative model > Define Python variables","text":"Define Python variables\n\nStore all main tree nodes as variables"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/cooling_holes_thermal_analysis.html#import-the-geometry","title":"Steady State Thermal Analysis of cooling holes on a representative model > Import the geometry","text":"Import the geometry"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/cooling_holes_thermal_analysis.html#define-and-select-bin-units-system","title":"Steady State Thermal Analysis of cooling holes on a representative model > Define and select BIN units system","text":"Define and select BIN units system\n\nDefine the unit system for the model as Standard BIN (BTU, inch)."},{"objectID":"Home","href":"examples/gallery_examples/01_basic/cooling_holes_thermal_analysis.html#assign-materials","title":"Steady State Thermal Analysis of cooling holes on a representative model > Assign materials","text":"Assign materials\n\nImport material from xml file and assign it to bodies"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/cooling_holes_thermal_analysis.html#assign-geometrical-and-material-properties","title":"Steady State Thermal Analysis of cooling holes on a representative model > Assign geometrical and material properties","text":"Assign geometrical and material properties\n\nSpecify section properties and assign them to geometry\n\nStatic Scene\n\n\n\nInteractive Scene\n\n"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/cooling_holes_thermal_analysis.html#define-coordinate-system","title":"Steady State Thermal Analysis of cooling holes on a representative model > Define coordinate system","text":"Define coordinate system\n\nSpecify cylindrical coordinate system for applying boundary conditions"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/cooling_holes_thermal_analysis.html#define-named-selections","title":"Steady State Thermal Analysis of cooling holes on a representative model > Define named selections","text":"Define named selections\n\nCreate named selections used in the model"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/cooling_holes_thermal_analysis.html#define-mesh-controls-and-generate-the-mesh","title":"Steady State Thermal Analysis of cooling holes on a representative model > Define mesh controls and generate the mesh","text":"Define mesh controls and generate the mesh\n\nMesh the model\n\nDisplay the mesh\n\n"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/cooling_holes_thermal_analysis.html#define-analysis","title":"Steady State Thermal Analysis of cooling holes on a representative model > Define analysis","text":"Define analysis\n\nAdd a Steady State Thermal Analysis"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/cooling_holes_thermal_analysis.html#apply-loads-and-boundary-conditions","title":"Steady State Thermal Analysis of cooling holes on a representative model > Apply loads and boundary conditions","text":"Apply loads and boundary conditions\n\nAdd convection loads, body temperatures, and mass flow rates"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/cooling_holes_thermal_analysis.html#insert-command-snippet-to-create-surface-effect-elements-at-the-hole","title":"Steady State Thermal Analysis of cooling holes on a representative model > Insert command snippet to create surface effect elements at the hole","text":"Insert command snippet to create surface effect elements at the hole"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/cooling_holes_thermal_analysis.html#insert-results","title":"Steady State Thermal Analysis of cooling holes on a representative model > Insert results","text":"Insert results\n\nInsert temperature results"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/cooling_holes_thermal_analysis.html#solve","title":"Steady State Thermal Analysis of cooling holes on a representative model > Solve","text":"Solve"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/cooling_holes_thermal_analysis.html#postprocessing","title":"Steady State Thermal Analysis of cooling holes on a representative model > Postprocessing","text":"Postprocessing\n\nDisplay the temperature plots for both plates\n\n\n\nDisplay the temperature plots for fluid lines\n\n"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/cooling_holes_thermal_analysis.html#clean-up-the-project","title":"Steady State Thermal Analysis of cooling holes on a representative model > Clean up the project","text":"Clean up the project\n\nTotal running time of the script: (0 minutes 18.331 seconds)\n\n\n\nDownload Jupyter notebook: cooling_holes_thermal_analysis.ipynb\n\nDownload Python source code: cooling_holes_thermal_analysis.py\n\nDownload zipped: cooling_holes_thermal_analysis.zip\n\nGallery generated by Sphinx-Gallery\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/graphics/embedding_plotter/Plottable.html#plottable","title":"Plottable","text":"Plottable\n\n\n\nclass ansys.mechanical.core.embedding.graphics.embedding_plotter.Plottable\n\nPlottable object."},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/graphics/embedding_plotter/Plottable.html#overview","title":"Plottable > Overview","text":"Overview\n\nAttributes\n\n\n\n\n\npolydata\n\n\n\ncolor\n\n\n\ntransform\n\n\n\nchildren\n\n\n\nkwargs\n\n\n\nSpecial methods\n\n\n\n\n\n__post_init__\n\nInitialize the plottable."},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/graphics/embedding_plotter/Plottable.html#import-detail","title":"Plottable > Import detail","text":"Import detail\n\nfrom ansys.mechanical.core.embedding.graphics.embedding_plotter import Plottable"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/graphics/embedding_plotter/Plottable.html#attribute-detail","title":"Plottable > Attribute detail","text":"Attribute detail\n\n\n\nPlottable.polydata: pyvista.PolyData | None = None\n\n\n\n\n\nPlottable.color: pyvista.Color | None = None\n\n\n\n\n\nPlottable.transform: pyvista.transform.Transform = None\n\n\n\n\n\nPlottable.children: List[Plottable] = None\n\n\n\n\n\nPlottable.kwargs: Dict = None\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/graphics/embedding_plotter/Plottable.html#method-detail","title":"Plottable > Method detail","text":"Method detail\n\n\n\nPlottable.__post_init__()\n\nInitialize the plottable.\n\nThe transform will be identity.\nThe children will be an empty list.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/topology_optimization_cantilever_beam.html#topology-optimization-of-a-simple-cantilever-beam","title":"Topology optimization of a simple cantilever beam","text":"Topology optimization of a simple cantilever beam\n\nThis example demonstrates the structural topology optimization of a simple\ncantilever beam. The structural analysis is performed with basic constraints and\nload, which is then transferred to the topology optimization."},{"objectID":"Home","href":"examples/gallery_examples/01_basic/topology_optimization_cantilever_beam.html#import-the-necessary-libraries","title":"Topology optimization of a simple cantilever beam > Import the necessary libraries","text":"Import the necessary libraries"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/topology_optimization_cantilever_beam.html#initialize-the-embedded-application","title":"Topology optimization of a simple cantilever beam > Initialize the embedded application","text":"Initialize the embedded application"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/topology_optimization_cantilever_beam.html#create-functions-to-set-camera-and-display-images","title":"Topology optimization of a simple cantilever beam > Create functions to set camera and display images","text":"Create functions to set camera and display images\n\nConfigure graphics for image export"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/topology_optimization_cantilever_beam.html#import-the-structural-analysis-model","title":"Topology optimization of a simple cantilever beam > Import the structural analysis model","text":"Import the structural analysis model"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/topology_optimization_cantilever_beam.html#display-the-structural-analysis-results","title":"Topology optimization of a simple cantilever beam > Display the structural analysis results","text":"Display the structural analysis results\n\nActivate the total deformation result and display the image\n\n\n\nActivate the equivalent stress result and display the image\n\n"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/topology_optimization_cantilever_beam.html#topology-optimization","title":"Topology optimization of a simple cantilever beam > Topology optimization","text":"Topology optimization\n\n"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/topology_optimization_cantilever_beam.html#solve-the-solution","title":"Topology optimization of a simple cantilever beam > Solve the solution","text":"Solve the solution"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/topology_optimization_cantilever_beam.html#show-messages","title":"Topology optimization of a simple cantilever beam > Show messages","text":"Show messages"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/topology_optimization_cantilever_beam.html#display-the-results","title":"Topology optimization of a simple cantilever beam > Display the results","text":"Display the results\n\nAdd smoothing to the stereolithography (STL)\n\n\n\nExport the animation\n\nReview the results"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/topology_optimization_cantilever_beam.html#display-the-project-tree","title":"Topology optimization of a simple cantilever beam > Display the project tree","text":"Display the project tree"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/topology_optimization_cantilever_beam.html#clean-up-the-project","title":"Topology optimization of a simple cantilever beam > Clean up the project","text":"Clean up the project\n\nTotal running time of the script: (0 minutes 42.268 seconds)\n\n\n\nDownload Jupyter notebook: topology_optimization_cantilever_beam.ipynb\n\nDownload Python source code: topology_optimization_cantilever_beam.py\n\nDownload zipped: topology_optimization_cantilever_beam.zip\n\nGallery generated by Sphinx-Gallery\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/license_manager/index.html#the-license_managerpy-module","title":"The license_manager.py module","text":"The license_manager.py module\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/license_manager/index.html#summary","title":"The license_manager.py module > Summary","text":"Summary\n\nClasses\n\n\n\n\n\nLicenseManager\n\nClass to manage licenses in Ansys Mechanical.\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/license_manager/index.html#description","title":"The license_manager.py module > Description","text":"Description\n\nLicense Manager.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Contribute","href":"contribute.html#contribute","title":"Contribute","text":"Contribute\n\nThank you for your interest in contributing to PyMechanical! Contributions are welcome\nto make the project better, whether it’s fixing bugs, adding new features, or\nimproving documentation. Below are the guidelines to follow when contributing.\n\nThis project adheres to the Contributor Covenant Code of Conduct. By\nparticipating, you agree to uphold this code.\n\nStart by selecting your role in the project:\n\n User\n\nReport bugs, suggest features, and ask questions.\n\ncontribute/user\n\n Documentarian\n\nImprove the documentation and write new guides.\n\ncontribute/documentarian\n\n Developer\n\nFix bugs, add new features, and improve the codebase.\n\ncontribute/developer\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"user_guide/howto/pep8.html#pep-8-aliases","title":"PEP 8 aliases","text":"PEP 8 aliases"},{"objectID":"Home","href":"user_guide/howto/pep8.html#overview","title":"PEP 8 aliases > Overview","text":"Overview\n\nPyMechanical provides PEP 8 Style aliases for Mechanical APIs.\nThis enables you to convert traditional Pascal Case methods and property names to Snake Case that follow Python naming conventions.\nThis feature makes the Mechanical API more pythonic and consistent with standard Python coding practices.\n\nWhen PEP 8 aliases are enabled, you can use both the original Pascal Case names and the new\nSnake Case aliases interchangeably, providing backward compatibility while offering a more\nPython-friendly API."},{"objectID":"Home","href":"user_guide/howto/pep8.html#enabling-pep-8-aliases","title":"PEP 8 aliases > Enabling PEP 8 aliases","text":"Enabling PEP 8 aliases\n\nTo enable PEP 8 aliases, use the pep parameter when creating an App instance:"},{"objectID":"Home","href":"user_guide/howto/pep8.html#examples","title":"PEP 8 aliases > Examples","text":"Examples\n\nThe following examples illustrate how to use PEP 8 aliases in practice:\n\nModel.AddStaticStructuralAnalysis()  → Model.add_static_structural_analysis()\n\nModel.AddNamedSelection()            → Model.add_named_selection()\n\nModel.Mesh.GenerateMesh()            → Model.mesh.generate_mesh()\n\nGraphics.Camera.SetFit()             → Graphics.camera.set_fit()\n\nModel.Name                           → Model.name"},{"objectID":"Home","href":"user_guide/howto/pep8.html#limitations","title":"PEP 8 aliases > Limitations","text":"Limitations\n\nEnum values retain their original Pascal Case style; for example, Format.Automatic does not become Format.AUTOMATIC.\n\nPEP 8 aliases are not included in type hints provided by PyMechanical stubs.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/rpc/server/ForegroundAppBackend.html#foregroundappbackend","title":"ForegroundAppBackend","text":"ForegroundAppBackend\n\n\n\nclass ansys.mechanical.core.embedding.rpc.server.ForegroundAppBackend(app: ansys.mechanical.core.embedding.app.App)\n\nBackend for the python server where mechanical uses the main thread."},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/rpc/server/ForegroundAppBackend.html#overview","title":"ForegroundAppBackend > Overview","text":"Overview\n\nMethods\n\n\n\n\n\ntry_post\n\nTry to post to mechanical’s main thread.\n\nget_app\n\nGet the app object."},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/rpc/server/ForegroundAppBackend.html#import-detail","title":"ForegroundAppBackend > Import detail","text":"Import detail\n\nfrom ansys.mechanical.core.embedding.rpc.server import ForegroundAppBackend"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/rpc/server/ForegroundAppBackend.html#method-detail","title":"ForegroundAppBackend > Method detail","text":"Method detail\n\n\n\nForegroundAppBackend.try_post(callable: Callable) -> Any\n\nTry to post to mechanical’s main thread.\n\n\n\nForegroundAppBackend.get_app() -> ansys.mechanical.core.embedding.app.App\n\nGet the app object.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.tools.path.get_mechanical_path.html#get_mechanical_path","title":"get_mechanical_path","text":"get_mechanical_path\n\n\n\nansys.tools.path.get_mechanical_path(allow_input=True, version=None, find=True)\n\nAcquires Ansys Mechanical Path\n\nFirst, it looks in the configuration file, used by save_mechanical_path\nThen, it tries to find it based on conventions for where it usually is.\nLastly, it takes user input\n\nParameters\n\nallow_input\n\nbool, optional\n\nAllow user input to find Ansys Mechanical path.  The default is True.\n\nversion\n\npython:float, optional\n\nVersion of Ansys Mechanical to search for. For example version=25.1.\nIf None, use latest.\n\nfind: bool, optional\n\nAllow ansys-tools-path to search for Ansys Mechanical in typical installation locations\n\nReturn type\n\nOptional[str]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/errors/VersionError.html#versionerror","title":"VersionError","text":"VersionError\n\n\n\nexception ansys.mechanical.core.errors.VersionError(msg='Invalid Mechanical version')\n\nBases: ValueError\n\nRaises an error when the version of Mechanical is invalid."},{"objectID":"Home","href":"api/ansys/mechanical/core/errors/VersionError.html#import-detail","title":"VersionError > Import detail","text":"Import detail\n\nfrom ansys.mechanical.core.errors import VersionError\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/path.html#ansys-tools-path","title":"Ansys tools path","text":"Ansys tools path\n\nThese methods on the ansys-tools-path module provide helper functions for configuration and discovery\nof the installation path of the Mechanical application.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"user_guide/remote_session/pool.html#create-a-pool-of-mechanical-servers","title":"Create a pool of Mechanical servers","text":"Create a pool of Mechanical servers\n\nThe LocalMechanicalPool\nclass simplifies creating and connecting to multiple servers of the\nMechanical class for batch\nprocessing. You can use this class for batch processing a set of input files or\nother batch-related processes.\n\nThis code shows how to create a pool with 10 instances:\n\nWhen you are creating a pool, you can supply additional keyword arguments.\nFor example, to restart failed instances, you can set restart_failed=True:\n\nYou can access each individual instance of Mechanical with this code:\n\nBecause this is a self-healing pool, if an instance of Mechanical stops\nduring a batch process, this instance is automatically restarted. When creating\nthe pool, you can disable this behavior by setting restart_failed=False."},{"objectID":"Home","href":"user_guide/remote_session/pool.html#run-a-set-of-input-files","title":"Create a pool of Mechanical servers > Run a set of input files","text":"Run a set of input files\n\nYou can use the pool to run a set of pre-generated input files using the\nrun_batch() method.\n\nFor example, you can run the first set of 20 verification files with this code:"},{"objectID":"Home","href":"user_guide/remote_session/pool.html#run-a-user-defined-function","title":"Create a pool of Mechanical servers > Run a user-defined function","text":"Run a user-defined function\n\nWhile the previous example uses the run_batch()\nmethod to run a set of inputs files, you can also use the\nmap() method to run a custom user-defined function on\neach instance of Mechanical over a set of input files.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/app/App.html#app","title":"App","text":"App\n\n\n\nclass ansys.mechanical.core.embedding.app.App(db_file=None, private_appdata=False, **kwargs)\n\nMechanical embedding Application.\n\nParameters\n\ndb_file\n\npython:str, optional\n\nPath to a mechanical database file (.mechdat or .mechdb).\n\nversion\n\npython:int, optional\n\nVersion number of the Mechanical application.\n\nprivate_appdata\n\nbool, optional\n\nSetting for a temporary AppData directory. Default is False.\nEnables running parallel instances of Mechanical.\n\nglobals\n\npython:dict, optional\n\nGlobal variables to be updated. For example, globals().\nReplaces “app.update_globals(globals())”.\n\nconfig\n\nAddinConfiguration, optional\n\nConfiguration for addins. By default “Mechanical” is used and ACT Addins are disabled.\n\ncopy_profile\n\nbool, optional\n\nWhether to copy the user profile when private_appdata is True. Default is True.\n\nenable_logging\n\nbool, optional\n\nWhether to enable logging. Default is True.\n\nlog_level\n\npython:str, optional\n\nThe logging level for the application. Default is “WARNING”.\n\npep8\n\nbool, optional\n\nWhether to enable PEP 8 style binding for the assembly. Default is False.\n\nreadonly\n\nbool, optional\n\nWhether to open the application in read-only mode. Default is False.\n\nfeature_flags\n\npython:list, optional\n\nList of feature flag names to enable. Default is [].\nAvailable flags include: ‘ThermalShells’, ‘MultistageHarmonic’, ‘CPython’.\n\nExamples\n\nCreate App with Mechanical project file and version:\n\n>>> from ansys.mechanical.core import App\n>>> app = App(db_file=\"path/to/file.mechdat\", version=252)\n\nDisable copying the user profile when private appdata is enabled\n\n>>> app = App(private_appdata=True, copy_profile=False)\n\nUpdate the global variables with globals\n\n>>> app = App(globals=globals())\n\nCreate App with “Mechanical” configuration and no ACT Addins\n\n>>> from ansys.mechanical.core.embedding import AddinConfiguration\n>>> from ansys.mechanical.core import App\n>>> config = AddinConfiguration(\"Mechanical\")\n>>> config.no_act_addins = True\n>>> app = App(config=config)\n\nSet log level\n\n>>> app = App(log_level='INFO')\n\n… INFO -  -  app - log_info - Starting Mechanical Application\n\nCreate App in read-only mode\n\n>>> app = App(readonly=True)\n\nCreate App with feature flags enabled\n\n>>> app = App(feature_flags=['CPython', 'ThermalShells'])"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/app/App.html#overview","title":"App > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nopen\n\nOpen the db file.\n\nsave\n\nSave the project.\n\nsave_as\n\nSave the project as a new file.\n\nlaunch_gui\n\nLaunch the GUI.\n\nnew\n\nClear to a new application.\n\nclose\n\nClose the active project.\n\nexit\n\nExit the application.\n\nexecute_script\n\nExecute the given script with the internal IronPython engine.\n\nexecute_script_from_file\n\nExecute the given script from file with the internal IronPython engine.\n\nplotter\n\nReturn ansys.tools.visualization_interface.Plotter object.\n\nplot\n\nVisualize the model in 3d.\n\nupdate_globals\n\nUpdate global variables.\n\nprint_tree\n\nPrint the hierarchical tree representation of the Mechanical project structure.\n\nlog_debug\n\nLog the debug message.\n\nlog_info\n\nLog the info message.\n\nlog_warning\n\nLog the warning message.\n\nlog_error\n\nLog the error message.\n\nProperties\n\n\n\n\n\nposter\n\nReturns an instance of Poster.\n\nDataModel\n\nReturn the DataModel.\n\nExtAPI\n\nReturn the ExtAPI object.\n\nTree\n\nReturn the Tree object.\n\nModel\n\nReturn the Model object.\n\nGraphics\n\nReturn the Graphics object.\n\nreadonly\n\nReturn whether the Mechanical object is read-only.\n\nversion\n\nReturns the version of the app.\n\nproject_directory\n\nReturns the current project directory.\n\nmessages\n\nLazy-load the MessageManager.\n\nlicense_manager\n\nReturn license manager.\n\nSpecial methods\n\n\n\n\n\n__repr__\n\nGet the product info.\n\n__enter__\n\nEnter the scope.\n\n__exit__\n\nExit the scope."},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/app/App.html#import-detail","title":"App > Import detail","text":"Import detail\n\nfrom ansys.mechanical.core.embedding.app import App"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/app/App.html#property-detail","title":"App > Property detail","text":"Property detail\n\n\n\nproperty App.poster: ansys.mechanical.core.embedding.poster.Poster\n\nReturns an instance of Poster.\n\n\n\nproperty App.DataModel: Ansys.Mechanical.DataModel.Interfaces.DataModelObject\n\nReturn the DataModel.\n\n\n\nproperty App.ExtAPI: Ansys.ACT.Interfaces.Mechanical.IMechanicalExtAPI\n\nReturn the ExtAPI object.\n\n\n\nproperty App.Tree: Ansys.ACT.Automation.Mechanical.Tree\n\nReturn the Tree object.\n\n\n\nproperty App.Model: Ansys.ACT.Automation.Mechanical.Model\n\nReturn the Model object.\n\n\n\nproperty App.Graphics: Ansys.ACT.Common.Graphics.MechanicalGraphicsWrapper\n\nReturn the Graphics object.\n\n\n\nproperty App.readonly\n\nReturn whether the Mechanical object is read-only.\n\n\n\nproperty App.version\n\nReturns the version of the app.\n\n\n\nproperty App.project_directory\n\nReturns the current project directory.\n\n\n\nproperty App.messages\n\nLazy-load the MessageManager.\n\n\n\nproperty App.license_manager\n\nReturn license manager."},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/app/App.html#method-detail","title":"App > Method detail","text":"Method detail\n\n\n\nApp.__repr__()\n\nGet the product info.\n\n\n\nApp.__enter__()\n\nEnter the scope.\n\n\n\nApp.__exit__(exc_type, exc_val, exc_tb)\n\nExit the scope.\n\n\n\nApp.open(db_file, remove_lock=False)\n\nOpen the db file.\n\nParameters\n\ndb_file\n\npython:str\n\nPath to a Mechanical database file (.mechdat or .mechdb).\n\nremove_lock\n\nbool, optional\n\nWhether or not to remove the lock file if it exists before opening the project file.\n\n\n\nApp.save(path=None)\n\nSave the project.\n\n\n\nApp.save_as(path: str, overwrite: bool = False, remove_lock: bool = False)\n\nSave the project as a new file.\n\nIf the overwrite flag is enabled, the current saved file is replaced with the new file.\n\nParameters\n\npath\n\npython:str\n\nThe path where the file needs to be saved.\n\noverwrite\n\nbool, optional\n\nWhether the file should be overwritten if it already exists (default is False).\n\nremove_lock\n\nbool, optional\n\nWhether to remove the lock file if it exists before saving the project file.\n\nRaises\n\nException\n\nIf the file already exists at the specified path and overwrite is False.\n\n\n\nApp.launch_gui(delete_tmp_on_close: bool = True, dry_run: bool = False)\n\nLaunch the GUI.\n\n\n\nApp.new()\n\nClear to a new application.\n\n\n\nApp.close()\n\nClose the active project.\n\n\n\nApp.exit()\n\nExit the application.\n\n\n\nApp.execute_script(script: str) -> Any\n\nExecute the given script with the internal IronPython engine.\n\n\n\nApp.execute_script_from_file(file_path=None)\n\nExecute the given script from file with the internal IronPython engine.\n\n\n\nApp.plotter(obj=None) -> None\n\nReturn ansys.tools.visualization_interface.Plotter object.\n\n\n\nApp.plot(obj=None) -> None\n\nVisualize the model in 3d.\n\nRequires installation using the graphics option. E.g.\npip install ansys-mechanical-core[graphics]\n\nExamples\n\n>>> from ansys.mechanical.core import App\n>>> app = App()\n>>> app.open(\"path/to/file.mechdat\")\n>>> app.plot()\n\n\n\nApp.update_globals(globals_dict: Dict[str, Any], enums: bool = True) -> None\n\nUpdate global variables.\n\nWhen scripting inside Mechanical, the Mechanical UI automatically\nsets global variables in Python. PyMechanical cannot do that automatically,\nbut this method can be used.\n\nBy default, all enums will be imported too. To avoid including enums, set\nthe enums argument to False.\n\nExamples\n\n>>> from ansys.mechanical.core import App\n>>> app = App()\n>>> app.update_globals(globals())\n\n\n\nApp.print_tree(node=None, max_lines=80, lines_count=0, indentation='')\n\nPrint the hierarchical tree representation of the Mechanical project structure.\n\nParameters\n\nnode: DataModel object, optional\n\nThe starting object of the tree.\n\nmax_lines: int, optional\n\nThe maximum number of lines to print. Default is 80. If set to -1, no limit is applied.\n\nRaises\n\nAttributeError\n\nIf the node does not have the required attributes.\n\nExamples\n\n>>> from ansys.mechanical.core import App\n>>> app = App(globals=globals())\n>>> app.print_tree()\n... ├── Project\n... |  ├── Model\n... |  |  ├── Geometry Imports (⚡︎)\n... |  |  ├── Geometry (?)\n... |  |  ├── Materials (✓)\n... |  |  ├── Coordinate Systems (✓)\n... |  |  |  ├── Global Coordinate System (✓)\n... |  |  ├── Remote Points (✓)\n... |  |  ├── Mesh (?)\n\n>>> app.print_tree(Model, 3)\n... ├── Model\n... |  ├── Geometry Imports (⚡︎)\n... |  ├── Geometry (?)\n... ... truncating after 3 lines\n\n>>> app.print_tree(max_lines=2)\n... ├── Project\n... |  ├── Model\n... ... truncating after 2 lines\n\n\n\nApp.log_debug(message)\n\nLog the debug message.\n\n\n\nApp.log_info(message)\n\nLog the info message.\n\n\n\nApp.log_warning(message)\n\nLog the warning message.\n\n\n\nApp.log_error(message)\n\nLog the error message.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/logger/sinks/index.html#the-sinkspy-module","title":"The sinks.py module","text":"The sinks.py module\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/logger/sinks/index.html#summary","title":"The sinks.py module > Summary","text":"Summary\n\nClasses\n\n\n\n\n\nStandardSinks\n\nProvides built-in sinks.\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/logger/sinks/index.html#description","title":"The sinks.py module > Description","text":"Description\n\nMechanical application logging sinks.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"user_guide/cli/find-mechanical.html#cli-for-finding-and-saving-path","title":"CLI for finding and saving path","text":"CLI for finding and saving path\n\nThis section provides information on how to use the command line interface (CLI) for PyMechanical\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"user_guide/cli/find-mechanical.html#find-mechanical","title":"CLI for finding and saving path > find-mechanical","text":"find-mechanical\n\nUse the CLI tool to find the Mechanical version and location."},{"objectID":"Home","href":"user_guide/cli/find-mechanical.html#parameters","title":"CLI for finding and saving path > Parameters","text":"Parameters\n\nversion: int\n\nAnsys version number.\n\npath: str, optional\n\nOptional path to the Ansys installation directory.\neg: “usr/ansys_inc/v251/”"},{"objectID":"Home","href":"user_guide/cli/find-mechanical.html#example","title":"CLI for finding and saving path > Example","text":"Example\n\nGet the version and location of the installation directory.\n\n>>> find-mechanical -r 251\n>>> find-mechanical -p \"usr/ansys_inc/v251/\"\n\nOptions\n\n\n\n-h, --help\n\nShow this message and exit.\n\n\n\n-r, --version <version>\n\nAnsys version number, such as “242” or “241”.         If a version number is not specified, it uses the default from             ansys-tools-path.\n\n\n\n-p, --path <path>\n\nOptional path to the Ansys installation directory. If provided, this path will be used instead of the default."},{"objectID":"Home","href":"user_guide/cli/find-mechanical.html#save-ansys-path","title":"CLI for finding and saving path > save-ansys-path","text":"save-ansys-path\n\nCLI tool to store the path of a solver.\n\nUSAGE:\n\nThe following example demonstrates the main use of this tool:\n\n$ save-ansys-path –name dyna /path/to/dyna\n\nOptions\n\n\n\n-h, --help\n\nShow this message and exit.\n\n\n\n--name <name>\n\nApplication name. For example, “mapdl”, “mechanical”, or “dyna”\n\n\n\n--allow-prompt\n\nAllow prompt. Used in case a path is not given or the given path is not valid\n\nArguments\n\n\n\nLOCATION\n\nRequired argument"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/imports/index.html#the-importspy-module","title":"The imports.py module","text":"The imports.py module\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/imports/index.html#summary","title":"The imports.py module > Summary","text":"Summary\n\nFunctions\n\n\n\n\n\nglobal_entry_points\n\nReturn the global entry points of the application.\n\nglobal_variables\n\nReturn the Mechanical scripting global variables as a dict.\n\nget_all_enums\n\nGet all the enums as a dictionary."},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/imports/index.html#description","title":"The imports.py module > Description","text":"Description\n\nAdditional imports for embedded Mechanical."},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/imports/index.html#module-detail","title":"The imports.py module > Module detail","text":"Module detail\n\n\n\nimports.global_entry_points(app: ansys.mechanical.core.App) -> Dict\n\nReturn the global entry points of the application.\n\n\n\nimports.global_variables(app: ansys.mechanical.core.App, enums: bool = False) -> Dict\n\nReturn the Mechanical scripting global variables as a dict.\n\nIt can be used to add all of these as global variables in python\nwith this command:\n\nglobals().update(global_variables(embedded_app))\n\nTo also import all the enums, set the parameter enums to true.\n\n\n\nimports.get_all_enums() -> Dict[str, Any]\n\nGet all the enums as a dictionary.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/shims/index.html#the-shimspy-module","title":"The shims.py module","text":"The shims.py module\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/shims/index.html#summary","title":"The shims.py module > Summary","text":"Summary\n\nFunctions\n\n\n\n\n\nimport_materials\n\nImport material from matml file."},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/shims/index.html#description","title":"The shims.py module > Description","text":"Description\n\nShims for embedded Mechanical.\n\nThese shims are used when APIs are released in newer versions of Mechanical,\nbut workarounds exist in an older release"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/shims/index.html#module-detail","title":"The shims.py module > Module detail","text":"Module detail\n\n\n\nshims.import_materials(app: ansys.mechanical.core.embedding.Application, material_file: str) -> None\n\nImport material from matml file.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"FAQs","href":"faq.html#faqs","title":"FAQs","text":"FAQs\n\nThis section provides answers to frequently asked questions.\n\nHow do you report issues?\n\nYou can report issues with PyMechanical, such as bugs, feature requests,\nand documentation errors, on the PyMechanical repository’s Issues page.\n\nIf you want to ask more open-ended questions or are seeking advice\nfrom experts in the community, you can post on this repository’s\nDiscussions page.\n\nHow is PyMechanical positioned with respect to other related Ansys tools?\n\nWhen you want to automate or extend Ansys Mechanical, you should\nconsider these tools:\n\nACT in Mechanical\n\nScripting in Mechanical\n\nPyMechanical\n\nAlthough all of these tools work best in interactive mode, there is increasing support\nfor batch mode. You can use the first two tools from either Ansys Workbench or from\nstandalone Mechanical.\n\nACT in Mechanical\n\nIn Mechanical, ACT is a customization framework. When specific features are missing,\nyou can add them using ACT. Of course, some of those missing features might be\nautomations or scripts of existing features. But, in many cases, they can be new\ncapabilities, such as extensions to Mechanical’s data model, the ability to connect\nto callbacks, and even integrations of external solvers.\n\nScripting in Mechanical\n\nThe Python scripting capability in Mechanical was born out of the same development\nthat brought ACT to Mechanical. This tool provides the same APIs as those used for\nPyMechanical but can only be run by Mechanical. While they use IronPython 2.7 by\ndefault, recent Mechanical versions provide a feature flag for scripting in CPython 3.x.\nMechanical’s intuitive user interface for scripting, the Mechanical Scripting View,\nprovides script recording, autocomplete, and a snippet library. However, it is possible\nto use this tool in batch mode without the Mechanical user interface.\n\nPyMechanical\n\nPyMechanical allows you to write Python scripts outside of Mechanical, with tight\nintegration with other open source modules and Ansys products. With this tool, you\nbring your own Python environment, which may contain other modules and tools. There is\nno dependency on opening the Mechanical user interface.\n\nWhat is the relationship with Ansys Workbench?\n\nAnsys Workbench is a no-code environment to set up analysis systems that can be linked\ntogether. It is part of the Ansys family of software tools for process automation and design\nexploration. This family includes Ansys OptiSLang, which may be a more natural fit\nfor integration with PyMechanical. The most popular app within the Workbench environment is\nMechanical, and for many years, Workbench was the only environment you could run Mechanical from.\n\nBecause Workbench is a no-code environment, a lot of the complexity around managing data\ntransfer between Ansys apps and running parametric studies is hidden. PyMechanical and\nPyAnsys libraries more broadly give you much more control over your process automation and design\nexploration. However, eliminating Workbench means that you miss out on what it handled under\nthe hood.\n\nHow do you restart a script?\n\nIf you have trouble terminating a simulation, you do not have to close Python, reopen it, and\nclear all previous data, such as the mesh, using this code:\n\nSimply exiting Python should clear the solution within Python. This is because\nstopping the original process means that nothing should be present in\na new process.\n\nThe way that you clear all data from Mechanical in PyMechanical depends on if\nMechanical is a remote session or embedded.\n\nIf Mechanical is a remote session, use either the\nMechanical.clear()\nmethod or exit and restart Mechanical.\n\nIf Mechanical is embedded, use the\napp.new()\nmethod.\n\nHow do you check if a license is active with PyMechanical?\n\nInformation about Mechanical can be printed with remote and embedding mode:\n\nRemote\n\n\n\nEmbedding\n\n\n\nThe output from the above code will indicate the license being used inside the brackets, next to Ansys Mechanical.\nIf PyMechanical is unable to retrieve any license, the field will be left blank.\n\nWith License\n\n\n\nWithout License\n\n\n\nAlternatively, once the app is created readonly method can be used to see if license is active.\nIf license is not checked out then it is in read only mode.\n\nWhy do I get mechanical-env exception in Linux?\n\nTo use the embedded instance on Linux, mechanical-env should be invoked before\nstarting the Python shell or running a Python script.\n\nor\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/feature_flags/index.html#the-feature_flagspy-module","title":"The feature_flags.py module","text":"The feature_flags.py module\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/feature_flags/index.html#summary","title":"The feature_flags.py module > Summary","text":"Summary\n\nClasses\n\n\n\n\n\nFeatureFlags\n\nSupported feature flag names.\n\nFunctions\n\n\n\n\n\nget_feature_flag_names\n\nGet the available feature flags.\n\nget_command_line_arguments\n\nGet the command line arguments as an array for the given flags.\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/feature_flags/index.html#description","title":"The feature_flags.py module > Description","text":"Description\n\nMechanical beta feature flags."},{"objectID":"Home","href":"api/ansys/mechanical/core/feature_flags/index.html#module-detail","title":"The feature_flags.py module > Module detail","text":"Module detail\n\n\n\nfeature_flags.get_feature_flag_names() -> List[str]\n\nGet the available feature flags.\n\n\n\nfeature_flags.get_command_line_arguments(flags: List[str])\n\nGet the command line arguments as an array for the given flags.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/misc/index.html#the-miscpy-module","title":"The misc.py module","text":"The misc.py module\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/misc/index.html#summary","title":"The misc.py module > Summary","text":"Summary\n\nFunctions\n\n\n\n\n\nis_windows\n\nCheck if the host machine is on Windows.\n\nget_mechanical_bin\n\nGet the path for the Mechanical executable file based on the release version.\n\nthreaded\n\nDecorate a function with this decorator to call it using a thread.\n\nthreaded_daemon\n\nDecorate a function with this decorator to call it using a daemon thread.\n\ncheck_valid_ip\n\nCheck if the IP address is valid.\n\ncheck_valid_port\n\nCheck if the port is valid.\n\ncheck_valid_start_instance\n\nCheck if the value obtained from the environmental variable is valid.\n\nis_float\n\nCheck if a string can be converted to a float."},{"objectID":"Home","href":"api/ansys/mechanical/core/misc/index.html#description","title":"The misc.py module > Description","text":"Description\n\nContain miscellaneous functions and methods at the module level."},{"objectID":"Home","href":"api/ansys/mechanical/core/misc/index.html#module-detail","title":"The misc.py module > Module detail","text":"Module detail\n\n\n\nmisc.is_windows()\n\nCheck if the host machine is on Windows.\n\nReturns\n\nTrue if the host machine is on Windows, False otherwise.\n\n\n\n\n\nmisc.get_mechanical_bin(release_version)\n\nGet the path for the Mechanical executable file based on the release version.\n\nParameters\n\nrelease_version: str\n\nMechanical version using the three-digit format. For example, \"252\" for\n2025 R2.\n\n\n\nmisc.threaded(func)\n\nDecorate a function with this decorator to call it using a thread.\n\n\n\nmisc.threaded_daemon(func)\n\nDecorate a function with this decorator to call it using a daemon thread.\n\n\n\nmisc.check_valid_ip(ip)\n\nCheck if the IP address is valid.\n\nParameters\n\nip\n\npython:str\n\nIP address to check.\n\n\n\nmisc.check_valid_port(port, lower_bound=1000, high_bound=60000)\n\nCheck if the port is valid.\n\nParameters\n\nport\n\npython:int\n\nPort to check.\n\nlower_bound\n\npython:int, optional\n\nLowest possible value for the port. The default is 1000.\n\nhigh_bound\n\npython:int, optional\n\nHighest possible value for the port. The default is 60000.\n\n\n\nmisc.check_valid_start_instance(start_instance)\n\nCheck if the value obtained from the environmental variable is valid.\n\nParameters\n\nstart_instance\n\npython:str, bool\n\nValue obtained from the corresponding environment variable.\n\nReturns\n\nbool\n\nTrue if start_instance is True or \"True\",\nFalse otherwise.\n\n\n\nmisc.is_float(input_string)\n\nCheck if a string can be converted to a float.\n\nParameters\n\ninput_string\n\npython:str\n\nString to check.\n\nReturns\n\nbool\n\nTrue when conversion is possible, False otherwise.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/global_importer/index.html#the-global_importerpy-module","title":"The global_importer.py module","text":"The global_importer.py module\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/global_importer/index.html#summary","title":"The global_importer.py module > Summary","text":"Summary"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/global_importer/index.html#description","title":"The global_importer.py module > Description","text":"Description\n\nImport Mechanical globals.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/poster/index.html#the-posterpy-module","title":"The poster.py module","text":"The poster.py module\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/poster/index.html#summary","title":"The poster.py module > Summary","text":"Summary\n\nClasses\n\n\n\n\n\nPoster\n\nClass which can post a python callable function to Mechanical’s main thread.\n\nExceptions\n\n\n\n\n\nPosterError\n\nClass which holds errors from the background thread posting system.\n\n\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/poster/index.html#description","title":"The poster.py module > Description","text":"Description\n\nUse the Poster class to post functions to Mechanical’s main thread.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/gallery_examples/sg_execution_times.html#computation-times","title":"Computation times","text":"Computation times\n\n00:00.000 total execution time for 0 files from examples/gallery_examples:\n\n\n\n\n\n\n\nExample\n\nTime\n\nMem (MB)\n\nN/A\n\nN/A\n\nN/A\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"user_guide/scripting/overview.html#overview","title":"Overview","text":"Overview\n\nYou could already perform scripting of Mechanical with Python from inside\nMechanical. PyMechanical leverages the same APIs but allows you to run your\nautomation from outside Mechanical.\n\nFor comprehensive information on these APIs, refer to the following documentation:\n\nPyMechanical documentation:\n\nMechanical API Documentation - Lists Mechanical APIs that can be used with PyMechanical.\n\nDeveloper portal:\n\nMechanical scripting interface APIs - Contains the same information as the Mechanical API Documentation but is located on the developer portal.\n\nACT API Reference Guide:\n\nACT API Reference Guide - Provides descriptions of the objects, methods, and properties for all namespaces."},{"objectID":"Home","href":"user_guide/scripting/overview.html#recording","title":"Overview > Recording","text":"Recording\n\nMechanical supports some level of recording. When you initiate an action from the user\ninterface (UI), the UI determines what API to run, executes this API, and prints it in the Mechanical Scripting\nView. Examples of these actions are assigning selections to scoping, changing values in\nthe details view, and renaming an object in the Outline. In the following animated example,\na Fixed Support and a Pressure are added to the Outline."},{"objectID":"Home","href":"user_guide/scripting/overview.html#mechanical-entities","title":"Overview > Mechanical entities","text":"Mechanical entities\n\nMechanical has an extensive set of entities that represent all the functionality provided\nby Mechanical. Here are descriptions of the entities at Mechanical’s core:\n\nCAD: CAD entities, which are usually imported from a CAD application\n\nMesh: The discretized geometry that is appropriate for Mechanical’s solvers\n\nMaterials: Engineering material models that come from Engineering Data, which is a subsystem of Ansys Workbench\n\nObjects: The entities in the Outline that represent the model, analyses, solutions, and results\n\nGraphics: The 3D graphics engine that renders data from Mechanical visually and can export images and animations\n\nSolvers: The solver integrations that allow a Mechanical model to be used to run a specific solver\n\nPost: The engine that computes useful engineering results from solver runs\n\nExtensions: Plugins or extensions defined externally from Mechanical that extend Mechanical\n\nThere is some overlap between these entities. For instance, the CAD data is represented visually in the 3D graphics\nengine but also has representation in the Outline. The raw CAD data, which includes the tessellations used to render the\ngraphics and all the data needed to define vertices, edges, faces, volumes, and parts is collectively considered GeoData.\nYou may interact with these bodies and parts in the Outline, assigning materials, thickness, and other data that does\nnot come from CAD entities. This is considered Geometry. As a result, the API entry points for GeoData and Geometry\nare different.\n\nThe same is true for Mesh. There is a representation in the Outline that contains the settings\nused to generate the mesh and statistics about the mesh. Then, there is MeshData, which is the actual nodes and\nelements in the mesh. These have distinct API entry points.\n\nExecuting a sequence of APIs can sometimes be slow because Mechanical may perform background tasks each time any of its\nentities are created, updated, or deleted. Mechanical scripting has a Transaction class for deferring many of these\ntasks until after a block of commands are run. Here is an example:"},{"objectID":"Home","href":"user_guide/scripting/overview.html#api-entry-points","title":"Overview > API entry points","text":"API entry points\n\nWhen running scripts inside of Mechanical, you can access the APIs via these entry points:\n\nExtAPI: Entry point for all APIs\n\nDataModel: Entry point to access CAD and mesh entities and objects from the Outline\n\nModel: The Model object from the Outline\n\nTree: The Outline\n\nGraphics: The 3D graphics engine\n\nYou also have access to several types and namespaces that are included in the scripting scope but are not available\nfrom those entry points.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"user_guide/howto/configuration.html#addin-configuration","title":"Addin configuration","text":"Addin configuration\n\nThere are some configuration options that are respected when loading an embedded instance\nof Mechanical into python.\nThe class Configuration can be\nused to set up Addin configuration. This configuration can be supplied to the constructor\nof the class App.\n\nFor example, to load an instance of Mechanical using the “Mechanical” configuration name and\nwithout loading any ACT Addins:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Contribute","href":"contribute/developer.html#contributing-as-a-developer","title":"Contribute > Contributing as a developer","text":"Contributing as a developer\n\n Fork the repository\n\nLearn how to fork the project and get your own copy.\n\nfork-the-repository\n\n Clone the repository\n\nDownload your own copy in your local machine.\n\nclone-the-repository\n\n Install for developers\n\nInstall the project in editable mode.\n\ninstall-for-developers\n\n Adhere to coding style\n\nAdhere to the coding style guidelines using pre-commit hooks.\n\ncoding-style\n\n Run the tests\n\nVerify your changes by testing the project.\n\nrun-tests\n\n"},{"objectID":"Contribute","href":"contribute/developer.html#fork-the-repository","title":"Contribute > Contributing as a developer > Fork the repository","text":"Fork the repository\n\nForking the repository is the first step to contributing to the project. This\nallows you to have your own copy of the project so you can make changes without\naffection the main project. Once you have made your changes, you can submit a\npull-request to the main project to have your changes reviewed and merged.\n\n Fork this project\n\nIf you are an Ansys employee, you can skip this step.\n\n"},{"objectID":"Contribute","href":"contribute/developer.html#clone-the-repository","title":"Contribute > Contributing as a developer > Clone the repository","text":"Clone the repository\n\nMake sure you configure SSH with your GitHub\naccount. This allows you to clone the repository without having to use tokens\nor passwords. Also, make sure you have git installed in your machine.\n\nTo clone the repository using SSH, run:\n\nIf you are not an Ansys employee, you need to fork the repository and\nreplace ansys with your GitHub user name in the git clone\ncommand.\n\n"},{"objectID":"Contribute","href":"contribute/developer.html#install-for-developers","title":"Contribute > Contributing as a developer > Install for developers","text":"Install for developers\n\nInstalling PyMechanical in development mode allows you to perform changes to the code\nand see the changes reflected in your environment without having to reinstall\nthe library every time you make a change."},{"objectID":"Contribute","href":"contribute/developer.html#virtual-environment","title":"Contribute > Contributing as a developer > Virtual environment","text":"Virtual environment\n\nStart by navigating to the project’s root directory by running:\n\nThen, create a new virtual environment named .venv to isolate your system’s\nPython environment by running:\n\nFinally, activate this environment by running:\n\nWindows\n\nCMD\n\n\n\nPowerShell\n\n\n\nmacOS/Linux/UNIX\n\n"},{"objectID":"Contribute","href":"contribute/developer.html#development-mode","title":"Contribute > Contributing as a developer > Development mode","text":"Development mode\n\nNow, install PyMechanical in editable mode by running:\n\nVerify the installation by checking the version of the library:\n\n"},{"objectID":"Contribute","href":"contribute/developer.html#run-the-tests","title":"Contribute > Contributing as a developer > Run the tests","text":"Run the tests\n\nPyMechanical uses PyTest and tox for unit testing. Prior to running the tests,\nensure Mechanical is installed on your system with a valid license and the test\ndependencies are installed. Run this command to install the test dependencies:"},{"objectID":"Contribute","href":"contribute/developer.html#using-pytest","title":"Contribute > Contributing as a developer > Using pytest","text":"Using pytest\n\nTo run the tests, navigate to the root directory of the repository and run this command:\n\nThe pytest command runs all of the tests in the tests folder. After pytest is\ndone running, it shows the test coverage of each of the files in the repository. To run\nspecific tests, run these commands:\n\nSee the pyproject.toml file for a full list of markers (-m) and their descriptions.\n\nTo run specific tests based on a keyword, use the -k argument:"},{"objectID":"Contribute","href":"contribute/developer.html#using-tox","title":"Contribute > Contributing as a developer > Using tox","text":"Using tox\n\nThis project takes advantage of tox. This tool automates common development\ntasks (similar to Makefile), but it is oriented towards Python development.\n\nWhile Makefile has rules, tox has environments. In fact, tox\ncreates its own virtual environment so that anything being tested is isolated\nfrom the project to guarantee the project’s integrity.\n\nThe following environment commands are provided:\n\ntox -e style: Checks for coding style quality.\n\ntox -e py: Checks for unit tests.\n\ntox -e py-coverage: Checks for unit testing and code coverage.\n\ntox -e doc: Checks for documentation-building process."},{"objectID":"Contribute","href":"contribute/developer.html#remote-testing","title":"Contribute > Contributing as a developer > Remote testing","text":"Remote testing\n\nIf you do not have a licensed copy of Mechanical installed locally but want to\nrun PyMechanical unit tests on a remote instance, you must set up environment\nvariables.\n\nOn Linux\n\nOn Windows\n\nThe environment variables for your operating system tell PyMechanical\nto attempt to connect to the existing Mechanical service by default\nwhen you use the launch_mechanical()\nmethod.\n\n"},{"objectID":"Contribute","href":"contribute/developer.html#adhere-to-coding-style","title":"Contribute > Contributing as a developer > Adhere to coding style","text":"Adhere to coding style\n\nAs indicated in Coding style\nin the PyAnsys Developer’s Guide, PyMechanical follows PEP8 guidelines. PyMechanical\nimplements pre-commit for style checking.\n\nTo ensure your code meets minimum code styling standards, run these commands:\n\nYou can also install this as a pre-commit hook by running this command:\n\nThis way, it’s not possible for you to push code that fails the style checks:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"user_guide/scripting/threading.html#threading","title":"Threading","text":"Threading"},{"objectID":"Home","href":"user_guide/scripting/threading.html#concurrency-and-threads","title":"Threading > Concurrency and threads","text":"Concurrency and threads\n\nThe intent is not to provide an extensive explanation of concurrency and threads but\nrather to lay the groundwork for specific concurrency considerations for Mechanical’s\nscripting API. Some simplifications are employed for this purpose.\n\nCPUs can execute multiple subroutines of a program concurrently. One popular model\nfor this concurrency is called threading. There are other possible models, such\nas co-routines.\n\nA thread is a CPU virtualization of a CPU core. Traditionally, a computer can have\nmultiple CPUs, each executing multiple programs concurrently. Using clever scheduling,\na CPU can simulate more cores than it actually has. A thread is an abstraction around\neither a CPU core executing a program or a virtual CPU core executing a program. Within\na single process, there can be multiple threads running, and these threads can be\nexecuting in a single core or multiple cores.\n\nIn a traditional computer instruction set architecture, memory is a store of data that\nstores the program itself and data used by the program. CPUs contain a small amount of\nmemory that can be used to run a program, but often times an external memory store,\ntypically using RAM, is used by the program. Frequently, when running a program, the\nCPU needs to fetch data from RAM or store data back into RAM.\n\nCPUs operate at the speed of electrons and can often do trillions of operations per\nsecond. If there is only one program running on a CPU and a private section of memory\nthat the program needs, it can shuttle data to and from that memory extremely quickly.\n\nWhen there are multiple programs or threads running on a CPU, things can get tricker.\nConsider a (contrived) example with a simple program that increments an integer:\n\nIf i is a 32-bit integer, it is represented in binary. For example, the number 11\nis 00000000 00000000 00000000 00001011, and the number 12 is 00000000 00000000 00000000 00001100.\nTo change a value from 11 to 12, a total of three bits must flip between 0 and 1.\nIt is possible for a CPU to perform that operation with three independent bit flip instructions.\n\nNow consider that two concurrently running threads are both trying to increment this integer\nat roughly the same time, at the time scale of CPUs. The first thread flips one of\nthe bits, making the binary value 00000000 00000000 00000000 00001111, which represents the\nnumber 15. The second thread sees that binary amount and interprets the operation to be\nincrementing from 15 to 16, or from 00000000 00000000 00000000 00001111 to\n00000000 00000000 00000000 00010000, which is performed using 5 bit flips. So one thread\nflips the latter 3 bits, and the other thread flips the latter 5 bits. This might result in the\noutcome 00000000 00000000 00000000 00010111, which represents the number 21, a value\ncertainly not two increments on the number 11. Depending on the interpretation of that integer\nvalue by the program, the behavior of the program might do literally anything, with erratic,\nrandom, and often difficult to reproduce (let alone fix) bugs."},{"objectID":"Home","href":"user_guide/scripting/threading.html#race-condition","title":"Threading > Race condition","text":"Race condition\n\nThis preceding situation is called a race condition, where concurrent programs are incorrectly\naccessing or mutating the same memory in such a way that leads to surprising consequences. They may\nseem rare. However, remember that when a CPU situation has a probability of one in a million, it is\nlikely to occur hundreds of times per second. If it has a much smaller probability than that, it can\noccur once every few days or once every few weeks. In the Therac-25 radiation machine, a race\ncondition actually led to three deaths and more debilitating injuries."},{"objectID":"Home","href":"user_guide/scripting/threading.html#mitigation-strategies","title":"Threading > Mitigation strategies","text":"Mitigation strategies\n\nThere are a number of strategies that software engineers use to benefit from the enhanced\nperformance of concurrent programs without suffering from race conditions:\n\nData copies: Algorithms operate on private copies of data, rather than shared memory.\n\nThread-compatible data structures: These data structures are designed to allow for\nconcurrent read-only access of data but not concurrent write access to data.\n\nThread-safe data structures: These data structures allow both concurrent read and write\naccess to data.\n\nTask posting: All calls to a set of functions implicitly schedule the function to run on a\ndedicated thread, allowing  two calls to any of these functions to run concurrently.\n\nAdopting any of these strategies comes with a tradeoff. Namely, these strategies typically\nask the CPU to do additional work in form of memory walls, mutexes, and other low-level\nCPU-intrinsic functions. Or, they require the program to do additional work in scheduling\ntasks. Usually, these are performance pessimizations for the 99% of cases where\nconcurrency is not needed. As such, adopting these strategies causes performance\nproblems for the typical user."},{"objectID":"Home","href":"user_guide/scripting/threading.html#mechanicals-threading-model","title":"Threading > Mechanical’s threading model","text":"Mechanical’s threading model\n\nMechanical is a large-scale application with multiple concurrent threads running at\nany one time. However, it exhibits thread affinity, where a single thread is privileged above\nall others with respect to data access and mutation. If the user interface (UI) is running,\nthis thread is typically called the UI thread, and in batch mode, it is typically called the\nmain thread. Some of the data structures used by Mechanical’s code are thread-compatible.\nSome of the APIs use task posting. However, in the general case, using any Mechanical\nAPI on a non-privileged thread carries a risk of race conditions. It is difficult to quantify\nthe risk or to distinguish which operations are most likely to be vulnerable to them due to\nthe large scale of the Mechanical application’s code.\n\nAs such, Mechanical APIs MUST only be run on the UI thread or main thread, in interactive and batch\nmode respectively. For PyMechanical, this means the following:\n\nFor an embedded instance, all scripting APIs are executed on the Python thread that constructed\nthe instance of Mechanical.\n\nFor a remote session, the Python code that is sent to the server does not contain threading\nconstructs that try to run APIs in a background thread.\n\nGiven the preceding restrictions, it is possible to offload some work to a background\nthread, as long as that thread does not access Mechanical’s scripting API.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/rpc/utils/index.html#the-utilspy-module","title":"The utils.py module","text":"The utils.py module\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/rpc/utils/index.html#summary","title":"The utils.py module > Summary","text":"Summary\n\nClasses\n\n\n\n\n\nremote_method\n\nDecorator for passing remote methods.\n\nMethodType\n\nEnum for method or property types.\n\nFunctions\n\n\n\n\n\ntry_get_remote_method\n\nTry to get a remote method.\n\ntry_get_remote_property\n\nTry to get a remote property.\n\nget_remote_methods\n\nYield names and methods of an object’s remote methods.\n\nget_free_port\n\nGet free port.\n\nConstants\n\n\n\n\n\nPYMECHANICAL_DEFAULT_RPC_PORT\n\n\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/rpc/utils/index.html#description","title":"The utils.py module > Description","text":"Description\n\nUtilities necessary for remote calls."},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/rpc/utils/index.html#module-detail","title":"The utils.py module > Module detail","text":"Module detail\n\n\n\nutils.try_get_remote_method(methodname: str, obj: Any) -> Tuple[str, Callable]\n\nTry to get a remote method.\n\n\n\nutils.try_get_remote_property(attrname: str, obj: Any) -> Tuple[str, property]\n\nTry to get a remote property.\n\n\n\nutils.get_remote_methods(obj) -> Generator[Tuple[str, Callable, MethodType], None, None]\n\nYield names and methods of an object’s remote methods.\n\nA remote method is identified by the presence of an attribute _is_remote set to True.\n\nParameters\n\nobj: Any\n\nThe object to inspect for remote methods.\n\nYields\n\nGenerator[Tuple[python:str, Callable], python:None, python:None]\n\nA tuple containing the method name and the method itself\nfor each remote method found in the object\n\n\n\nutils.get_free_port(port: int = None)\n\nGet free port.\n\nIf port is not given, it will find a free port starting from PYMECHANICAL_DEFAULT_RPC_PORT.\n\n\n\nutils.PYMECHANICAL_DEFAULT_RPC_PORT = 20000\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/advanced_examples/index.html#advanced-examples","title":"Advanced examples","text":"Advanced examples\n\nThis section contains examples that demonstrates advanced capabilities of Mechanical\nusing Pymechanical.\nFor more information, see Advanced examples.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/graphics/usd_converter/index.html#the-usd_converterpy-module","title":"The usd_converter.py module","text":"The usd_converter.py module\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/graphics/usd_converter/index.html#summary","title":"The usd_converter.py module > Summary","text":"Summary\n\nFunctions\n\n\n\n\n\nload_into_usd_stage\n\nLoad mechanical scene into usd stage stage.\n\nto_usd_stage\n\nConvert mechanical scene to new usd stage and return it.\n\nto_usd_file\n\nExport mechanical scene to usd file."},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/graphics/usd_converter/index.html#description","title":"The usd_converter.py module > Description","text":"Description\n\nConverter to OpenUSD."},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/graphics/usd_converter/index.html#module-detail","title":"The usd_converter.py module > Module detail","text":"Module detail\n\n\n\nusd_converter.load_into_usd_stage(scene: Ansys.Mechanical.Scenegraph.GroupNode, stage: pxr.Usd.Stage) -> None\n\nLoad mechanical scene into usd stage stage.\n\n\n\nusd_converter.to_usd_stage(app: ansys.mechanical.core.embedding.App, name: str) -> pxr.Usd.Stage\n\nConvert mechanical scene to new usd stage and return it.\n\n\n\nusd_converter.to_usd_file(app, path: str) -> None\n\nExport mechanical scene to usd file.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/ui/UILauncher.html#uilauncher","title":"UILauncher","text":"UILauncher\n\n\n\nclass ansys.mechanical.core.embedding.ui.UILauncher(dry_run: bool = False)\n\nLaunch the GUI using a temporary mechdb file."},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/ui/UILauncher.html#overview","title":"UILauncher > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nsave_original\n\nSave the active mechdb file.\n\nsave_temp_copy\n\nSave a new mechdb file with a temporary name.\n\nopen_original\n\nOpen the original mechdb file from save_original().\n\ngraphically_launch_temp\n\nLaunch the GUI for the mechdb file with a temporary name from save_temp_copy()."},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/ui/UILauncher.html#import-detail","title":"UILauncher > Import detail","text":"Import detail\n\nfrom ansys.mechanical.core.embedding.ui import UILauncher"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/ui/UILauncher.html#method-detail","title":"UILauncher > Method detail","text":"Method detail\n\n\n\nUILauncher.save_original(app: ansys.mechanical.core.embedding.App) -> None\n\nSave the active mechdb file.\n\nParameters\n\napp: ansys.mechanical.core.embedding.app.App\n\nA Mechanical embedding application.\n\n\n\nUILauncher.save_temp_copy(app: ansys.mechanical.core.embedding.App) -> pathlib.Path | pathlib.Path\n\nSave a new mechdb file with a temporary name.\n\nParameters\n\napp: ansys.mechanical.core.embedding.app.App\n\nA Mechanical embedding application.\n\n\n\nUILauncher.open_original(app: ansys.mechanical.core.embedding.App, mechdb_file: str) -> None\n\nOpen the original mechdb file from save_original().\n\nParameters\n\napp: ansys.mechanical.core.embedding.app.App\n\nA Mechanical embedding application.\n\nmechdb_file: str\n\nThe full path to the active mechdb file.\n\n\n\nUILauncher.graphically_launch_temp(app: ansys.mechanical.core.embedding.App, temp_file: pathlib.Path) -> subprocess.Popen | str\n\nLaunch the GUI for the mechdb file with a temporary name from save_temp_copy().\n\nParameters\n\napp: ansys.mechanical.core.embedding.app.App\n\nA Mechanical embedding application.\n\ntemp_file: pathlib.Path\n\nThe full path to the temporary mechdb file.\n\nReturns\n\nsubprocess.Popen\n\nThe subprocess that launches the GUI for the temporary mechdb file.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/rpc/utils/remote_method.html#remote_method","title":"remote_method","text":"remote_method\n\n\n\nclass ansys.mechanical.core.embedding.rpc.utils.remote_method(func)\n\nDecorator for passing remote methods."},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/rpc/utils/remote_method.html#overview","title":"remote_method > Overview","text":"Overview\n\nSpecial methods\n\n\n\n\n\n__call__\n\nCall the stored function with provided arguments.\n\n__call_method__\n\nCall the stored function with the instance and provided arguments.\n\n__get__\n\nReturn a partially applied method."},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/rpc/utils/remote_method.html#import-detail","title":"remote_method > Import detail","text":"Import detail\n\nfrom ansys.mechanical.core.embedding.rpc.utils import remote_method"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/rpc/utils/remote_method.html#method-detail","title":"remote_method > Method detail","text":"Method detail\n\n\n\nremote_method.__call__(*args, **kwargs)\n\nCall the stored function with provided arguments.\n\n\n\nremote_method.__call_method__(instance, *args, **kwargs)\n\nCall the stored function with the instance and provided arguments.\n\n\n\nremote_method.__get__(obj, objtype)\n\nReturn a partially applied method.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/rpc/utils/MethodType.html#methodtype","title":"MethodType","text":"MethodType\n\n\n\nclass ansys.mechanical.core.embedding.rpc.utils.MethodType\n\nEnum for method or property types."},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/rpc/utils/MethodType.html#overview","title":"MethodType > Overview","text":"Overview\n\nAttributes\n\n\n\n\n\nMETHOD\n\n\n\nPROP\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/rpc/utils/MethodType.html#import-detail","title":"MethodType > Import detail","text":"Import detail\n\nfrom ansys.mechanical.core.embedding.rpc.utils import MethodType"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/rpc/utils/MethodType.html#attribute-detail","title":"MethodType > Attribute detail","text":"Attribute detail\n\n\n\nMethodType.METHOD = 0\n\n\n\n\n\nMethodType.PROP = 1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/logger/linux_api/APIBackend.html#apibackend","title":"APIBackend","text":"APIBackend\n\n\n\nclass ansys.mechanical.core.embedding.logger.linux_api.APIBackend\n\nProvides the API backend for the Mechanical logging system."},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/logger/linux_api/APIBackend.html#overview","title":"APIBackend > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nflush\n\nFlush the log manually.\n\nenable\n\nEnable logging.\n\ndisable\n\nDisable logging.\n\nset_log_level\n\nSet the log level for Mechanical based on the Python log level.\n\nset_auto_flush\n\nSet whether to auto flush to the standard log file.\n\nset_directory\n\nSet the location to write the log file to.\n\nset_base_directory\n\nSet the base location to write the log file to.\n\ncan_log_message\n\nReturn whether a message with the given severity is outputted to the log.\n\nlog_message\n\nLog the message to the configured logging mechanism."},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/logger/linux_api/APIBackend.html#import-detail","title":"APIBackend > Import detail","text":"Import detail\n\nfrom ansys.mechanical.core.embedding.logger.linux_api import APIBackend"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/logger/linux_api/APIBackend.html#method-detail","title":"APIBackend > Method detail","text":"Method detail\n\n\n\nAPIBackend.flush() -> None\n\nFlush the log manually.\n\n\n\nAPIBackend.enable(sink: int = sinks.StandardSinks.CONSOLE) -> None\n\nEnable logging.\n\n\n\nAPIBackend.disable(sink: int = sinks.StandardSinks.CONSOLE) -> None\n\nDisable logging.\n\n\n\nAPIBackend.set_log_level(level: int, sink: int = sinks.StandardSinks.CONSOLE) -> None\n\nSet the log level for Mechanical based on the Python log level.\n\n\n\nAPIBackend.set_auto_flush(flush: bool) -> None\n\nSet whether to auto flush to the standard log file.\n\n\n\nAPIBackend.set_directory(directory: str) -> None\n\nSet the location to write the log file to.\n\n\n\nAPIBackend.set_base_directory(base_directory: str) -> None\n\nSet the base location to write the log file to.\n\nThe base directory contains time-stamped subfolders where the log file\nis actually written to. If a base directory is set, it takes precedence over the\nset_directory location.\n\nThis does not have an API to set at runtime.\n\n\n\nAPIBackend.can_log_message(level: int) -> bool\n\nReturn whether a message with the given severity is outputted to the log.\n\n\n\nAPIBackend.log_message(level: int, context: str, message: str) -> None\n\nLog the message to the configured logging mechanism.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/logger/windows_api/APIBackend.html#apibackend","title":"APIBackend","text":"APIBackend\n\n\n\nclass ansys.mechanical.core.embedding.logger.windows_api.APIBackend\n\nProvides API backend for Mechanical logging system."},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/logger/windows_api/APIBackend.html#overview","title":"APIBackend > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nflush\n\nFlush the log manually.\n\nenable\n\nEnable logging.\n\ndisable\n\nDisable logging.\n\nset_log_level\n\nSet the log level for Mechanical based on the Python log level.\n\nset_auto_flush\n\nSet whether to auto flush to the standard log file.\n\nset_directory\n\nSet the location to write the log file to.\n\nset_base_directory\n\nSet the base location to write the log file to.\n\ncan_log_message\n\nReturn whether a message with the given severity is outputted to the log.\n\nlog_message\n\nLog the message to the configured logging mechanism."},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/logger/windows_api/APIBackend.html#import-detail","title":"APIBackend > Import detail","text":"Import detail\n\nfrom ansys.mechanical.core.embedding.logger.windows_api import APIBackend"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/logger/windows_api/APIBackend.html#method-detail","title":"APIBackend > Method detail","text":"Method detail\n\n\n\nAPIBackend.flush() -> None\n\nFlush the log manually.\n\n\n\nAPIBackend.enable(sink: int = sinks.StandardSinks.CONSOLE) -> None\n\nEnable logging.\n\n\n\nAPIBackend.disable(sink: int = sinks.StandardSinks.CONSOLE) -> None\n\nDisable logging.\n\n\n\nAPIBackend.set_log_level(level: int, sink: int = sinks.StandardSinks.CONSOLE) -> None\n\nSet the log level for Mechanical based on the Python log level.\n\n\n\nAPIBackend.set_auto_flush(flush: bool) -> None\n\nSet whether to auto flush to the standard log file.\n\n\n\nAPIBackend.set_directory(directory: str) -> None\n\nSet the location to write the log file to.\n\n\n\nAPIBackend.set_base_directory(base_directory: str) -> None\n\nSet the base location to write the log file to.\n\nThe base directory contains time-stamped subfolders where the log file\nis actually written to. If a base directory is set, it takes precedence over the\nset_directory location.\n\nThis does not have an API to set at runtime.\n\n\n\nAPIBackend.can_log_message(level: int) -> bool\n\nReturn whether a message with the given severity is outputted to the log.\n\n\n\nAPIBackend.log_message(level: int, context: str, message: str) -> None\n\nLog the message to the configured logging mechanism.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/mechanical/index.html#the-mechanicalpy-module","title":"The mechanical.py module","text":"The mechanical.py module\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/mechanical/index.html#summary","title":"The mechanical.py module > Summary","text":"Summary\n\nClasses\n\n\n\n\n\nMechanical\n\nConnects to a gRPC Mechanical server and allows commands to be passed.\n\nFunctions\n\n\n\n\n\nsetup_logger\n\nInitialize the logger for the given mechanical instance.\n\nsuppress_logging\n\nDecorate a function to suppress the logging for a Mechanical instance.\n\nport_in_use\n\nCheck whether a port is in use at the given host.\n\ncheck_ports\n\nCheck the state of ports in a port range.\n\nclose_all_local_instances\n\nClose all Mechanical instances within a port range.\n\ncreate_ip_file\n\nCreate the mylocal.ip file needed to change the IP address of the gRPC server.\n\nget_mechanical_path\n\nGet path.\n\ncheck_valid_mechanical\n\nChange to see if the default Mechanical path is valid.\n\nchange_default_mechanical_path\n\nChange default path.\n\nsave_mechanical_path\n\nSave path.\n\nget_start_instance\n\nCheck if the PYMECHANICAL_START_INSTANCE environment variable exists and is valid.\n\nlaunch_grpc\n\nStart Mechanical locally in gRPC mode.\n\nlaunch_rpyc\n\nStart Mechanical locally in RPyC mode.\n\nlaunch_remote_mechanical\n\nStart Mechanical remotely using the Product Instance Management (PIM) API.\n\nlaunch_mechanical\n\nStart Mechanical locally.\n\nconnect_to_mechanical\n\nConnect to an existing Mechanical server instance.\n\nAttributes\n\n\n\n\n\nclient_to_server_loglevel\n\n\n\nConstants\n\n\n\n\n\nMAX_MESSAGE_LENGTH\n\nDefault message length.\n\nDEFAULT_CHUNK_SIZE\n\nDefault chunk size.\n\nDEFAULT_FILE_CHUNK_SIZE\n\nDefault file chunk size.\n\nLOCALHOST\n\nLocalhost address.\n\nMECHANICAL_DEFAULT_PORT\n\nDefault Mechanical port.\n\nGALLERY_INSTANCE\n\nList of gallery instances.\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/mechanical/index.html#description","title":"The mechanical.py module > Description","text":"Description\n\nConnect to Mechanical gRPC server and issues commands."},{"objectID":"Home","href":"api/ansys/mechanical/core/mechanical/index.html#module-detail","title":"The mechanical.py module > Module detail","text":"Module detail\n\n\n\nmechanical.setup_logger(loglevel='INFO', log_file=True, mechanical_instance=None)\n\nInitialize the logger for the given mechanical instance.\n\n\n\nmechanical.suppress_logging(func)\n\nDecorate a function to suppress the logging for a Mechanical instance.\n\n\n\nmechanical.port_in_use(port, host=LOCALHOST)\n\nCheck whether a port is in use at the given host.\n\nYou must actually bind the address. Just checking if you can create\na socket is insufficient because it is possible to run into permission\nerrors like:\n\n\n\nmechanical.check_ports(port_range, ip='localhost')\n\nCheck the state of ports in a port range.\n\n\n\nmechanical.close_all_local_instances(port_range=None, use_thread=True)\n\nClose all Mechanical instances within a port range.\n\nYou can use this method when cleaning up from a failed pool or\nbatch run.\n\nParameters\n\nport_range\n\npython:list, optional\n\nList of a range of ports to use when cleaning up Mechanical. The\ndefault is None, in which case the ports managed by\nPyMechanical are used.\n\nuse_thread\n\nbool, optional\n\nWhether to use threads to close the Mechanical instances.\nThe default is True. So this call will return immediately.\n\nExamples\n\nClose all Mechanical instances connected on local ports.\n\n>>> import ansys.mechanical.core as pymechanical\n>>> pymechanical.close_all_local_instances()\n\n\n\nmechanical.create_ip_file(ip, path)\n\nCreate the mylocal.ip file needed to change the IP address of the gRPC server.\n\n\n\nmechanical.get_mechanical_path(allow_input=True)\n\nGet path.\n\nDeprecated - use ansys.tools.path.get_mechanical_path instead\n\n\n\nmechanical.check_valid_mechanical()\n\nChange to see if the default Mechanical path is valid.\n\n\n\nmechanical.change_default_mechanical_path(exe_loc)\n\nChange default path.\n\nDeprecated - use ansys.tools.path.change_default_mechanical_path instead.\n\n\n\nmechanical.save_mechanical_path(exe_loc=None)\n\nSave path.\n\nDeprecated - use ansys.tools.path.save_mechanical_path instead.\n\n\n\nmechanical.get_start_instance(start_instance_default=True)\n\nCheck if the PYMECHANICAL_START_INSTANCE environment variable exists and is valid.\n\nParameters\n\nstart_instance_default\n\nbool, optional\n\nValue to return when PYMECHANICAL_START_INSTANCE is unset.\n\nReturns\n\nbool\n\nTrue when the PYMECHANICAL_START_INSTANCE environment variable exists\nand is valid, False when this environment variable does not exist or is not valid.\nIf it is unset, start_instance_default is returned.\n\nRaises\n\nOSError\n\nRaised when PYMECHANICAL_START_INSTANCE is not either True or False\n(case independent).\n\n\n\nmechanical.launch_grpc(exec_file='', batch=True, port=MECHANICAL_DEFAULT_PORT, additional_switches=None, additional_envs=None, verbose=False) -> int\n\nStart Mechanical locally in gRPC mode.\n\nParameters\n\nexec_file\n\npython:str, optional\n\nPath for the Mechanical executable file.  The default is None, in which\ncase the cached location is used.\n\nbatch\n\nbool, optional\n\nWhether to launch Mechanical in batch mode. The default is True.\nWhen False, Mechanical is launched in UI mode.\n\nport\n\npython:int, optional\n\nPort to launch the Mechanical instance on. The default is\nMECHANICAL_DEFAULT_PORT. The final port is the first\nport available after (or including) this port.\n\nadditional_switches\n\npython:list, optional\n\nList of additional arguments to pass. The default is None.\n\nadditional_envs\n\ndictionary, optional\n\nDictionary of additional environment variables to pass. The default\nis None.\n\nverbose\n\nbool, optional\n\nWhether to print all output when launching and running Mechanical. The\ndefault is False. Printing all output is not recommended unless\nyou are debugging the startup of Mechanical.\n\nReturns\n\npython:int\n\nPort number that the Mechanical instance started on.\n\nNotes\n\nIf PYMECHANICAL_START_INSTANCE is set to FALSE, the launch_mechanical\nmethod looks for an existing instance of Mechanical at PYMECHANICAL_IP on port\nPYMECHANICAL_PORT, with default to 127.0.0.1 and 10000 if unset.\nThis is typically used for automated documentation and testing.\n\nExamples\n\nLaunch Mechanical using the default configuration.\n\n>>> from ansys.mechanical.core import launch_mechanical\n>>> mechanical = launch_mechanical()\n\nLaunch Mechanical using a specified executable file.\n\n>>> exec_file_path = 'C:/Program Files/ANSYS Inc/v252/aisol/bin/win64/AnsysWBU.exe'\n>>> mechanical = launch_mechanical(exec_file=exec_file_path)\n\n\n\nmechanical.launch_rpyc(exec_file='', batch=True, port=MECHANICAL_DEFAULT_PORT, additional_switches=None, additional_envs=None, verbose=False) -> Tuple[int, subprocess.Popen]\n\nStart Mechanical locally in RPyC mode.\n\n\n\nmechanical.launch_remote_mechanical(version=None)\n\nStart Mechanical remotely using the Product Instance Management (PIM) API.\n\nWhen calling this method, you must ensure that you are in an environment\nwhere PyPIM is configured. You can use the\npypim.is_configured\nmethod to verify that PyPIM is configured.\n\nParameters\n\nversion\n\npython:str, optional\n\nMechanical version to run in the three-digit format. For example, \"252\" to\nrun 2025 R2. The default is None, in which case the server runs the latest\ninstalled version.\n\nReturns\n\nTuple containing channel, remote_instance.\n\n\n\n\n\nmechanical.launch_mechanical(allow_input=True, exec_file=None, batch=True, loglevel='ERROR', log_file=False, log_mechanical=None, additional_switches=None, additional_envs=None, start_timeout=120, port=None, ip=None, start_instance=None, verbose_mechanical=False, clear_on_connect=False, cleanup_on_exit=True, version=None, keep_connection_alive=True, backend='mechanical') -> Mechanical\n\nStart Mechanical locally.\n\nParameters\n\nallow_input: bool, optional\n\nWhether to allow user input when discovering the path to the Mechanical\nexecutable file.\n\nexec_file\n\npython:str, optional\n\nPath for the Mechanical executable file. The default is None,\nin which case the cached location is used. If PyPIM is configured\nand this parameter is set to None, PyPIM launches Mechanical\nusing its version parameter.\n\nbatch\n\nbool, optional\n\nWhether to launch Mechanical in batch mode. The default is True.\nWhen False, Mechanical launches in UI mode.\n\nloglevel\n\npython:str, optional\n\nLevel of messages to print to the console.\nOptions are:\n\n\"WARNING\": Prints only Ansys warning messages.\n\n\"ERROR\": Prints only Ansys error messages.\n\n\"INFO\": Prints all Ansys messages.\n\nThe default is WARNING.\n\nlog_file\n\nbool, optional\n\nWhether to copy the messages to a file named logs.log, which is\nlocated where the Python script is executed. The default is False.\n\nlog_mechanical\n\npython:str, optional\n\nPath to the output file on the local disk to write every script\ncommand to. The default is None. However, you might set\n\"log_mechanical='pymechanical_log.txt'\" to write all commands that are\nsent to Mechanical via PyMechanical to this file. You can then use these\ncommands to run a script within Mechanical without PyMechanical.\n\nadditional_switches\n\npython:list, optional\n\nAdditional switches for Mechanical. The default is None.\n\nadditional_envs\n\ndictionary, optional\n\nDictionary of additional environment variables to pass. The default\nis None.\n\nstart_timeout\n\npython:float, optional\n\nMaximum allowable time in seconds to connect to the Mechanical server.\nThe default is 120.\n\nport\n\npython:int, optional\n\nPort to launch the Mechanical gRPC server on. The default is None,\nin which case 10000 is used. The final port is the first\nport available after (or including) this port. You can override the\ndefault behavior of this parameter with the\nPYMECHANICAL_PORT=<VALID PORT> environment variable.\n\nip\n\npython:str, optional\n\nIP address to use only when start_instance is False. The\ndefault is None, in which case \"127.0.0.1\" is used. If you\nprovide an IP address, start_instance is set to False.\nA host name can be provided as an alternative to an IP address.\n\nstart_instance\n\nbool, optional\n\nWhether to launch and connect to a new Mechanical instance. The default\nis None, in which case an attempt is made to connect to an existing\nMechanical instance at the given ip and port parameters, which have\ndefaults of \"127.0.0.1\" and 10000 respectively. When True,\na local instance of Mechanical is launched. You can override the default\nbehavior of this parameter with the PYMECHANICAL_START_INSTANCE=FALSE\nenvironment variable.\n\nverbose_mechanical\n\nbool, optional\n\nWhether to enable printing of all output when launching and running\na Mechanical instance. The default is False. This parameter should be\nset to True for debugging only as output can be tracked within\nPyMechanical.\n\nclear_on_connect\n\nbool, optional\n\nWhen start_instance is False, whether to clear the environment\nwhen connecting to Mechanical. The default is False. When True,\na fresh environment is provided when you connect to Mechanical.\n\ncleanup_on_exit\n\nbool, optional\n\nWhether to exit Mechanical when Python exits. The default is True.\nWhen False, Mechanical is not exited when the garbage for this Mechanical\ninstance is collected.\n\nversion\n\npython:str, optional\n\nMechanical version to run in the three-digit format. For example, \"252\"\nfor 2025 R2. The default is None, in which case the server runs the\nlatest installed version. If PyPIM is configured and exec_file=None,\nPyPIM launches Mechanical using its version parameter.\n\nkeep_connection_alive\n\nbool, optional\n\nWhether to keep the gRPC connection alive by running a background thread\nand making dummy calls for remote connections. The default is True.\n\nbackend\n\npython:str, optional\n\nType of RPC to use. The default is \"mechanical\" which uses grpc.\nThe other option is \"python\" which uses RPyC.\n\nReturns\n\nansys.mechanical.core.mechanical.Mechanical\n\nInstance of Mechanical.\n\nNotes\n\nIf the environment is configured to use PyPIM\nand start_instance=True, then starting the instance is delegated to PyPIM.\nIn this case, most of the preceding parameters are ignored because the server-side\nconfiguration is used.\n\nExamples\n\nLaunch Mechanical.\n\n>>> from ansys.mechanical.core import launch_mechanical\n>>> mech = launch_mechanical()\n\nLaunch Mechanical using a specified executable file.\n\n>>> exec_file_path = 'C:/Program Files/ANSYS Inc/v252/aisol/bin/win64/AnsysWBU.exe'\n>>> mech = launch_mechanical(exec_file=exec_file_path)\n\nConnect to an existing Mechanical instance at IP address 192.168.1.30 on port\n50001.\n\n>>> mech = launch_mechanical(start_instance=False, ip='192.168.1.30', port=50001)\n\n\n\nmechanical.connect_to_mechanical(ip=None, port=None, loglevel='ERROR', log_file=False, log_mechanical=None, connect_timeout=120, clear_on_connect=False, cleanup_on_exit=False, keep_connection_alive=True) -> Mechanical\n\nConnect to an existing Mechanical server instance.\n\nParameters\n\nip\n\npython:str, optional\n\nIP address for connecting to an existing Mechanical instance. The\nIP address defaults to \"127.0.0.1\".\n\nport\n\npython:int, optional\n\nPort to listen on for an existing Mechanical instance. The default is None,\nin which case 10000 is used. You can override the\ndefault behavior of this parameter with the\nPYMECHANICAL_PORT=<VALID PORT> environment variable.\n\nloglevel\n\npython:str, optional\n\nLevel of messages to print to the console.\nOptions are:\n\n\"WARNING\": Prints only Ansys warning messages.\n\n\"ERROR\": Prints only Ansys error messages.\n\n\"INFO\": Prints all Ansys messages.\n\nThe default is WARNING.\n\nlog_file\n\nbool, optional\n\nWhether to copy the messages to a file named logs.log, which is\nlocated where the Python script is executed. The default is False.\n\nlog_mechanical\n\npython:str, optional\n\nPath to the output file on the local disk to write every script\ncommand to. The default is None. However, you might set\n\"log_mechanical='pymechanical_log.txt'\" to write all commands that are\nsent to Mechanical via PyMechanical to this file. You can then use these\ncommands to run a script within Mechanical without PyMechanical.\n\nconnect_timeout\n\npython:float, optional\n\nMaximum allowable time in seconds to connect to the Mechanical server.\nThe default is 120.\n\nclear_on_connect\n\nbool, optional\n\nWhether to clear the Mechanical instance when connecting. The default is False.\nWhen True, a fresh environment is provided when you connect to Mechanical.\n\ncleanup_on_exit\n\nbool, optional\n\nWhether to exit Mechanical when Python exits. The default is False.\nWhen False, Mechanical is not exited when the garbage for this Mechanical\ninstance is collected.\n\nkeep_connection_alive\n\nbool, optional\n\nWhether to keep the gRPC connection alive by running a background thread\nand making dummy calls for remote connections. The default is True.\n\nReturns\n\nansys.mechanical.core.mechanical.Mechanical\n\nInstance of Mechanical.\n\nExamples\n\nConnect to an existing Mechanical instance at IP address 192.168.1.30 on port\n50001..\n\n>>> from ansys.mechanical.core import connect_to_mechanical\n>>> pymech = connect_to_mechanical(ip='192.168.1.30', port=50001)\n\n\n\nmechanical.MAX_MESSAGE_LENGTH\n\nDefault message length.\n\n\n\nmechanical.DEFAULT_CHUNK_SIZE = 262144\n\nDefault chunk size.\n\n\n\nmechanical.DEFAULT_FILE_CHUNK_SIZE = 1048576\n\nDefault file chunk size.\n\n\n\nmechanical.LOCALHOST = '127.0.0.1'\n\nLocalhost address.\n\n\n\nmechanical.MECHANICAL_DEFAULT_PORT = 10000\n\nDefault Mechanical port.\n\n\n\nmechanical.GALLERY_INSTANCE = [None]\n\nList of gallery instances.\n\n\n\nmechanical.client_to_server_loglevel\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/index.html#the-ansysmechanicalcore-library","title":"The ansys.mechanical.core library","text":"The ansys.mechanical.core library\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/index.html#summary","title":"The ansys.mechanical.core library > Summary","text":"Summary\n\nSubpackages\n\n\n\n\n\nembedding\n\nImports for the embedding sub-package.\n\nexamples\n\nInitialize the package level imports.\n\nSubmodules\n\n\n\n\n\nerrors\n\nPyMechanical-specific errors.\n\nfeature_flags\n\nMechanical beta feature flags.\n\nide_config\n\nConvenience CLI to run mechanical.\n\nlauncher\n\nLaunch Mechanical in batch or UI mode.\n\nlogging\n\nLogging module.\n\nmechanical\n\nConnect to Mechanical gRPC server and issues commands.\n\nmisc\n\nContain miscellaneous functions and methods at the module level.\n\npool\n\nThis module is for threaded implementations of the Mechanical interface.\n\nrun\n\nConvenience CLI to run mechanical.\n\nConstants\n\n\n\n\n\nUSER_DATA_PATH\n\nUser data directory.\n\nEXAMPLES_PATH\n\nExamples path.\n\nLOG\n\nCreate logger for package level use.\n\nHAS_EMBEDDING\n\nWhether or not Mechanical embedding is being used.\n\nLOCAL_PORTS\n\nManage the package level ports.\n\nBUILDING_GALLERY\n\nWhether or not to build gallery examples.\n\n\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/index.html#description","title":"The ansys.mechanical.core library > Description","text":"Description\n\nInitialize the package level imports."},{"objectID":"Home","href":"api/ansys/mechanical/core/index.html#module-detail","title":"The ansys.mechanical.core library > Module detail","text":"Module detail\n\n\n\ncore.USER_DATA_PATH = b'.'\n\nUser data directory.\n\n\n\ncore.EXAMPLES_PATH\n\nExamples path.\n\n\n\ncore.LOG\n\nCreate logger for package level use.\n\n\n\ncore.HAS_EMBEDDING = True\n\nWhether or not Mechanical embedding is being used.\n\n\n\ncore.LOCAL_PORTS = []\n\nManage the package level ports.\n\n\n\ncore.BUILDING_GALLERY = False\n\nWhether or not to build gallery examples.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/rpc/index.html#the-rpc-package","title":"The rpc package","text":"The rpc package\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/rpc/index.html#summary","title":"The rpc package > Summary","text":"Summary\n\nSubmodules\n\n\n\n\n\nclient\n\nClient for Mechanical services.\n\ndefault_server\n\nRemote Procedure Call (RPC) server.\n\nserver\n\nRemote Procedure Call (RPC) server.\n\nutils\n\nUtilities necessary for remote calls.\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/rpc/index.html#description","title":"The rpc package > Description","text":"Description\n\nRPC and Mechanical service implementation.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/find_mechanical/index.html#the-find_mechanicalpy-module","title":"The find_mechanical.py module","text":"The find_mechanical.py module\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/find_mechanical/index.html#summary","title":"The find_mechanical.py module > Summary","text":"Summary\n\nFunctions\n\n\n\n\n\ncli\n\nUse the CLI tool to find the Mechanical version and location."},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/find_mechanical/index.html#description","title":"The find_mechanical.py module > Description","text":"Description\n\nCli for finding mechanical installation."},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/find_mechanical/index.html#module-detail","title":"The find_mechanical.py module > Module detail","text":"Module detail\n\n\n\nfind_mechanical.cli(version: int, path: str | None = None) -> tuple[int, str]\n\nUse the CLI tool to find the Mechanical version and location.\n\nParameters\n\nversion: int\n\nAnsys version number.\n\npath: str, optional\n\nOptional path to the Ansys installation directory.\neg: “usr/ansys_inc/v251/”\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/graphics/embedding_plotter/PlotSettings.html#plotsettings","title":"PlotSettings","text":"PlotSettings\n\n\n\nclass ansys.mechanical.core.embedding.graphics.embedding_plotter.PlotSettings\n\nSettings for a plot."},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/graphics/embedding_plotter/PlotSettings.html#overview","title":"PlotSettings > Overview","text":"Overview\n\nAttributes\n\n\n\n\n\ndisplacement_scale_factor\n\n\n\npoint_size\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/graphics/embedding_plotter/PlotSettings.html#import-detail","title":"PlotSettings > Import detail","text":"Import detail\n\nfrom ansys.mechanical.core.embedding.graphics.embedding_plotter import PlotSettings"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/graphics/embedding_plotter/PlotSettings.html#attribute-detail","title":"PlotSettings > Attribute detail","text":"Attribute detail\n\n\n\nPlotSettings.displacement_scale_factor: float = 1.0\n\n\n\n\n\nPlotSettings.point_size = 5\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/errors/index.html#the-errorspy-module","title":"The errors.py module","text":"The errors.py module\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/errors/index.html#summary","title":"The errors.py module > Summary","text":"Summary\n\nExceptions\n\n\n\n\n\nVersionError\n\nRaises an error when the version of Mechanical is invalid.\n\nMechanicalRuntimeError\n\nRaises an error when Mechanical passes a runtime error.\n\nMechanicalExitedError\n\nRaises an error when Mechanical has exited.\n\nFunctions\n\n\n\n\n\nhandler\n\nPass signal to custom interrupt handler.\n\nprotect_grpc\n\nCapture gRPC exceptions and return a more succinct error message.\n\nConstants\n\n\n\n\n\nSIGINT_TRACKER\n\nList of SIGINT keyboard interrupts.\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/errors/index.html#description","title":"The errors.py module > Description","text":"Description\n\nPyMechanical-specific errors."},{"objectID":"Home","href":"api/ansys/mechanical/core/errors/index.html#module-detail","title":"The errors.py module > Module detail","text":"Module detail\n\n\n\nerrors.handler(sig, frame)\n\nPass signal to custom interrupt handler.\n\n\n\nerrors.protect_grpc(func)\n\nCapture gRPC exceptions and return a more succinct error message.\n\nCapture KeyboardInterrupt to avoid segfaulting Mechanical.\n\nThis works some of the time, but not all the time. For some\nreason gRPC still captures SIGINT.\n\n\n\nerrors.SIGINT_TRACKER = []\n\nList of SIGINT keyboard interrupts.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/logger/index.html#the-logger-package","title":"The logger package","text":"The logger package\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/logger/index.html#summary","title":"The logger package > Summary","text":"Summary\n\nSubmodules\n\n\n\n\n\nenviron\n\nEnvironment variables for mechanical logging.\n\nlinux_api\n\nInternal Mechanical logging Linux API.\n\nsinks\n\nMechanical application logging sinks.\n\nwindows_api\n\nWindows API for internal Mechanical logging.\n\nClasses\n\n\n\n\n\nConfiguration\n\nConfigures logger for Mechanical embedding.\n\nLogger\n\nProvides the Logger class for embedding.\n\nConstants\n\n\n\n\n\nLOGGING_SINKS\n\nConstant for logging sinks.\n\nLOGGING_CONTEXT\n\nConstant for logging context.\n\n\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/logger/index.html#description","title":"The logger package > Description","text":"Description\n\nEmbedding logger.\n\nModule to interact with the built-in logging system of Mechanical."},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/logger/index.html#module-detail","title":"The logger package > Module detail","text":"Module detail\n\n\n\nlogger.LOGGING_SINKS: Set[int]\n\nConstant for logging sinks.\n\n\n\nlogger.LOGGING_CONTEXT: str = 'PYMECHANICAL'\n\nConstant for logging context.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/rpc/default_server/index.html#the-default_serverpy-module","title":"The default_server.py module","text":"The default_server.py module\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/rpc/default_server/index.html#summary","title":"The default_server.py module > Summary","text":"Summary\n\nClasses\n\n\n\n\n\nDefaultServiceMethods\n\nDefault service methods for MechanicalEmbeddedServer.\n\nMechanicalDefaultServer\n\nDefault server with default service methods.\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/rpc/default_server/index.html#description","title":"The default_server.py module > Description","text":"Description\n\nRemote Procedure Call (RPC) server.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"getting_started/installation.html#installation-guide","title":"Installation guide","text":"Installation guide\n\nTo use PyMechanical, a licensed copy of Ansys Mechanical must be installed locally.\nThe installed version determines the available interface and features.\nPyMechanical is compatible with Mechanical 2024 R1 and later on Windows\nand Linux. If you face any issues while setting up or using PyMechanical,\nplease go though FAQs and known issues and limitations sections."},{"objectID":"Home","href":"getting_started/installation.html#install-the-package","title":"Installation guide > Install the package","text":"Install the package\n\nThe latest ansys.mechanical.core package supports Python 3.10 through\nPython 3.13 on Windows, Linux, and Mac.\n\nYou should consider installing PyMechanical in a virtual environment.\nFor more information, see Python’s\nvenv – Creation of virtual environments.\n\nInstall the latest package from PyPi with this command:"},{"objectID":"Home","href":"getting_started/installation.html#install-offline","title":"Installation guide > Install offline","text":"Install offline\n\nIf you want to install PyMechanical on a computer without access to the internet,\nyou can download a wheelhouse archive that corresponds to your\nmachine architecture from the Releases page\nof the PyMechanical repository.\n\nEach wheelhouse archive contains all the Python wheels necessary to install\nPyMechanical from scratch on Windows and Linux for Python 3.10 through Python 3.13. You can install\na wheelhouse archive on an isolated system with a fresh Python installation or on a\nvirtual environment.\n\nFor example, on Linux with Python 3.10, unzip the wheelhouse archive and install it with\nthis code:\n\nIf you are on Windows with Python 3.10, unzip the ansys-mechanical-core-v0.12.dev0-wheelhouse-Windows-3.10\nwheelhouse archive to a wheelhouse directory and then install it using pip as\nin the preceding example."},{"objectID":"Home","href":"getting_started/installation.html#verify-your-installation","title":"Installation guide > Verify your installation","text":"Verify your installation\n\nThe way that you verify your installation depends on whether you want to run\nMechanical using a remote session or an embedded instance.\nBefore running either, you must first verify that you can find\nthe installed version of Mechanical using the ansys.tools.path package.\nThis package is required to use PyMechanical.\n\nIf you install Ansys in a directory other than the default or typical location,\nyou can save this directory path using the\nsave_mechanical_path\nfunction. Then use\nget_mechanical_path\nand version_from_path functions to verify the path and version."},{"objectID":"Home","href":"getting_started/installation.html#verify-a-remote-session","title":"Installation guide > Verify a remote session","text":"Verify a remote session\n\nVerify your installation by starting a remote session of Mechanical from Python:\n\nIf you see a response from the server, you can begin using Mechanical\nas a service."},{"objectID":"Home","href":"getting_started/installation.html#verify-an-embedded-instance","title":"Installation guide > Verify an embedded instance","text":"Verify an embedded instance\n\nVerify your installation by loading an embedded instance of Mechanical in Python.\n\nIf you are running on Linux, you must set some environment variables for\nembedding of Mechanical in Python to work. A script that sets these variables is\nshipped with ansys-mechanical-env which is part of PyMechanical\n\nTo use the script, prepend it to any invocation of Python:\n\nInside of Python, use the following commands to load an embedded instance:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/license_manager/LicenseManager.html#licensemanager","title":"LicenseManager","text":"LicenseManager\n\n\n\nclass ansys.mechanical.core.embedding.license_manager.LicenseManager(app)\n\nClass to manage licenses in Ansys Mechanical.\n\nThis class provides methods to enable, disable, and check the status of licenses.\nIt also allows for moving licenses to specific indices in the license preference list.\nIt is initialized with an instance of the Ansys Mechanical application."},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/license_manager/LicenseManager.html#overview","title":"LicenseManager > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nget_all_licenses\n\nReturn list of all licenses.\n\nget_license_status\n\nReturn status of the specific license.\n\nset_license_status\n\nSet the status of a license and save the preference.\n\nshow\n\nPrint all active licenses.\n\ndisable_session_license\n\nDisable active license for current session.\n\nenable_session_license\n\nEnable license(s) for the current session.\n\nmove_to_index\n\nMove a license preference.\n\nreset_preference\n\nReset the license preference."},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/license_manager/LicenseManager.html#import-detail","title":"LicenseManager > Import detail","text":"Import detail\n\nfrom ansys.mechanical.core.embedding.license_manager import LicenseManager"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/license_manager/LicenseManager.html#method-detail","title":"LicenseManager > Method detail","text":"Method detail\n\n\n\nLicenseManager.get_all_licenses() -> list[str]\n\nReturn list of all licenses.\n\n\n\nLicenseManager.get_license_status(license_name: str) -> Ansys.Mechanical.DataModel.Enums.LicenseStatus\n\nReturn status of the specific license.\n\nParameters\n\nlicense_name\n\npython:str\n\nName of the license to check.\n\nReturns\n\n“Ansys.Mechanical.DataModel.Enums.LicenseStatus”\n\nThe status of the license.\n\n\n\nLicenseManager.set_license_status(license_name: str, status: bool) -> None\n\nSet the status of a license and save the preference.\n\nParameters\n\nlicense_name\n\npython:str\n\nName of the license to set the status for.\n\nstatus\n\nbool\n\nTrue to enable the license, False to disable it.\n\n\n\nLicenseManager.show() -> None\n\nPrint all active licenses.\n\n\n\nLicenseManager.disable_session_license() -> None\n\nDisable active license for current session.\n\n\n\nLicenseManager.enable_session_license(license: str | List[str] | None = None) -> None\n\nEnable license(s) for the current session.\n\nParameters\n\nlicense\n\nOptional[Union[python:str, List[python:str]]], optional\n\nIf None, activates the first enabled license in the priority order.\nIf a string, activates that specific license.\nIf a list of strings, activates all specified licenses in the order provided.\n\n\n\nLicenseManager.move_to_index(license_name: str, location: int) -> None\n\nMove a license preference.\n\nMove license to zero-based index location in the license preference list.\nThis is useful for setting the preferred license location.\n\nParameters\n\nlicense_name\n\npython:str\n\nLicense name.\n\nlocation\n\npython:int\n\nLocation to move the license to.\n\nExamples\n\nMove Ansys Mechanical Premium to the first location.\n\n>>> license_manager = LicenseManager(app)\n>>> license_manager.move_to_index('Ansys Mechanical Premium', 0)\n\n\n\nLicenseManager.reset_preference() -> None\n\nReset the license preference.\n\nThis method will reset the license location order and the status of all licenses\nto the default state.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/errors/MechanicalExitedError.html#mechanicalexitederror","title":"MechanicalExitedError","text":"MechanicalExitedError\n\n\n\nexception ansys.mechanical.core.errors.MechanicalExitedError(msg='Mechanical has exited.')\n\nBases: RuntimeError\n\nRaises an error when Mechanical has exited."},{"objectID":"Home","href":"api/ansys/mechanical/core/errors/MechanicalExitedError.html#import-detail","title":"MechanicalExitedError > Import detail","text":"Import detail\n\nfrom ansys.mechanical.core.errors import MechanicalExitedError\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"user_guide/howto/autocomplete.html#autocomplete","title":"Autocomplete","text":"Autocomplete\n\nThe ansys-mechanical-stubs package provides typehints for Mechanical scripting.\nThis package is automatically installed when you install PyMechanical from v0.11.9 and on."},{"objectID":"Home","href":"user_guide/howto/autocomplete.html#setting-up-autocomplete-in-vs-code","title":"Autocomplete > Setting up autocomplete in VS Code","text":"Setting up autocomplete in VS Code\n\nThe ansys-mechanical-ideconfig command prints the settings that are necessary for\nautocomplete to work with the ansys-mechanical-stubs dependency. This command takes in\nthree arguments: --ide vscode, --target user or --target workspace,\nand --revision <version>. If the revision is not provided, ansys-tools-path\nretrieves the Mechanical version from your system.\n\nUsage:\n\nTerminal output for Windows user’s settings.json file:\n\nPaste the output from the command into your VS Code settings.json file to activate autocomplete."},{"objectID":"Home","href":"user_guide/howto/autocomplete.html#limitations","title":"Autocomplete > Limitations","text":"Limitations\n\nAutocomplete is only supported in VS Code.\n\nMechanical scripting autocomplete is only available for phrases starting with Ansys.\n\nNot all Mechanical scripting APIs are currently supported. If some are missing that you need,\ncreate an issue here.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"user_guide/howto/logging.html#logging","title":"Logging","text":"Logging\n\nMechanical has a logging system that is useful when debugging issues. Normally, it is\nenabled by setting environment variables before starting Mechanical. With PyMechanical,\nit is possible to configure logging at any time, whether it is before or after creating\nthe embedded application, using the same Python API.\n\nUse the Configuration class to\nconfigure logging to the standard output for all warning messages and above (which are error and fatal messages).\nFor example:\n\nAfter the embedded application has been created, you can write messages to the same\nlog using the Logger class like this:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/examples/index.html#the-examples-package","title":"The examples package","text":"The examples package\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/examples/index.html#summary","title":"The examples package > Summary","text":"Summary\n\nSubmodules\n\n\n\n\n\ndownloads\n\nFunctions to download sample datasets from the PyAnsys data repository.\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/examples/index.html#description","title":"The examples package > Description","text":"Description\n\nInitialize the package level imports.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"user_guide/howto/overview.html#overview","title":"Overview","text":"Overview\n\nThe App class provides\na Mechanical instance:\n\nThe App class has access to the global scripting entry points that are\navailable from built-in Mechanical scripting:\n\nExtAPI: Application.ExtAPI\n\nDataModel: Application.DataModel\n\nModel: Application.DataModel.Project.Model\n\nTree: Application.DataModel.Tree\n\nGraphics: Application.ExtAPI.Graphics\n\nBesides scripting entry points, many other types and objects are available from\nbuilt-in Mechanical scripting. To learn how to import scripting entry points,\nnamespaces, and types, see ref_embedding_user_guide_globals."},{"objectID":"Home","href":"user_guide/howto/overview.html#running-pymechanical-embedding-scripts-inside-mechanical-with-ironpython","title":"Overview > Running PyMechanical embedding scripts inside Mechanical with IronPython","text":"Running PyMechanical embedding scripts inside Mechanical with IronPython\n\nIf your PyMechanical embedding script does not use any other third-party Python package, such as NumPy,\nit is possible to adapt it so that it can run inside of Mechanical with IronPython.\nThe scripting occurs inside Mechanical’s command line interface. For instance, consider the following PyMechanical code:\n\nThe above code can be written as a Python file, such as file.py with only the following content:\n\nBecause the file does not contain the PyMechanical import statements, you can run\nfile.py using the command line inside Mechanical.\n\nUsing command line interface (CLI)\n\nThis can be achieved on both the Windows and Linux platforms using\nansys-mechanical cli from the virtual environment where ansys-mechanical-core\nhas been installed. Activate the virtual environment and then use CLI to run the scripts.\nIf multiple Mechanical versions are installed in the same system,\nversions can be specified using -r flag. Use -h for more information.\n\nAlternately user can use the following commands in the command prompt of Windows and the terminal\nfor Linux systems.\n\nOn Windows\n\nPowerShell users can run the preceding command without including the opening and\nclosing quotation marks.\n\nOn Linux\n\nOn either Windows or Linux, add the command line argument -b to run the script in batch mode.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/logger/Logger.html#logger","title":"Logger","text":"Logger\n\n\n\nclass ansys.mechanical.core.embedding.logger.Logger\n\nProvides the Logger class for embedding."},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/logger/Logger.html#overview","title":"Logger > Overview","text":"Overview\n\nConstructors\n\n\n\n\n\nflush\n\nFlush the log.\n\ncan_log_message\n\nGet whether a message at this level is logged.\n\ndebug\n\nWrite a debug message to the log.\n\nerror\n\nWrite a error message to the log.\n\ninfo\n\nWrite an info message to the log.\n\nwarning\n\nWrite a warning message to the log.\n\nfatal\n\nWrite a fatal message to the log."},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/logger/Logger.html#import-detail","title":"Logger > Import detail","text":"Import detail\n\nfrom ansys.mechanical.core.embedding.logger import Logger"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/logger/Logger.html#method-detail","title":"Logger > Method detail","text":"Method detail\n\n\n\nclassmethod Logger.flush()\n\nFlush the log.\n\n\n\nclassmethod Logger.can_log_message(level: int) -> bool\n\nGet whether a message at this level is logged.\n\n\n\nclassmethod Logger.debug(msg: str)\n\nWrite a debug message to the log.\n\n\n\nclassmethod Logger.error(msg: str)\n\nWrite a error message to the log.\n\n\n\nclassmethod Logger.info(msg: str)\n\nWrite an info message to the log.\n\n\n\nclassmethod Logger.warning(msg: str)\n\nWrite a warning message to the log.\n\n\n\nclassmethod Logger.fatal(msg: str)\n\nWrite a fatal message to the log.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/appdata/UniqueUserProfile.html#uniqueuserprofile","title":"UniqueUserProfile","text":"UniqueUserProfile\n\n\n\nclass ansys.mechanical.core.embedding.appdata.UniqueUserProfile(profile_name: str, copy_profile: bool = True, dry_run: bool = False)\n\nCreate Unique User Profile (for AppData)."},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/appdata/UniqueUserProfile.html#overview","title":"UniqueUserProfile > Overview","text":"Overview\n\nMethods\n\n\n\n\n\ninitialize\n\nInitialize the new profile location.\n\ncleanup\n\nCleanup unique user profile.\n\nupdate_environment\n\nSet environment variables for new user profile.\n\nexists\n\nCheck if unique profile name already exists.\n\nmkdirs\n\nCreate a unique user profile & set up the directory tree.\n\ncopy_profiles\n\nCopy current user directories into a new user profile.\n\nProperties\n\n\n\n\n\nlocation\n\nReturn the profile name.\n\nAttributes\n\n\n\n\n\ncopy_profile\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/appdata/UniqueUserProfile.html#import-detail","title":"UniqueUserProfile > Import detail","text":"Import detail\n\nfrom ansys.mechanical.core.embedding.appdata import UniqueUserProfile"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/appdata/UniqueUserProfile.html#property-detail","title":"UniqueUserProfile > Property detail","text":"Property detail\n\n\n\nproperty UniqueUserProfile.location: str\n\nReturn the profile name."},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/appdata/UniqueUserProfile.html#attribute-detail","title":"UniqueUserProfile > Attribute detail","text":"Attribute detail\n\n\n\nUniqueUserProfile.copy_profile = True\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/appdata/UniqueUserProfile.html#method-detail","title":"UniqueUserProfile > Method detail","text":"Method detail\n\n\n\nUniqueUserProfile.initialize() -> None\n\nInitialize the new profile location.\n\nArgs:\n\ncopy_profile (bool): If False, the copy_profile method will be skipped.\n\n\n\nUniqueUserProfile.cleanup() -> None\n\nCleanup unique user profile.\n\n\n\nUniqueUserProfile.update_environment(env) -> None\n\nSet environment variables for new user profile.\n\n\n\nUniqueUserProfile.exists() -> bool\n\nCheck if unique profile name already exists.\n\n\n\nUniqueUserProfile.mkdirs() -> None\n\nCreate a unique user profile & set up the directory tree.\n\n\n\nUniqueUserProfile.copy_profiles() -> None\n\nCopy current user directories into a new user profile.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.tools.path.change_default_mechanical_path.html#change_default_mechanical_path","title":"change_default_mechanical_path","text":"change_default_mechanical_path\n\n\n\nansys.tools.path.change_default_mechanical_path(exe_loc)\n\nChange your default Mechanical path.\n\nParameters\n\nexe_loc\n\npython:str\n\nFull path for the Mechanical executable file to use.\n\nReturn type\n\nNone\n\nExamples\n\nOn Windows:\n\n>>> from ansys.tools.path import change_default_mechanical_path, get_mechanical_path\n>>> change_default_mechanical_path('C:/Program Files/ANSYS Inc/v251/aisol/bin/win64/AnsysWBU.exe')\n>>> get_mechanical_path()\n'C:/Program Files/ANSYS Inc/v251/aisol/bin/win64/AnsysWBU.exe'\n\nOn Linux:\n\n>>> from ansys.tools.path import change_default_mechanical_path, get_mechanical_path\n>>> change_default_mechanical_path('/ansys_inc/v251/aisol/.workbench')\n>>> get_mechanical_path()\n'/ansys_inc/v251/aisol/.workbench'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/rpc/server/MechanicalEmbeddedServer.html#mechanicalembeddedserver","title":"MechanicalEmbeddedServer","text":"MechanicalEmbeddedServer\n\n\n\nclass ansys.mechanical.core.embedding.rpc.server.MechanicalEmbeddedServer(port: int = None, version: int = None, methods: List[Callable] = [], impl: List = [])\n\nStart rpc server."},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/rpc/server/MechanicalEmbeddedServer.html#overview","title":"MechanicalEmbeddedServer > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nstart\n\nStart server on specified port.\n\nstop\n\nStop the server."},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/rpc/server/MechanicalEmbeddedServer.html#import-detail","title":"MechanicalEmbeddedServer > Import detail","text":"Import detail\n\nfrom ansys.mechanical.core.embedding.rpc.server import MechanicalEmbeddedServer"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/rpc/server/MechanicalEmbeddedServer.html#method-detail","title":"MechanicalEmbeddedServer > Method detail","text":"Method detail\n\n\n\nMechanicalEmbeddedServer.start() -> None\n\nStart server on specified port.\n\n\n\nMechanicalEmbeddedServer.stop() -> None\n\nStop the server.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/index.html#the-embedding-package","title":"The embedding package","text":"The embedding package\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/index.html#summary","title":"The embedding package > Summary","text":"Summary\n\nSubpackages\n\n\n\n\n\ngraphics\n\nNamespace module for embedding visualization.\n\nlogger\n\nEmbedding logger.\n\nrpc\n\nRPC and Mechanical service implementation.\n\nSubmodules\n\n\n\n\n\naddins\n\nConfiguration system for embedded mechanical.\n\napp\n\nMain application class for embedded Mechanical.\n\napp_libraries\n\nSystem to add python libraries shipped with mechanical to the path.\n\nappdata\n\nTemporary Appdata for Ansys Mechanical.\n\nbackground\n\nClass for running Mechanical on a background thread.\n\ncleanup_gui\n\nClean up temporary mechdb files after GUI is closed.\n\nenum_importer\n\nLibrary to import Mechanical enums.\n\nfind_mechanical\n\nCli for finding mechanical installation.\n\nglobal_importer\n\nImport Mechanical globals.\n\nimports\n\nAdditional imports for embedded Mechanical.\n\ninitializer\n\nInitializer for Mechanical embedding. Sets up paths and resolvers.\n\nlicense_manager\n\nLicense Manager.\n\nloader\n\nclr_loader for pymechanical embedding. This loads the CLR on both windows and linux.\n\nmechanical_warnings\n\nHook to register obsolete warnings.\n\nmessages\n\nMessage Manager for App.\n\nposter\n\nUse the Poster class to post functions to Mechanical’s main thread.\n\nresolver\n\nThis is the .NET assembly resolving for embedding Ansys Mechanical.\n\nruntime\n\nRuntime initialize for pythonnet in embedding.\n\nshims\n\nShims for embedded Mechanical.\n\ntransaction\n\nA class to speed up bulk user interactions using Ansys ACT Mechanical Transaction.\n\nui\n\nRun Mechanical UI from Python.\n\nutils\n\nMiscellaneous utilities.\n\n\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/index.html#description","title":"The embedding package > Description","text":"Description\n\nImports for the embedding sub-package.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"user_guide/cli/mechanical-env.html#mechanical-env","title":"mechanical-env","text":"mechanical-env\n\nThe mechanical-env command-line tool configures the environment for Ansys Mechanical\nand runs a specified command within that environment. It simplifies setting up environment\nvariables for automation, scripting, or launching custom tools.\n\nThis CLI is intended for Linux systems only."},{"objectID":"Home","href":"user_guide/cli/mechanical-env.html#usage","title":"mechanical-env > Usage","text":"Usage"},{"objectID":"Home","href":"user_guide/cli/mechanical-env.html#arguments","title":"mechanical-env > Arguments","text":"Arguments\n\n-r, --version <version>\n\nSpecify the version of Ansys Mechanical to use. Example: 251 or 252.\n\n-p, --path <path>\n\nSpecify the installation path of Ansys Mechanical if not using the default path.\n\nCOMMAND\n\nThe command to execute once the environment is prepared. This could be\npython, or a script such as python my_script.py."},{"objectID":"Home","href":"user_guide/cli/mechanical-env.html#examples","title":"mechanical-env > Examples","text":"Examples\n\nRun Python with a specific version:\n\nRun Python with a custom installation path:\n\nRun a Python script using a specific version:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/logging/index.html#the-loggingpy-module","title":"The logging.py module","text":"The logging.py module\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/logging/index.html#summary","title":"The logging.py module > Summary","text":"Summary\n\nClasses\n\n\n\n\n\nPyMechanicalCustomAdapter\n\nKeeps the reference to the name of the Mechanical instance dynamic.\n\nPyMechanicalPercentStyle\n\nControls the way PyMechanical formats the percent style.\n\nPyMechanicalFormatter\n\nProvides for overwriting default format styles with custom format styles.\n\nInstanceFilter\n\nEnsures that the instance name record always exists.\n\nLogger\n\nProvides for adding handlers to the logger for each Mechanical session.\n\nFunctions\n\n\n\n\n\naddfile_handler\n\nAdd a file handler to the input.\n\nadd_stdout_handler\n\nAdd a file handler to the stand output handler.\n\nAttributes\n\n\n\n\n\nstring_to_loglevel\n\n\n\nConstants\n\n\n\n\n\nLOG_LEVEL\n\nDefault log level configuration.\n\nFILE_NAME\n\nDefault file name.\n\nDEBUG\n\nConstant for logging.DEBUG.\n\nINFO\n\nConstant for logging.INFO.\n\nWARN\n\nConstant for logging.WARN.\n\nERROR\n\nConstant for logging.ERROR.\n\nCRITICAL\n\nConstant for logging.CRITICAL.\n\nSTDOUT_MSG_FORMAT\n\nStandard output message format.\n\nFILE_MSG_FORMAT\n\nFile message format.\n\nDEFAULT_STDOUT_HEADER\n\nDefault standard output header.\n\nDEFAULT_FILE_HEADER\n\nDefault file header.\n\nNEW_SESSION_HEADER\n\nDefault new session header containing date and time.\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/logging/index.html#description","title":"The logging.py module > Description","text":"Description\n\nLogging module.\n\nThis module supplies the general framework for logging in PyMechanical. This module is\nbuilt upon the logging package.\nThe intent is not for this module to replace the logging package but rather to provide\na way for the logging package and PyMechancial to interact.\n\nThe loggers used in the module include the name of the instance, which\nis intended to be unique.  This name is printed in all the active\noutputs and is used to track the different Mechanical instances."},{"objectID":"Home","href":"api/ansys/mechanical/core/logging/index.html#usage","title":"The logging.py module > Usage","text":"Usage"},{"objectID":"Home","href":"api/ansys/mechanical/core/logging/index.html#global-logger","title":"The logging.py module > Global logger","text":"Global logger\n\nThere is a global logger named pymechanical_global, which is created at\nansys.mechanical.core.__init__.  If you want to use this global logger,\nyou must call it at the top of your module:\n\nYou can rename this logger to avoid conflicts with other loggers (if any):\n\nThe default logging level of LOG is ERROR. To change this and output\nlower-level messages, you can use this code:\n\nAlternatively, you can use this code:\n\nThis alternative code ensures that all the handlers are set to the\ninput log level.\n\nBy default, this logger does not log to a file. If you want,\nyou can add a file handler:\n\nThe preceding code sets the logger to also be redirected to this file. If you\nwant to change the characteristics of this global logger from the beginning\nof the execution, you must edit the file __init__ in the\nansys.mechanical.core directory.\n\nTo log using this logger, call the desired method as a normal logger:"},{"objectID":"Home","href":"api/ansys/mechanical/core/logging/index.html#instance-logger","title":"The logging.py module > Instance Logger","text":"Instance Logger\n\nEvery time an instance of the Mechanical\nckass is created, a logger is created and stored here:\n\nLOG._instances. This field is a dict where the key is the name of the\ncreated logger.\n\nThese logger instances inherit the pymechanical_global output handlers and\nlogging level unless otherwise specified. The way this logger works is very\nsimilar to the global logger. You can add a file handler if you want using the\nlog_to_file() method or change\nthe log level using the logger.Logging.setLevel() method.\n\nYou can use this logger like this:"},{"objectID":"Home","href":"api/ansys/mechanical/core/logging/index.html#other-loggers","title":"The logging.py module > Other loggers","text":"Other loggers\n\nYou can create your own loggers using the Python logging package as\nyou would do in any other script. There are no conflicts between these loggers."},{"objectID":"Home","href":"api/ansys/mechanical/core/logging/index.html#module-detail","title":"The logging.py module > Module detail","text":"Module detail\n\n\n\nlogging.addfile_handler(logger, filename=FILE_NAME, level=LOG_LEVEL, write_headers=False)\n\nAdd a file handler to the input.\n\nParameters\n\nlogger\n\nlogging.Logger or logging.Logger\n\nLogger to add the file handler to.\n\nfilename\n\npython:str, optional\n\nName of the output file. The default is FILE_NAME.\n\nlevel\n\npython:str, optional\n\nLevel of logging. The default is None. Options are \"DEBUG\", \"INFO\",\n\"WARNING\" and \"ERROR\".\n\nwrite_headers\n\nbool, optional\n\nWhether to write headers to the file. The default is False.\n\nReturns\n\nlogger\n\nLogger object.\n\n\n\nlogging.add_stdout_handler(logger, level=LOG_LEVEL, write_headers=False)\n\nAdd a file handler to the stand output handler.\n\nParameters\n\nlogger\n\nlogging.Logger or logging.Logger\n\nLogger to add the file handler to.\n\nlevel\n\npython:str, optional\n\nLevel of logging. The default is None. Options are \"DEBUG\", \"INFO\",\n\"WARNING\" and \"ERROR\".\n\nwrite_headers\n\nbool, optional\n\nWhether to write headers to the file. The default is False.\n\nReturns\n\nlogger\n\nLogger object.\n\n\n\nlogging.LOG_LEVEL = 10\n\nDefault log level configuration.\n\n\n\nlogging.FILE_NAME = 'pymechanical.log'\n\nDefault file name.\n\n\n\nlogging.DEBUG = 10\n\nConstant for logging.DEBUG.\n\n\n\nlogging.INFO = 20\n\nConstant for logging.INFO.\n\n\n\nlogging.WARN = 30\n\nConstant for logging.WARN.\n\n\n\nlogging.ERROR = 40\n\nConstant for logging.ERROR.\n\n\n\nlogging.CRITICAL = 50\n\nConstant for logging.CRITICAL.\n\n\n\nlogging.STDOUT_MSG_FORMAT = '%(levelname)s - %(instance_name)s -  %(module)s - %(funcName)s - %(message)s'\n\nStandard output message format.\n\n\n\nlogging.FILE_MSG_FORMAT = '%(levelname)s - %(instance_name)s -  %(module)s - %(funcName)s - %(message)s'\n\nFile message format.\n\n\n\nlogging.DEFAULT_STDOUT_HEADER = Multiline-String\n\nDefault standard output header.\n\n\n\nlogging.DEFAULT_FILE_HEADER = Multiline-String\n\nDefault file header.\n\n\n\nlogging.NEW_SESSION_HEADER = Multiline-String\n\nDefault new session header containing date and time.\n\n\n\nlogging.string_to_loglevel\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/poster/Poster.html#poster","title":"Poster","text":"Poster\n\n\n\nclass ansys.mechanical.core.embedding.poster.Poster\n\nClass which can post a python callable function to Mechanical’s main thread."},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/poster/Poster.html#overview","title":"Poster > Overview","text":"Overview\n\nMethods\n\n\n\n\n\ntry_post\n\nPost the callable to Mechanical’s main thread.\n\npost\n\nPost the callable to Mechanical’s main thread."},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/poster/Poster.html#import-detail","title":"Poster > Import detail","text":"Import detail\n\nfrom ansys.mechanical.core.embedding.poster import Poster"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/poster/Poster.html#method-detail","title":"Poster > Method detail","text":"Method detail\n\n\n\nPoster.try_post(callable: Callable) -> Any\n\nPost the callable to Mechanical’s main thread.\n\nThis does the same thing as post but if callable\nraises an exception, try_post will raise the same\nexception to the caller of try_post.\n\n\n\nPoster.post(callable: Callable) -> Any\n\nPost the callable to Mechanical’s main thread.\n\nThe main thread needs to be receiving posted messages\nin order for this to work from a background thread. Use\nthe sleep routine from the utils module to make\nMechanical available to receive messages.\n\nReturns the result of callable if any.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/errors/MechanicalRuntimeError.html#mechanicalruntimeerror","title":"MechanicalRuntimeError","text":"MechanicalRuntimeError\n\n\n\nexception ansys.mechanical.core.errors.MechanicalRuntimeError\n\nBases: RuntimeError\n\nRaises an error when Mechanical passes a runtime error."},{"objectID":"Home","href":"api/ansys/mechanical/core/errors/MechanicalRuntimeError.html#import-detail","title":"MechanicalRuntimeError > Import detail","text":"Import detail\n\nfrom ansys.mechanical.core.errors import MechanicalRuntimeError\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"getting_started/index.html#getting-started","title":"Getting started","text":"Getting started\n\nPyMechanical is part of the broader PyAnsys initiative,\nenabling the use of Ansys technologies directly from Python.\nIt allows users to integrate the Mechanical multiphysics solver\ninto custom applications via ansys-mechanical-core, which provides a Python-friendly\ninterface to drive the software that facilitates the use of\nMechanical Scripting commands.\n\nInstallation guide\n\nInstructions to install and verify PyMechanical.\n\ninstallation\n\nLaunching PyMechanical\n\nSteps to run PyMechanical.\n\nrunning_mechanical\n\nDocker setup\n\nHow to run Mechanical Docker containers.\n\ndocker\n\nWindows Subsystem for Linux (WSL)\n\nInstalling PyMechanical on Linux via WSL.\n\nwsl"},{"objectID":"Home","href":"getting_started/index.html#background","title":"Getting started > Background","text":"Background\n\nPyMechanical contains two interfaces: a remote session and an embedded instance.\nFor information on the application architecture of Mechanical and why there are\ntwo Python interfaces, see ref_architecture.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/runtime/index.html#the-runtimepy-module","title":"The runtime.py module","text":"The runtime.py module\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/runtime/index.html#summary","title":"The runtime.py module > Summary","text":"Summary\n\nFunctions\n\n\n\n\n\ninitialize\n\nInitialize the runtime."},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/runtime/index.html#description","title":"The runtime.py module > Description","text":"Description\n\nRuntime initialize for pythonnet in embedding."},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/runtime/index.html#module-detail","title":"The runtime.py module > Module detail","text":"Module detail\n\n\n\nruntime.initialize(version: int, pep8_aliases: bool = False) -> None\n\nInitialize the runtime.\n\nPythonnet is already initialized but we need to\ndo some special codec handling to make sure the\ninterop works well for Mechanical. These are\nneed to handle (among other things) list and other\ncontainer conversions between C# and python\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/rpc/server/MechanicalService.html#mechanicalservice","title":"MechanicalService","text":"MechanicalService\n\n\n\nclass ansys.mechanical.core.embedding.rpc.server.MechanicalService(backend, functions=[], impl=[])\n\nBases: rpyc.Service\n\nStarts Mechanical app services."},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/rpc/server/MechanicalService.html#overview","title":"MechanicalService > Overview","text":"Overview\n\nMethods\n\n\n\n\n\non_connect\n\nHandle client connection.\n\non_disconnect\n\nHandle client disconnection.\n\nexposed_service_upload\n\nHandle file upload request from client.\n\nexposed_service_download\n\nHandle file download request from client.\n\nexposed_service_exit\n\nExit the server."},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/rpc/server/MechanicalService.html#import-detail","title":"MechanicalService > Import detail","text":"Import detail\n\nfrom ansys.mechanical.core.embedding.rpc.server import MechanicalService"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/rpc/server/MechanicalService.html#method-detail","title":"MechanicalService > Method detail","text":"Method detail\n\n\n\nMechanicalService.on_connect(conn)\n\nHandle client connection.\n\n\n\nMechanicalService.on_disconnect(conn)\n\nHandle client disconnection.\n\n\n\nMechanicalService.exposed_service_upload(remote_path, file_data)\n\nHandle file upload request from client.\n\n\n\nMechanicalService.exposed_service_download(remote_path)\n\nHandle file download request from client.\n\n\n\nMechanicalService.exposed_service_exit()\n\nExit the server.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/graphics/embedding_plotter/MeshOrientedTransformResizeStyle.html#meshorientedtransformresizestyle","title":"MeshOrientedTransformResizeStyle","text":"MeshOrientedTransformResizeStyle\n\n\n\nclass ansys.mechanical.core.embedding.graphics.embedding_plotter.MeshOrientedTransformResizeStyle(*args, **kwds)\n\nBases: enum.Enum\n\nDynamic resize style flag for mesh oriented transform nodes."},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/graphics/embedding_plotter/MeshOrientedTransformResizeStyle.html#overview","title":"MeshOrientedTransformResizeStyle > Overview","text":"Overview\n\nAttributes\n\n\n\n\n\nNONE\n\n\n\nSCALING\n\n\n\nSTRETCHING\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/graphics/embedding_plotter/MeshOrientedTransformResizeStyle.html#import-detail","title":"MeshOrientedTransformResizeStyle > Import detail","text":"Import detail\n\nfrom ansys.mechanical.core.embedding.graphics.embedding_plotter import MeshOrientedTransformResizeStyle"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/graphics/embedding_plotter/MeshOrientedTransformResizeStyle.html#attribute-detail","title":"MeshOrientedTransformResizeStyle > Attribute detail","text":"Attribute detail\n\n\n\nMeshOrientedTransformResizeStyle.NONE = 0\n\n\n\n\n\nMeshOrientedTransformResizeStyle.SCALING = 1\n\n\n\n\n\nMeshOrientedTransformResizeStyle.STRETCHING = 2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/logging/PyMechanicalCustomAdapter.html#pymechanicalcustomadapter","title":"PyMechanicalCustomAdapter","text":"PyMechanicalCustomAdapter\n\n\n\nclass ansys.mechanical.core.logging.PyMechanicalCustomAdapter(logger, extra=None)\n\nBases: logging.LoggerAdapter\n\nKeeps the reference to the name of the Mechanical instance dynamic.\n\nThe standard approach supplies extra input to the logger. If this approach\nwas used, Mechanical instances would have to be inputted every time a log\nis created.\n\nUsing an adapter means that the reference to the Mechanical instance must only\nbe specified once."},{"objectID":"Home","href":"api/ansys/mechanical/core/logging/PyMechanicalCustomAdapter.html#overview","title":"PyMechanicalCustomAdapter > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nprocess\n\nProcess the message.\n\nlog_to_file\n\nAdd a file handler to the logger.\n\nlog_to_stdout\n\nAdd a standard output handler to the logger.\n\nsetLevel\n\nChange the log level of the object and the attached handlers.\n\nAttributes\n\n\n\n\n\nlevel\n\n\n\nfile_handler\n\n\n\nstdout_handler\n\n\n\nlogger\n\n\n\nstd_out_handler\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/logging/PyMechanicalCustomAdapter.html#import-detail","title":"PyMechanicalCustomAdapter > Import detail","text":"Import detail\n\nfrom ansys.mechanical.core.logging import PyMechanicalCustomAdapter"},{"objectID":"Home","href":"api/ansys/mechanical/core/logging/PyMechanicalCustomAdapter.html#attribute-detail","title":"PyMechanicalCustomAdapter > Attribute detail","text":"Attribute detail\n\n\n\nPyMechanicalCustomAdapter.level = None\n\n\n\n\n\nPyMechanicalCustomAdapter.file_handler = None\n\n\n\n\n\nPyMechanicalCustomAdapter.stdout_handler = None\n\n\n\n\n\nPyMechanicalCustomAdapter.logger\n\n\n\n\n\nPyMechanicalCustomAdapter.std_out_handler\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/logging/PyMechanicalCustomAdapter.html#method-detail","title":"PyMechanicalCustomAdapter > Method detail","text":"Method detail\n\n\n\nPyMechanicalCustomAdapter.process(msg, kwargs)\n\nProcess the message.\n\n\n\nPyMechanicalCustomAdapter.log_to_file(filename=FILE_NAME, level=LOG_LEVEL)\n\nAdd a file handler to the logger.\n\nParameters\n\nfilename\n\npython:str, optional\n\nName of the file where logs are recorded. The default is FILE_NAME.\n\nlevel\n\npython:str, optional\n\nLevel of logging. The default is None, in which case the \"DEBUG\"\nlevel is used. Options are \"DEBUG\", \"INFO\", \"WARNING\",\nand \"ERROR\".\n\n\n\nPyMechanicalCustomAdapter.log_to_stdout(level=LOG_LEVEL)\n\nAdd a standard output handler to the logger.\n\nParameters\n\nlevel\n\npython:str, optional\n\nLevel of logging. The default is None, in which case the \"DEBUG\"\nlevel is used. Options are \"DEBUG\", \"INFO\", \"WARNING\",\nand \"ERROR\".\n\n\n\nPyMechanicalCustomAdapter.setLevel(level='DEBUG')\n\nChange the log level of the object and the attached handlers.\n\nParameters\n\nlevel\n\npython:str, optional\n\nLevel of logging. The default is \"DEBUG\". Options are \"DEBUG\",\n\"INFO\", \"WARNING\", and \"ERROR\".\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/rpc/server/BackgroundAppBackend.html#backgroundappbackend","title":"BackgroundAppBackend","text":"BackgroundAppBackend\n\n\n\nclass ansys.mechanical.core.embedding.rpc.server.BackgroundAppBackend(backgroundapp: ansys.mechanical.core.embedding.background.BackgroundApp)\n\nBackend for the python server where mechanical uses the background thread."},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/rpc/server/BackgroundAppBackend.html#overview","title":"BackgroundAppBackend > Overview","text":"Overview\n\nMethods\n\n\n\n\n\ntry_post\n\nTry to post to mechanical’s main thread.\n\nget_app\n\nGet the app object."},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/rpc/server/BackgroundAppBackend.html#import-detail","title":"BackgroundAppBackend > Import detail","text":"Import detail\n\nfrom ansys.mechanical.core.embedding.rpc.server import BackgroundAppBackend"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/rpc/server/BackgroundAppBackend.html#method-detail","title":"BackgroundAppBackend > Method detail","text":"Method detail\n\n\n\nBackgroundAppBackend.try_post(callable: Callable) -> Any\n\nTry to post to mechanical’s main thread.\n\n\n\nBackgroundAppBackend.get_app() -> ansys.mechanical.core.embedding.app.App\n\nGet the app object.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/graphics/utils/index.html#the-utilspy-module","title":"The utils.py module","text":"The utils.py module\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/graphics/utils/index.html#summary","title":"The utils.py module > Summary","text":"Summary\n\nFunctions\n\n\n\n\n\nbgr_to_rgb_tuple\n\nConvert bgr integer to rgb tuple.\n\nget_line_nodes_and_coords\n\nExtract the nodes and coordinates from the LineTessellationNode.\n\nget_tri_nodes_and_coords\n\nExtract the nodes and coordinates from the TriTessellationNode.\n\nget_tri_result_disp_and_results\n\nExtract the defomation and results from the TriTessellationResultNode.\n\nget_scene\n\nGet the scene of the model.\n\nget_scene_for_object\n\nGet the scene for the given object."},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/graphics/utils/index.html#description","title":"The utils.py module > Description","text":"Description\n\nCommon plotting utilities."},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/graphics/utils/index.html#module-detail","title":"The utils.py module > Module detail","text":"Module detail\n\n\n\nutils.bgr_to_rgb_tuple(bgr_int: int) -> Tuple[int, int, int]\n\nConvert bgr integer to rgb tuple.\n\n\n\nutils.get_line_nodes_and_coords(line_tessellation: Ansys.Mechanical.Scenegraph.LineTessellationNode)\n\nExtract the nodes and coordinates from the LineTessellationNode.\n\nThe TriTessellationNode contains “Coordinates” and “Indices”\nthat are flat arrays. This function converts them to numpy arrays\n\n\n\nutils.get_tri_nodes_and_coords(tri_tessellation: Ansys.Mechanical.Scenegraph.TriTessellationNode)\n\nExtract the nodes and coordinates from the TriTessellationNode.\n\nThe TriTessellationNode contains “Coordinates” and “Indices”\nthat are flat arrays. This function converts them to numpy arrays of the appropriate shape.\n\n\n\nutils.get_tri_result_disp_and_results(tri_tessellation: Ansys.Mechanical.Scenegraph.TriTessellationResultNode)\n\nExtract the defomation and results from the TriTessellationResultNode.\n\nThe TriTessellationResultNode contains “Displacements” and “Results”\nthat are flat arrays. This function converts them to numpy arrays of the appropriate shape.\n\n\n\nutils.get_scene(app: ansys.mechanical.core.embedding.App) -> Ansys.Mechanical.Scenegraph.GroupNode\n\nGet the scene of the model.\n\n\n\nutils.get_scene_for_object(app: ansys.mechanical.core.embedding.App, obj) -> Ansys.Mechanical.Scenegraph.Node\n\nGet the scene for the given object.\n\n2025R2 and before: only geometry is supported\nlater, Mesh and some Results will be supported.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/logging/PyMechanicalFormatter.html#pymechanicalformatter","title":"PyMechanicalFormatter","text":"PyMechanicalFormatter\n\n\n\nclass ansys.mechanical.core.logging.PyMechanicalFormatter(fmt=STDOUT_MSG_FORMAT, datefmt=None, style='%', validate=True, defaults=None)\n\nBases: logging.Formatter\n\nProvides for overwriting default format styles with custom format styles.\n\nParameters\n\nfmt\n\noptional\n\nThe default is STDOUT_MSG_FORMAT.\n\ndatefmt\n\noptional\n\nThe default is None.\n\nstyle\n\noptional\n\nThe default is %.\n\nvalidate\n\nbool, optional\n\nThe default is None."},{"objectID":"Home","href":"api/ansys/mechanical/core/logging/PyMechanicalFormatter.html#import-detail","title":"PyMechanicalFormatter > Import detail","text":"Import detail\n\nfrom ansys.mechanical.core.logging import PyMechanicalFormatter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/rpc/client/Client.html#client","title":"Client","text":"Client\n\n\n\nclass ansys.mechanical.core.embedding.rpc.client.Client(host: str, port: int, timeout: float = 120.0, cleanup_on_exit=True, process=None)\n\nClient for connecting to Mechanical services."},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/rpc/client/Client.html#overview","title":"Client > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nclose\n\nClose the connection.\n\nupload\n\nUpload a file to the server.\n\ndownload\n\nDownload a file from the server.\n\ndownload_project\n\nDownload all project files in the working directory of the Mechanical instance.\n\nexit\n\nShuts down the Mechanical instance.\n\nProperties\n\n\n\n\n\nbackend\n\nGet the backend type.\n\nis_alive\n\nCheck if the Mechanical instance is alive.\n\nAttributes\n\n\n\n\n\nhost\n\n\n\nport\n\n\n\ntimeout\n\n\n\nconnection\n\n\n\nroot\n\n\n\nSpecial methods\n\n\n\n\n\n__getattr__\n\nGet attribute from the root object.\n\n__del__\n\nClean up on exit."},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/rpc/client/Client.html#import-detail","title":"Client > Import detail","text":"Import detail\n\nfrom ansys.mechanical.core.embedding.rpc.client import Client"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/rpc/client/Client.html#property-detail","title":"Client > Property detail","text":"Property detail\n\n\n\nproperty Client.backend: str\n\nGet the backend type.\n\n\n\nproperty Client.is_alive\n\nCheck if the Mechanical instance is alive."},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/rpc/client/Client.html#attribute-detail","title":"Client > Attribute detail","text":"Attribute detail\n\n\n\nClient.host\n\n\n\n\n\nClient.port\n\n\n\n\n\nClient.timeout = 120.0\n\n\n\n\n\nClient.connection = None\n\n\n\n\n\nClient.root = None\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/rpc/client/Client.html#method-detail","title":"Client > Method detail","text":"Method detail\n\n\n\nClient.__getattr__(attr)\n\nGet attribute from the root object.\n\n\n\nClient.close()\n\nClose the connection.\n\n\n\nClient.upload(file_name, file_location_destination=None, chunk_size=DEFAULT_CHUNK_SIZE, progress_bar=False)\n\nUpload a file to the server.\n\n\n\nClient.download(files, target_dir=None, chunk_size=DEFAULT_CHUNK_SIZE, progress_bar=None, recursive=False)\n\nDownload a file from the server.\n\n\n\nClient.download_project(extensions=None, target_dir=None, progress_bar=False)\n\nDownload all project files in the working directory of the Mechanical instance.\n\n\n\nClient.exit()\n\nShuts down the Mechanical instance.\n\n\n\nClient.__del__()\n\nClean up on exit.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/graphics/embedding_plotter/ScenegraphNodeVisitor.html#scenegraphnodevisitor","title":"ScenegraphNodeVisitor","text":"ScenegraphNodeVisitor\n\n\n\nclass ansys.mechanical.core.embedding.graphics.embedding_plotter.ScenegraphNodeVisitor(app, plot_settings: PlotSettings)\n\nClass to visit the Mechanical scenegraph nodes."},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/graphics/embedding_plotter/ScenegraphNodeVisitor.html#overview","title":"ScenegraphNodeVisitor > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nvisit_node\n\nVisit an arbitrary node."},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/graphics/embedding_plotter/ScenegraphNodeVisitor.html#import-detail","title":"ScenegraphNodeVisitor > Import detail","text":"Import detail\n\nfrom ansys.mechanical.core.embedding.graphics.embedding_plotter import ScenegraphNodeVisitor"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/graphics/embedding_plotter/ScenegraphNodeVisitor.html#method-detail","title":"ScenegraphNodeVisitor > Method detail","text":"Method detail\n\n\n\nScenegraphNodeVisitor.visit_node(node: Ansys.Mechanical.Scenegraph.Node) -> Plottable\n\nVisit an arbitrary node.\n\nReturn a plottable object of that node.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/cleanup_gui/index.html#the-cleanup_guipy-module","title":"The cleanup_gui.py module","text":"The cleanup_gui.py module\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/cleanup_gui/index.html#summary","title":"The cleanup_gui.py module > Summary","text":"Summary\n\nFunctions\n\n\n\n\n\ncleanup_gui\n\nRemove the temporary mechdb file after it is closed.\n\nAttributes\n\n\n\n\n\npid\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/cleanup_gui/index.html#description","title":"The cleanup_gui.py module > Description","text":"Description\n\nClean up temporary mechdb files after GUI is closed."},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/cleanup_gui/index.html#module-detail","title":"The cleanup_gui.py module > Module detail","text":"Module detail\n\n\n\ncleanup_gui.cleanup_gui(pid, temp_mechdb) -> None\n\nRemove the temporary mechdb file after it is closed.\n\nParameters\n\npid: int\n\nThe process ID of the open temporary mechdb file.\n\ntemp_mechdb: Path\n\nThe path of the temporary mechdb file.\n\n\n\ncleanup_gui.pid\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/sg_execution_times.html#computation-times","title":"Computation times","text":"Computation times\n\n05:32.429 total execution time for 8 files from examples/gallery_examples/01_basic:\n\n\n\n\n\n\n\nExample\n\nTime\n\nMem (MB)\n\nsphx_glr_examples_gallery_examples_01_basic_bolt_pretension.py (bolt_pretension.py)\n\n01:56.938\n\n0.0\n\nsphx_glr_examples_gallery_examples_01_basic_modal_acoustics_analysis.py (modal_acoustics_analysis.py)\n\n00:47.977\n\n0.0\n\nsphx_glr_examples_gallery_examples_01_basic_fracture_analysis_contact_debonding.py (fracture_analysis_contact_debonding.py)\n\n00:42.299\n\n0.0\n\nsphx_glr_examples_gallery_examples_01_basic_topology_optimization_cantilever_beam.py (topology_optimization_cantilever_beam.py)\n\n00:42.268\n\n0.0\n\nsphx_glr_examples_gallery_examples_01_basic_harmonic_acoustics.py (harmonic_acoustics.py)\n\n00:26.897\n\n0.0\n\nsphx_glr_examples_gallery_examples_01_basic_valve.py (valve.py)\n\n00:20.509\n\n0.0\n\nsphx_glr_examples_gallery_examples_01_basic_cooling_holes_thermal_analysis.py (cooling_holes_thermal_analysis.py)\n\n00:18.331\n\n0.0\n\nsphx_glr_examples_gallery_examples_01_basic_steady_state_thermal_analysis.py (steady_state_thermal_analysis.py)\n\n00:17.210\n\n0.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/launcher/MechanicalLauncher.html#mechanicallauncher","title":"MechanicalLauncher","text":"MechanicalLauncher\n\n\n\nclass ansys.mechanical.core.launcher.MechanicalLauncher(batch, port, exe_path, additional_args=None, additional_envs=None, verbose=False)\n\nLaunches Mechanical in batch or UI mode."},{"objectID":"Home","href":"api/ansys/mechanical/core/launcher/MechanicalLauncher.html#overview","title":"MechanicalLauncher > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nlaunch\n\nLaunch Mechanical with the gRPC server.\n\nAttributes\n\n\n\n\n\nbatch\n\n\n\nport\n\n\n\nexe_path\n\n\n\nadditional_args\n\n\n\nadditional_envs\n\n\n\nverbose\n\n\n\nStatic methods\n\n\n\n\n\nverify_path_exists\n\nThrow an exception if the given exe_path does not exist."},{"objectID":"Home","href":"api/ansys/mechanical/core/launcher/MechanicalLauncher.html#import-detail","title":"MechanicalLauncher > Import detail","text":"Import detail\n\nfrom ansys.mechanical.core.launcher import MechanicalLauncher"},{"objectID":"Home","href":"api/ansys/mechanical/core/launcher/MechanicalLauncher.html#attribute-detail","title":"MechanicalLauncher > Attribute detail","text":"Attribute detail\n\n\n\nMechanicalLauncher.batch\n\n\n\n\n\nMechanicalLauncher.port\n\n\n\n\n\nMechanicalLauncher.exe_path\n\n\n\n\n\nMechanicalLauncher.additional_args = None\n\n\n\n\n\nMechanicalLauncher.additional_envs = None\n\n\n\n\n\nMechanicalLauncher.verbose = False\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/launcher/MechanicalLauncher.html#method-detail","title":"MechanicalLauncher > Method detail","text":"Method detail\n\n\n\nMechanicalLauncher.launch()\n\nLaunch Mechanical with the gRPC server.\n\n\n\nstatic MechanicalLauncher.verify_path_exists(exe_path)\n\nThrow an exception if the given exe_path does not exist.\n\nParameters\n\nexe_path\n\npython:str\n\nPath to verify.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/rpc/client/index.html#the-clientpy-module","title":"The client.py module","text":"The client.py module\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/rpc/client/index.html#summary","title":"The client.py module > Summary","text":"Summary\n\nClasses\n\n\n\n\n\nClient\n\nClient for connecting to Mechanical services.\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/rpc/client/index.html#description","title":"The client.py module > Description","text":"Description\n\nClient for Mechanical services.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/transaction/Transaction.html#transaction","title":"Transaction","text":"Transaction\n\n\n\nclass ansys.mechanical.core.embedding.transaction.Transaction\n\nA class to speed up bulk user interactions using Ansys ACT Mechanical Transaction."},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/transaction/Transaction.html#overview","title":"Transaction > Overview","text":"Overview\n\nSpecial methods\n\n\n\n\n\n__enter__\n\nEnter the context of the transaction.\n\n__exit__\n\nExit the context of the transaction and disposes of resources."},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/transaction/Transaction.html#import-detail","title":"Transaction > Import detail","text":"Import detail\n\nfrom ansys.mechanical.core.embedding.transaction import Transaction"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/transaction/Transaction.html#method-detail","title":"Transaction > Method detail","text":"Method detail\n\n\n\nTransaction.__enter__()\n\nEnter the context of the transaction.\n\n\n\nTransaction.__exit__(exc_type, exc_val, exc_tb)\n\nExit the context of the transaction and disposes of resources.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/steady_state_thermal_analysis.html#steady-state-thermal-analysis","title":"Steady state thermal analysis","text":"Steady state thermal analysis\n\nThis example problem demonstrates the use of a\nsimple steady-state thermal analysis to determine the temperatures,\nthermal gradients, heat flow rates, and heat fluxes that are caused\nby thermal loads that do not vary over time. A steady-state thermal\nanalysis calculates the effects of steady thermal loads on a system\nor component, in this example, a long bar model."},{"objectID":"Home","href":"examples/gallery_examples/01_basic/steady_state_thermal_analysis.html#import-the-necessary-libraries","title":"Steady state thermal analysis > Import the necessary libraries","text":"Import the necessary libraries"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/steady_state_thermal_analysis.html#initialize-the-embedded-application","title":"Steady state thermal analysis > Initialize the embedded application","text":"Initialize the embedded application"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/steady_state_thermal_analysis.html#create-functions-to-set-camera-and-display-images","title":"Steady state thermal analysis > Create functions to set camera and display images","text":"Create functions to set camera and display images"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/steady_state_thermal_analysis.html#configure-graphics-for-image-export","title":"Steady state thermal analysis > Configure graphics for image export","text":"Configure graphics for image export"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/steady_state_thermal_analysis.html#download-the-geometry-file","title":"Steady state thermal analysis > Download the geometry file","text":"Download the geometry file"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/steady_state_thermal_analysis.html#import-the-geometry","title":"Steady state thermal analysis > Import the geometry","text":"Import the geometry\n\nStatic Scene\n\n\n\nInteractive Scene\n\n"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/steady_state_thermal_analysis.html#add-steady-state-thermal-analysis","title":"Steady state thermal analysis > Add steady state thermal analysis","text":"Add steady state thermal analysis"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/steady_state_thermal_analysis.html#create-named-selections-and-construction-geometry","title":"Steady state thermal analysis > Create named selections and construction geometry","text":"Create named selections and construction geometry\n\nCreate a function to add a named selection\n\nCreate a function to add generation criteria to the named selection\n\nCreate a function to set the properties of the generation criteria\n\nAdd named selections to the model\n\nCreate construction geometry"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/steady_state_thermal_analysis.html#define-the-boundary-condition-and-add-results","title":"Steady state thermal analysis > Define the boundary condition and add results","text":"Define the boundary condition and add results\n\nCreate a function to set the location and output for the temperature boundary condition\n\nCreate a function to set the inputs and outputs for the temperature boundary condition\n\nAdd temperature boundary conditions to the steady state thermal analysis\n\nAdd radiation\n\nSet up the analysis settings\n\n"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/steady_state_thermal_analysis.html#add-results","title":"Steady state thermal analysis > Add results","text":"Add results\n\nAdd temperature results to the solution\n\nAdd the total and directional heat flux to the solution\n\nAdd thermal error and temperature probes\n\nAdd a heat flux probe\n\nAdd a reaction probe\n\nAdd a radiation probe"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/steady_state_thermal_analysis.html#solve-the-solution","title":"Steady state thermal analysis > Solve the solution","text":"Solve the solution"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/steady_state_thermal_analysis.html#show-messages","title":"Steady state thermal analysis > Show messages","text":"Show messages"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/steady_state_thermal_analysis.html#display-the-results","title":"Steady state thermal analysis > Display the results","text":"Display the results\n\n\n\nTemperature on part of the body\n\n\n\nTemperature distribution along the specific path\n\n\n\nTemperature of bottom surface\n\n"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/steady_state_thermal_analysis.html#export-the-directional-heat-flux-animation","title":"Steady state thermal analysis > Export the directional heat flux animation","text":"Export the directional heat flux animation\n\nCreate a function to update the animation frames\n\nShow the directional heat flux animation\n\n"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/steady_state_thermal_analysis.html#display-the-output-file-from-the-solve","title":"Steady state thermal analysis > Display the output file from the solve","text":"Display the output file from the solve"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/steady_state_thermal_analysis.html#print-the-project-tree","title":"Steady state thermal analysis > Print the project tree","text":"Print the project tree"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/steady_state_thermal_analysis.html#clean-up-the-app-and-downloaded-files","title":"Steady state thermal analysis > Clean up the app and downloaded files","text":"Clean up the app and downloaded files\n\nTotal running time of the script: (0 minutes 17.210 seconds)\n\n\n\nDownload Jupyter notebook: steady_state_thermal_analysis.ipynb\n\nDownload Python source code: steady_state_thermal_analysis.py\n\nDownload zipped: steady_state_thermal_analysis.zip\n\nGallery generated by Sphinx-Gallery\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/rpc/default_server/MechanicalDefaultServer.html#mechanicaldefaultserver","title":"MechanicalDefaultServer","text":"MechanicalDefaultServer\n\n\n\nclass ansys.mechanical.core.embedding.rpc.default_server.MechanicalDefaultServer(**kwargs)\n\nBases: ansys.mechanical.core.embedding.rpc.server.MechanicalEmbeddedServer\n\nDefault server with default service methods."},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/rpc/default_server/MechanicalDefaultServer.html#import-detail","title":"MechanicalDefaultServer > Import detail","text":"Import detail\n\nfrom ansys.mechanical.core.embedding.rpc.default_server import MechanicalDefaultServer\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/pool/LocalMechanicalPool.html#localmechanicalpool","title":"LocalMechanicalPool","text":"LocalMechanicalPool\n\n\n\nclass ansys.mechanical.core.pool.LocalMechanicalPool(n_instances, wait=True, port=MECHANICAL_DEFAULT_PORT, progress_bar=True, restart_failed=True, **kwargs)\n\nCreate a pool of Mechanical instances.\n\nParameters\n\nn_instance\n\npython:int\n\nNumber of Mechanical instances to create in the pool.\n\nwait\n\nbool, optional\n\nWhether to wait for the pool to be initialized. The default is\nTrue. When False, the pool starts in the background, in\nwhich case all resources might not be immediately available.\n\nstarting_port\n\npython:int, optional\n\nStarting port for the instances. The default is 10000.\n\nprogress_bar\n\nbool, optional\n\nWhether to show a progress bar when starting the pool. The default\nis True, but the progress bar is not shown when wait=False.\n\nrestart_failed\n\nbool, optional\n\nWhether to restart any failed instances in the pool. The default is\nTrue.\n\n**kwargs\n\npython:dict, optional\n\nAdditional keyword arguments. For a list of all keyword\narguments, use the ansys.mechanical.core.launch_mechanical()\nfunction. If the exec_file keyword argument is found, it is used to\nstart instances. PyPIM is used to create instances if the following\nconditions are met:\n\nPyPIM is configured.\n\nversion is specified.\n\nexec_file is not specified.\n\nExamples\n\nCreate a pool of 10 Mechanical instances.\n\n>>> from ansys.mechanical.core import LocalMechanicalPool\n>>> pool = LocalMechanicalPool(10)\nCreating Pool: 100%|########| 10/10 [00:01<00:00,  1.43it/s]\n\nOn Windows, create a pool while specifying the Mechanical executable file.\n\n>>> exec_file = 'C:/Program Files/ANSYS Inc/v252/aisol/bin/winx64/AnsysWBU.exe'\n>>> pool = LocalMechanicalPool(10, exec_file=exec_file)\nCreating Pool: 100%|########| 10/10 [00:01<00:00,  1.43it/s]\n\nOn Linux, create a pool while specifying the Mechanical executable file.\n\n>>> exec_file = '/ansys_inc/v252/aisol/.workbench'\n>>> pool = LocalMechanicalPool(10, exec_file=exec_file)\nCreating Pool: 100%|########| 10/10 [00:01<00:00,  1.43it/s]\n\nIn the PyPIM environment, create a pool.\n\n>>> pool = LocalMechanicalPool(10, version=\"252\")\nCreating Pool: 100%|########| 10/10 [00:01<00:00,  1.43it/s]"},{"objectID":"Home","href":"api/ansys/mechanical/core/pool/LocalMechanicalPool.html#overview","title":"LocalMechanicalPool > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nmap\n\nRun a user-defined function on each Mechanical instance in the pool.\n\nrun_batch\n\nRun a batch of input files on the Mechanical instances in the pool.\n\nnext_available\n\nWait until a Mechanical instance is available and return this instance.\n\nexit\n\nExit all Mechanical instances in the pool.\n\nProperties\n\n\n\n\n\nports\n\nGet a list of the ports that are used.\n\nSpecial methods\n\n\n\n\n\n__del__\n\nClean up when complete.\n\n__len__\n\nGet the number of instances in the pool.\n\n__getitem__\n\nGet an instance by an index.\n\n__iter__\n\nIterate through active instances.\n\n__str__\n\nGet the string representation of this object."},{"objectID":"Home","href":"api/ansys/mechanical/core/pool/LocalMechanicalPool.html#import-detail","title":"LocalMechanicalPool > Import detail","text":"Import detail\n\nfrom ansys.mechanical.core.pool import LocalMechanicalPool"},{"objectID":"Home","href":"api/ansys/mechanical/core/pool/LocalMechanicalPool.html#property-detail","title":"LocalMechanicalPool > Property detail","text":"Property detail\n\n\n\nproperty LocalMechanicalPool.ports\n\nGet a list of the ports that are used.\n\nExamples\n\nGet the list of ports used by the pool of Mechanical instances.\n\n>>> pool.ports\n[10001, 10002]"},{"objectID":"Home","href":"api/ansys/mechanical/core/pool/LocalMechanicalPool.html#method-detail","title":"LocalMechanicalPool > Method detail","text":"Method detail\n\n\n\nLocalMechanicalPool.map(func, iterable=None, clear_at_start=True, progress_bar=True, close_when_finished=False, timeout=None, wait=True)\n\nRun a user-defined function on each Mechanical instance in the pool.\n\nParameters\n\nfunc\n\nfunction\n\nFunction with mechanical as the first argument. The subsequent\narguments should match the number of items in each iterable (if any).\n\niterable\n\npython:list, python:tuple, optional\n\nAn iterable containing a set of arguments for the function.\nThe default is None, in which case the function runs\nonce on each instance of Mechanical.\n\nclear_at_start\n\nbool, optional\n\nClear Mechanical at the start of execution. The default is\nTrue. Setting this to False might lead to instability.\n\nprogress_bar\n\nbool, optional\n\nWhether to show a progress bar when running the batch of input\nfiles. The default is True, but the progress bar is not shown\nwhen wait=False.\n\nclose_when_finished\n\nbool, optional\n\nWhether to close the instances when the function finishes running\non all instances in the pool. The default is False.\n\ntimeout\n\npython:float, optional\n\nMaximum runtime in seconds for each iteration. The default is\nNone, in which case there is no timeout. If you specify a\nvalue, each iteration is allowed to run only this number of\nseconds. Once this value is exceeded, the batch process is\nstopped and treated as a failure.\n\nwait\n\nbool, optional\n\nWhether block execution must wait until the batch process is\ncomplete. The default is True.\n\nReturns\n\npython:list\n\nA list containing the return values for the function.\nFailed runs do not return an output. Because return values\nare not necessarily in the same order as the iterable,\nyou might want to add some sort of tracker to the return\nof your function.\n\nExamples\n\nRun several input files while storing the final routine.  Note\nhow the function to map must use mechanical as the first argument.\nThe function can have any number of additional arguments.\n\n>>> from ansys.mechanical.core import LocalMechanicalPool\n>>> pool = LocalMechanicalPool(10)\n>>> completed_indices = []\n>>> def function(mechanical, name, script):\n        # name, script = args\n        mechanical.clear()\n        output = mechanical.run_python_script(script)\n        return name, output\n>>> inputs = [(\"first\",\"2+3\"), (\"second\", \"3+4\")]\n>>> output = pool.map(function, inputs, progress_bar=False, wait=True)\n[('first', '5'), ('second', '7')]\n\n\n\nLocalMechanicalPool.run_batch(files, clear_at_start=True, progress_bar=True, close_when_finished=False, timeout=None, wait=True)\n\nRun a batch of input files on the Mechanical instances in the pool.\n\nParameters\n\nfiles\n\npython:list\n\nList of input files.\n\nclear_at_start\n\nbool, optional\n\nWhether to clear Mechanical when execution starts. The default is\nTrue. Setting this parameter to False might lead to\ninstability.\n\nprogress_bar\n\nbool, optional\n\nWhether to show a progress bar when running the batch of input\nfiles. The default is True, but the progress bar is not shown\nwhen wait=False.\n\nclose_when_finished\n\nbool, optional\n\nWhether to close the instances when running the batch\nof input files is finished. The default is False.\n\ntimeout\n\npython:float, optional\n\nMaximum runtime in seconds for each iteration. The default is\nNone, in which case there is no timeout. If you specify a\nvalue, each iteration is allowed to run only this number of\nseconds. Once this value is exceeded, the batch process is stopped\nand treated as a failure.\n\nwait\n\nbool, optional\n\nWhether block execution must wait until the batch process is complete.\nThe default is True.\n\nReturns\n\npython:list\n\nList of text outputs from Mechanical for each batch run. The outputs\nare not necessarily listed in the order of the inputs. Failed runs do\nnot return an output. Because the return outputs are not\nnecessarily in the same order as iterable, you might\nwant to add some sort of tracker or note within the input files.\n\nExamples\n\nRun 20 verification files on the pool.\n\n>>> files = [f\"test{index}.py\" for index in range(1, 21)]\n>>> outputs = pool.run_batch(files)\n>>> len(outputs)\n20\n\n\n\nLocalMechanicalPool.next_available(return_index=False)\n\nWait until a Mechanical instance is available and return this instance.\n\nParameters\n\nreturn_index\n\nbool, optional\n\nWhether to return the index along with the instance. The default\nis False.\n\nReturns\n\npymechanical.Mechanical\n\nInstance of Mechanical.\n\npython:int\n\nIndex within the pool of Mechanical instances. This index\nis not returned by default.\n\nExamples\n\n>>> mechanical = pool.next_available()\n>>> mechanical\nAnsys Mechanical [Ansys Mechanical Enterprise]\nProduct Version:252\nSoftware build date: 06/13/2025 15:54:58\n\n\n\nLocalMechanicalPool.__del__()\n\nClean up when complete.\n\n\n\nLocalMechanicalPool.exit(block=False)\n\nExit all Mechanical instances in the pool.\n\nParameters\n\nblock\n\nbool, optional\n\nWhether to wait until all processes close before exiting\nall instances in the pool. The default is False.\n\nExamples\n\n>>> pool.exit()\n\n\n\nLocalMechanicalPool.__len__()\n\nGet the number of instances in the pool.\n\n\n\nLocalMechanicalPool.__getitem__(key)\n\nGet an instance by an index.\n\n\n\nLocalMechanicalPool.__iter__()\n\nIterate through active instances.\n\n\n\nLocalMechanicalPool.__str__()\n\nGet the string representation of this object.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.tools.path.save_mechanical_path.html#save_mechanical_path","title":"save_mechanical_path","text":"save_mechanical_path\n\n\n\nansys.tools.path.save_mechanical_path(exe_loc=None, allow_prompt=True)\n\nFind the Mechanical path or query user.\n\nParameters\n\nexe_loc\n\npython:str, optional\n\nPath for the Mechanical executable file (AnsysWBU.exe).\nThe default is None, in which case an attempt is made to\nobtain the path from the following sources in this order:\n\nThe default Mechanical paths (for example,\nC:/Program Files/Ansys Inc/vXXX/aisol/bin/AnsysWBU.exe)\n\nThe configuration file\n\nUser input\n\nIf a path is supplied, this method performs some checks. If the\nchecks are successful, it writes this path to the configuration\nfile.\n\nReturns\n\npython:str\n\nPath for the Mechanical executable file.\n\nReturn type\n\nstr\n\nNotes\n\nThe location of the configuration file config.txt can be found in\nansys.tools.path.SETTINGS_DIR. For example:\n\nYou can change the default for the exe_loc parameter either by modifying the\nconfig.txt file or by running this code:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/graphics/embedding_plotter/index.html#the-embedding_plotterpy-module","title":"The embedding_plotter.py module","text":"The embedding_plotter.py module\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/graphics/embedding_plotter/index.html#summary","title":"The embedding_plotter.py module > Summary","text":"Summary\n\nClasses\n\n\n\n\n\nPlottable\n\nPlottable object.\n\nPlotSettings\n\nSettings for a plot.\n\nScenegraphNodeVisitor\n\nClass to visit the Mechanical scenegraph nodes.\n\nEnums\n\n\n\n\n\nMeshOrientedTransformResizeStyle\n\nDynamic resize style flag for mesh oriented transform nodes.\n\nFunctions\n\n\n\n\n\nto_plotter\n\nConvert the scene for obj to an ansys.tools.visualization_interface.Plotter instance.\n\n\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/graphics/embedding_plotter/index.html#description","title":"The embedding_plotter.py module > Description","text":"Description\n\nPyVista plotter."},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/graphics/embedding_plotter/index.html#module-detail","title":"The embedding_plotter.py module > Module detail","text":"Module detail\n\n\n\nembedding_plotter.to_plotter(app: ansys.mechanical.core.embedding.App, obj=None, plot_settings: PlotSettings = None) -> ansys.tools.visualization_interface.Plotter\n\nConvert the scene for obj to an ansys.tools.visualization_interface.Plotter instance.\n\nIf the obj is None, default to the Geometry object.\nGeometry, Mesh, and some Results are currently supported.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"user_guide/remote_session/overview.html#overview","title":"Overview","text":"Overview\n\nThe launch_mechanical() method\ncreates an instance of the Mechanical\nclass in the background and sends commands to it as a service. Because errors and warnings\nare processed Pythonically, you can develop a script in real time without worrying about\nwhether the script runs correctly when deployed in batch mode.\n\nHere is how you use the launch_mechanical() method to launch Mechanical from Python in gRPC mode:\n\nIf multiple versions of product are installed, then you can use exec_file argument\nto select the version of the product to launch.\n\nIf batch option is set to True Mechanical is launched without GUI. The cleanup_on_exit\noption decides whether product exits at the end of the PyMechanical script or not.\n\nversion argument is used only if PyPIM is configured. For general cases, use exec_file\n\nYou can send genuine Python class commands to the application when Mechanical is active.\nFor example, you can send a Python script:\n\nMechanical interactively returns the result of each command that you send,\nsaving the result to the logging module.\n\nErrors are caught immediately. In the following code, an invalid command is sent,\nand an error is raised:\n\nBecause the error is caught immediately, you can write your Mechanical scripts in\nPython, run them interactively, and then run them in batch without worrying if the\nscripts run correctly. This would not be the case if you had instead outputted the\nscripts that you wrote to script files.\n\nThe Mechanical class supports\nmuch more than sending text to Mechanical. It includes higher-level wrapping\nthat provides for better scripting and interaction with Mechanical. For information\non advanced methods for interacting with Mechanical, see ref_examples.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/poster/PosterError.html#postererror","title":"PosterError","text":"PosterError\n\n\n\nexception ansys.mechanical.core.embedding.poster.PosterError(error: Exception)\n\nBases: Exception\n\nClass which holds errors from the background thread posting system."},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/poster/PosterError.html#overview","title":"PosterError > Overview","text":"Overview\n\nProperties\n\n\n\n\n\nerror\n\nGet the underlying exception."},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/poster/PosterError.html#import-detail","title":"PosterError > Import detail","text":"Import detail\n\nfrom ansys.mechanical.core.embedding.poster import PosterError"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/poster/PosterError.html#property-detail","title":"PosterError > Property detail","text":"Property detail\n\n\n\nproperty PosterError.error: Exception\n\nGet the underlying exception.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/fracture_analysis_contact_debonding.html#fracture-analysis---contact-debonding","title":"Fracture analysis - contact debonding","text":"Fracture analysis - contact debonding\n\nThe following example demonstrates the use of the Contact Debonding\nfeaturing in Mechanical using the Cohesive Zone Material (CZM) method.\nThis example displaces two two-dimensional parts on a\ndouble cantilever beam."},{"objectID":"Home","href":"examples/gallery_examples/01_basic/fracture_analysis_contact_debonding.html#import-the-necessary-libraries","title":"Fracture analysis - contact debonding > Import the necessary libraries","text":"Import the necessary libraries"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/fracture_analysis_contact_debonding.html#initialize-the-embedded-application","title":"Fracture analysis - contact debonding > Initialize the embedded application","text":"Initialize the embedded application"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/fracture_analysis_contact_debonding.html#configure-camera-and-graphics-for-image-export","title":"Fracture analysis - contact debonding > Configure camera and graphics for image export","text":"Configure camera and graphics for image export"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/fracture_analysis_contact_debonding.html#create-functions-to-set-camera-and-display-images","title":"Fracture analysis - contact debonding > Create functions to set camera and display images","text":"Create functions to set camera and display images"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/fracture_analysis_contact_debonding.html#download-and-import-the-geometry-file","title":"Fracture analysis - contact debonding > Download and import the geometry file","text":"Download and import the geometry file\n\nStatic Scene\n\n\n\nInteractive Scene\n\n"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/fracture_analysis_contact_debonding.html#download-and-import-the-material-files","title":"Fracture analysis - contact debonding > Download and import the material files","text":"Download and import the material files"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/fracture_analysis_contact_debonding.html#add-connections-to-the-model","title":"Fracture analysis - contact debonding > Add connections to the model","text":"Add connections to the model"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/fracture_analysis_contact_debonding.html#add-a-static-structural-analysis-to-the-model","title":"Fracture analysis - contact debonding > Add a static structural analysis to the model","text":"Add a static structural analysis to the model"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/fracture_analysis_contact_debonding.html#activate-the-geometry-and-set-the-2d-behavior","title":"Fracture analysis - contact debonding > Activate the geometry and set the 2D behavior","text":"Activate the geometry and set the 2D behavior"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/fracture_analysis_contact_debonding.html#create-a-function-to-get-the-child-object-by-name","title":"Fracture analysis - contact debonding > Create a function to get the child object by name","text":"Create a function to get the child object by name"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/fracture_analysis_contact_debonding.html#activate-the-part-2-object-and-set-its-material","title":"Fracture analysis - contact debonding > Activate the Part 2 object and set its material","text":"Activate the Part 2 object and set its material"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/fracture_analysis_contact_debonding.html#define-the-contact-and-contact-regions","title":"Fracture analysis - contact debonding > Define the contact and contact regions","text":"Define the contact and contact regions\n\nActivate the contact region\n\nSet properties for the contact region"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/fracture_analysis_contact_debonding.html#generate-the-mesh","title":"Fracture analysis - contact debonding > Generate the mesh","text":"Generate the mesh\n\nCreate a function to add sizing to the mesh\n\nAdd sizing to the mesh for the short and long edges\n\nAdd sizing to the mesh for both faces\n\n"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/fracture_analysis_contact_debonding.html#add-a-contact-debonding-object","title":"Fracture analysis - contact debonding > Add a contact debonding object","text":"Add a contact debonding object"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/fracture_analysis_contact_debonding.html#define-the-static-structural-analysis-settings","title":"Fracture analysis - contact debonding > Define the static structural analysis settings","text":"Define the static structural analysis settings"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/fracture_analysis_contact_debonding.html#define-boundary-conditions","title":"Fracture analysis - contact debonding > Define boundary conditions","text":"Define boundary conditions"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/fracture_analysis_contact_debonding.html#add-displacements-to-the-static-structural-analysis","title":"Fracture analysis - contact debonding > Add displacements to the static structural analysis","text":"Add displacements to the static structural analysis\n\nCreate a function to add displacement to the static structural analysis\n\nAdd displacements to the static structural analysis\n\nSet the camera to fit the model and display the image of the boundary conditions\n\n"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/fracture_analysis_contact_debonding.html#add-results-to-the-solution","title":"Fracture analysis - contact debonding > Add results to the solution","text":"Add results to the solution\n\nAdd directional deformation to the static structural analysis solution\n\nAdd the force reaction to the static structural analysis solution"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/fracture_analysis_contact_debonding.html#solve-the-solution","title":"Fracture analysis - contact debonding > Solve the solution","text":"Solve the solution"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/fracture_analysis_contact_debonding.html#show-messages","title":"Fracture analysis - contact debonding > Show messages","text":"Show messages"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/fracture_analysis_contact_debonding.html#activate-the-reactions-and-display-the-images","title":"Fracture analysis - contact debonding > Activate the reactions and display the images","text":"Activate the reactions and display the images\n\nDirectional deformation\n\n\n\nForce reaction\n\n"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/fracture_analysis_contact_debonding.html#export-the-animation","title":"Fracture analysis - contact debonding > Export the animation","text":"Export the animation\n\nCreate a function to update the animation frame\n\nDisplay the animation of the force reaction\n\n"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/fracture_analysis_contact_debonding.html#display-the-output-file-from-the-solve","title":"Fracture analysis - contact debonding > Display the output file from the solve","text":"Display the output file from the solve"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/fracture_analysis_contact_debonding.html#print-the-project-tree","title":"Fracture analysis - contact debonding > Print the project tree","text":"Print the project tree"},{"objectID":"Home","href":"examples/gallery_examples/01_basic/fracture_analysis_contact_debonding.html#clean-up-the-project","title":"Fracture analysis - contact debonding > Clean up the project","text":"Clean up the project\n\nTotal running time of the script: (0 minutes 42.299 seconds)\n\n\n\nDownload Jupyter notebook: fracture_analysis_contact_debonding.ipynb\n\nDownload Python source code: fracture_analysis_contact_debonding.py\n\nDownload zipped: fracture_analysis_contact_debonding.zip\n\nGallery generated by Sphinx-Gallery\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/logging/Logger.html#logger","title":"Logger","text":"Logger\n\n\n\nclass ansys.mechanical.core.logging.Logger(level=logging.DEBUG, to_file=False, to_stdout=True, filename=FILE_NAME)\n\nProvides for adding handlers to the logger for each Mechanical session.\n\nThis class allows you to add handlers to the logger to output to a file or\nthe standard output.\n\nParameters\n\nlevel\n\npython:int, optional\n\nLogging level for filtering the messages that are allowed in the logger.\nThe default is 10, in which case the DEBUG level is used.\n\nto_file\n\nbool, optional\n\nWhether to write log messages to a file. The default is False.\n\nto_stdout\n\nbool, optional\n\nWhether to write log messages to the standard output. The default is\nTrue.\n\nfilename\n\npython:str, optional\n\nName of the file to write log messages to. The default is pymechanical.log.\n\nExamples\n\nDemonstrate logger usage from a Mechanical instance. The logger is automatically\ncreated when a Mechanical instance is created.\n\n>>> from ansys.mechanical.core import launch_mechanical\n>>> mechanical = launch_mechanical(loglevel='DEBUG')\n>>> mechanical.log.info('This is a useful message')\nINFO -  -  <ipython-input-24-80df150fe31f> - <module> - This is LOG debug message.\n\nImport the PyMechanical global logger and add a file output handler.\n\n>>> import os\n>>> from ansys.mechanical.core import LOG\n>>> file_path = os.path.join(os.getcwd(), 'pymechanical.log')\n>>> LOG.log_to_file(file_path)"},{"objectID":"Home","href":"api/ansys/mechanical/core/logging/Logger.html#overview","title":"Logger > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nlog_to_file\n\nAdd a file handler to the logger.\n\nlog_to_stdout\n\nAdd a standard output handler to the logger.\n\nsetLevel\n\nChange the log level of the object and the attached handlers.\n\nadd_child_logger\n\nAdd a child logger to the main logger.\n\nadd_instance_logger\n\nAdd a logger for a Mechanical instance.\n\nAttributes\n\n\n\n\n\nfile_handler\n\n\n\nstd_out_handler\n\n\n\nlogger\n\n\n\nlevel\n\n\n\ndebug\n\n\n\ninfo\n\n\n\nwarning\n\n\n\nerror\n\n\n\ncritical\n\n\n\nlog\n\n\n\nStatic methods\n\n\n\n\n\nadd_handling_uncaught_exceptions\n\nRedirect the output of an exception to a logger.\n\nSpecial methods\n\n\n\n\n\n__getitem__\n\nGet the instance logger based on a key."},{"objectID":"Home","href":"api/ansys/mechanical/core/logging/Logger.html#import-detail","title":"Logger > Import detail","text":"Import detail\n\nfrom ansys.mechanical.core.logging import Logger"},{"objectID":"Home","href":"api/ansys/mechanical/core/logging/Logger.html#attribute-detail","title":"Logger > Attribute detail","text":"Attribute detail\n\n\n\nLogger.file_handler = None\n\n\n\n\n\nLogger.std_out_handler = None\n\n\n\n\n\nLogger.logger\n\n\n\n\n\nLogger.level = 0\n\n\n\n\n\nLogger.debug\n\n\n\n\n\nLogger.info\n\n\n\n\n\nLogger.warning\n\n\n\n\n\nLogger.error\n\n\n\n\n\nLogger.critical\n\n\n\n\n\nLogger.log\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/logging/Logger.html#method-detail","title":"Logger > Method detail","text":"Method detail\n\n\n\nLogger.log_to_file(filename=FILE_NAME, level=LOG_LEVEL)\n\nAdd a file handler to the logger.\n\nParameters\n\nfilename\n\npython:str, optional\n\nName of the file to write log messages to. The default is\n'pymechanical.log'.\n\nlevel\n\npython:str, optional\n\nLevel of logging. The default is 10, in which case the \"DEBUG\"\nlevel is used. Options are \"DEBUG\", \"INFO\",\n\"WARNING\" and \"ERROR\".\n\nExamples\n\nWrite to the pymechanical.log file in the current working directory.\n\n>>> from ansys.mechanical.core import LOG\n>>> import os\n>>> file_path = os.path.join(os.getcwd(), 'pymechanical.log')\n>>> LOG.log_to_file(file_path)\n\n\n\nLogger.log_to_stdout(level=LOG_LEVEL)\n\nAdd a standard output handler to the logger.\n\nParameters\n\nlevel\n\npython:str, optional\n\nLevel of logging, such as DUBUG. The default is LOG_LEVEL.\n\n\n\nLogger.setLevel(level='DEBUG')\n\nChange the log level of the object and the attached handlers.\n\nParameters\n\nlevel\n\npython:str, optional\n\nLevel of logging, such as DUBUG. The default is LOG_LEVEL.\n\n\n\nLogger.add_child_logger(suffix, level=None)\n\nAdd a child logger to the main logger.\n\nThis child logger is more general than an instance logger, which is designed to\ntrack the state of a Mechanical instance.\n\nIf the logging level is specified in the arguments, a new logger with a reference\nto the _global logger handlers is created instead of a child logger.\n\nParameters\n\nsuffix\n\npython:str\n\nName for the child logger.\n\nlevel\n\npython:str, optional\n\nLevel of logging. The default is None, in which case the \"DEBUG\"\nlevel is used. Options are \"DEBUG\", \"INFO\", \"WARNING\",\nand \"ERROR\".\n\nReturns\n\nlogging.logger\n\nLogger class.\n\n\n\nLogger.add_instance_logger(name, mechanical_instance, level=None)\n\nAdd a logger for a Mechanical instance.\n\nThe logger for a Mechanical instance has an adapter that adds contextual information,\nsuch as the name of the Mechanical instance. This logger is returned, and you can use it to\nlog events as a normal logger. It is also stored in the _instances field.\n\nParameters\n\nname\n\npython:str\n\nName for the new logger.\n\nmechanical_instance\n\nansys.mechanical.core.mechanical.Mechanical\n\nMechanical instance object. This object should contain the name\nattribute.\n\nlevel\n\npython:str, optional\n\nLevel of logging. The default is None, in which case the \"DEBUG\"\nlevel is used. Options are \"DEBUG\", \"INFO\", \"WARNING\",\nand \"ERROR\".\n\nReturns\n\nansys.mechanical.core.logging.PyMechanicalCustomAdapter\n\nLogger adapter customized to add Mechanical information to the\nlogs. You can use this class to log events in the same\nway you would with the logger class.\n\nRaises\n\nException\n\nYou can only input strings as name to this method.\n\n\n\nLogger.__getitem__(key)\n\nGet the instance logger based on a key.\n\nParameters\n\nkey\n\n\n\n\n\nstatic Logger.add_handling_uncaught_exceptions(logger)\n\nRedirect the output of an exception to a logger.\n\nParameters\n\nlogger\n\npython:str\n\nName of the logger.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/feature_flags/FeatureFlags.html#featureflags","title":"FeatureFlags","text":"FeatureFlags\n\n\n\nclass ansys.mechanical.core.feature_flags.FeatureFlags\n\nSupported feature flag names."},{"objectID":"Home","href":"api/ansys/mechanical/core/feature_flags/FeatureFlags.html#overview","title":"FeatureFlags > Overview","text":"Overview\n\nAttributes\n\n\n\n\n\nThermalShells\n\n\n\nMultistageHarmonic\n\n\n\nCPython\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/feature_flags/FeatureFlags.html#import-detail","title":"FeatureFlags > Import detail","text":"Import detail\n\nfrom ansys.mechanical.core.feature_flags import FeatureFlags"},{"objectID":"Home","href":"api/ansys/mechanical/core/feature_flags/FeatureFlags.html#attribute-detail","title":"FeatureFlags > Attribute detail","text":"Attribute detail\n\n\n\nFeatureFlags.ThermalShells = 'Mechanical.ThermalShells'\n\n\n\n\n\nFeatureFlags.MultistageHarmonic = 'Mechanical.MultistageHarmonic'\n\n\n\n\n\nFeatureFlags.CPython = 'Mechanical.CPython.Capability'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/app/index.html#the-apppy-module","title":"The app.py module","text":"The app.py module\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/app/index.html#summary","title":"The app.py module > Summary","text":"Summary\n\nClasses\n\n\n\n\n\nGetterWrapper\n\nWrapper class around an attribute of an object.\n\nApp\n\nMechanical embedding Application.\n\nFunctions\n\n\n\n\n\nis_initialized\n\nCheck if the app has been initialized.\n\nConstants\n\n\n\n\n\nHAS_ANSYS_GRAPHICS\n\nWhether or not PyVista exists.\n\nINSTANCES\n\nList of instances.\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/app/index.html#description","title":"The app.py module > Description","text":"Description\n\nMain application class for embedded Mechanical."},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/app/index.html#module-detail","title":"The app.py module > Module detail","text":"Module detail\n\n\n\napp.is_initialized()\n\nCheck if the app has been initialized.\n\n\n\napp.HAS_ANSYS_GRAPHICS = True\n\nWhether or not PyVista exists.\n\n\n\napp.INSTANCES = []\n\nList of instances.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/logger/environ/EnvironBackend.html#environbackend","title":"EnvironBackend","text":"EnvironBackend\n\n\n\nclass ansys.mechanical.core.embedding.logger.environ.EnvironBackend\n\nProvides the environment variable backend for Mechanical logging."},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/logger/environ/EnvironBackend.html#overview","title":"EnvironBackend > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nflush\n\nFlush the log.\n\nenable\n\nEnable the given sink.\n\ndisable\n\nDisable the log level for this sink.\n\nset_log_level\n\nSet the log level for this sink based on the Python log level.\n\nset_auto_flush\n\nSet whether to auto flush to the standard log file.\n\nset_directory\n\nSet the location to write the log file to.\n\nset_base_directory\n\nSet the base location to write the log file to.\n\ncan_log_message\n\nReturn whether a message with the given severity is outputted to the log.\n\nlog_message\n\nLog the message to the configured logging mechanism."},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/logger/environ/EnvironBackend.html#import-detail","title":"EnvironBackend > Import detail","text":"Import detail\n\nfrom ansys.mechanical.core.embedding.logger.environ import EnvironBackend"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/logger/environ/EnvironBackend.html#method-detail","title":"EnvironBackend > Method detail","text":"Method detail\n\n\n\nEnvironBackend.flush()\n\nFlush the log.\n\n\n\nEnvironBackend.enable(sink: int = sinks.StandardSinks.CONSOLE)\n\nEnable the given sink.\n\n\n\nEnvironBackend.disable(sink: int = sinks.StandardSinks.CONSOLE)\n\nDisable the log level for this sink.\n\n\n\nEnvironBackend.set_log_level(level: int, sink: int = sinks.StandardSinks.CONSOLE)\n\nSet the log level for this sink based on the Python log level.\n\n\n\nEnvironBackend.set_auto_flush(flush: bool) -> None\n\nSet whether to auto flush to the standard log file.\n\n\n\nEnvironBackend.set_directory(directory: str) -> None\n\nSet the location to write the log file to.\n\n\n\nEnvironBackend.set_base_directory(base_directory: str) -> None\n\nSet the base location to write the log file to.\n\nThe base directory contains time-stamped subfolders where the log file\nis actually written to. If a base directory is set, it takes precedence over the\nset_directory location.\n\n\n\nEnvironBackend.can_log_message(level: int) -> bool\n\nReturn whether a message with the given severity is outputted to the log.\n\n\n\nEnvironBackend.log_message(level: int, context: str, message: str) -> None\n\nLog the message to the configured logging mechanism.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"kil/mechanical.html#mechanical-standalone","title":"Mechanical standalone","text":"Mechanical standalone\n\nIn addition to Standalone Mechanical known issues and limitations given below,\nplease refer\n\nMechanical API known issues and limitations.\n\nACT known issues and limitations."},{"objectID":"Home","href":"kil/mechanical.html#known-issues-and-limitations","title":"Mechanical standalone > Known issues and limitations","text":"Known issues and limitations"},{"objectID":"Home","href":"kil/mechanical.html#24r2","title":"Mechanical standalone > 24R2","text":"24R2\n\nIn Read Only mode, the application does not display error messages when the geometry is imported in batch mode.\n\nSection planes can not be added through batch mode.\n\nMechanical is not thread safe.\n\nSpaceclaim geometry (.scdocx) can not be imported on Linux platform.\n\nOn Linux based platforms, Ansys Motion and LSDYNA analysis support are limited.\n\nA fatal error currently exists when you are shutting down Mechanical on the\nLinux platform using Embedding (#85)."},{"objectID":"Home","href":"kil/mechanical.html#24r1","title":"Mechanical standalone > 24R1","text":"24R1\n\nPython libraries that are distributed with the installation of Mechanical does not work when there are syntax differences\nbetween IronPython and CPython (#515).\n\nTrace Import fails with PyMechanical Embedding when using python 3.10 only.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"user_guide/remote_session/server-launcher.html#initial-setup-for-launching-a-mechanical-session-on-the-local-machine","title":"Initial setup for launching a Mechanical session on the local machine","text":"Initial setup for launching a Mechanical session on the local machine\n\nTo run, PyMechanical must know the location of your Mechanical installation.\nMost of the time, PyMechanical can determine this location automatically. However,\nif you have a non-standard installation, you must provide this location.\n\nTo test and set up your installation of PyMechanical, run the\nlaunch_mechanical()\nmethod:\n\nThe first time that you run this method, PyMechanical attempts to detect the location\nof your Mechanical installation based on environment variables. If it cannot find\na Mechanical installation, PyMechanical asks you to supply the location of the\nMechanical executable file.\n\nOn Linux\n\nOn Windows\n\nThe settings file for Mechanical is stored locally. You do not need to enter\nthe path again. If you must change the path, perhaps to change the default\nversion of Mechanical, run the following:\n\nFor more information, see the change_default_mechanical_path()\nand find_mechanical() methods.\n\nAdditionally, you can use the exec_file keyword argument to specify the location of the\nMechanical executable file.\n\nOn Linux\n\nOn Windows\n\nYou can use the additional_switches keyword argument to specify additional arguments."},{"objectID":"Home","href":"user_guide/remote_session/server-launcher.html#api-reference","title":"Initial setup for launching a Mechanical session on the local machine > API reference","text":"API reference\n\nFor more information on controlling how Mechanical launches locally, see the\nlaunch_mechanical() method.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/loader/index.html#the-loaderpy-module","title":"The loader.py module","text":"The loader.py module\n\n"},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/loader/index.html#summary","title":"The loader.py module > Summary","text":"Summary\n\nFunctions\n\n\n\n\n\nload_clr\n\nLoad the clr, the outcome of this function is that clr is usable."},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/loader/index.html#description","title":"The loader.py module > Description","text":"Description\n\nclr_loader for pymechanical embedding. This loads the CLR on both windows and linux."},{"objectID":"Home","href":"api/ansys/mechanical/core/embedding/loader/index.html#module-detail","title":"The loader.py module > Module detail","text":"Module detail\n\n\n\nloader.load_clr(install_loc: str) -> None\n\nLoad the clr, the outcome of this function is that clr is usable.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"user_guide/howto/libraries.html#libraries","title":"Libraries","text":"Libraries\n\nThis is an experimental feature. Some of these libraries may not work.\n\nMost of Mechanical’s scripting APIs are implemented in C#. However, there are a small number\nof Python modules that are distributed with the installation of Mechanical that can be used\nfrom within the Mechanical Scripting Pane. These modules are not available for use from an\nembedded instance of Mechanical in Python because Python does not know where to find them.\n\nBut, in order to use these modules, you need to use the experimental function\nadd_mechanical_python_libraries to help Python locate them and make it possible to import\nthem. In addition, it is necessary to first initialize the embedded instance of Mechanical\nbecause these libraries may expect the .NET Common Language Runtime to be initialized as well\nas for the appropriate C# libraries to be loaded.\n\nTo use the above function, run the following:\n\nUsing version as argument to add_mechanical_python_libraries() is deprecated.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.tools.path.find_mechanical.html#find_mechanical","title":"find_mechanical","text":"find_mechanical\n\n\n\nansys.tools.path.find_mechanical(version=None, supported_versions={191: '19.1', 192: '19.2', 193: '19.3', 194: '19.4', 195: '19.5', 201: '2020R1', 202: '2020R2', 211: '2021R1', 212: '2021R2', 221: '2022R1', 222: '2022R2', 231: '2023R1', 232: '2023R2', 241: '2024R1', 242: '2024R2', 251: '2025R1', 252: '2025R2', 261: '2026R1'})\n\nSearch for the Mechanical path in the standard installation location.\n\nReturns\n\nmechanical_path\n\npython:str\n\nFull path to the executable file for the latest Mechanical version.\n\nversion\n\npython:float | python:str\n\nVersion in the float format. For example, 25.1 for 2025 R1.\nIf no version has be found, version is set to “”\n\nReturn type\n\nUnion[Tuple[str, float], Tuple[Literal[''], Literal['']]]\n\nExamples\n\nOn Windows:\n\n>>> from ansys.tools.path import find_mechanical\n>>> find_mechanical()\n('C:/Program Files/ANSYS Inc/v251/aisol/bin/winx64/AnsysWBU.exe', 25.1)\n\nOn Linux:\n\n>>> find_mechanical()\n('/usr/ansys_inc/v251/aisol/.workbench', 25.1)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Release notes","href":"changelog.html#release-notes","title":"Release notes","text":"Release notes\n\nThis document contains the release notes for the project."},{"objectID":"Release notes","href":"changelog.html#01134---september-19-2025","title":"Release notes > 0.11.34 - September 19, 2025","text":"0.11.34 - September 19, 2025\n\nFixed\n\n\n\n\n\nAdd `mechanical-env` in wheel\n\n#1324\n\nMaintenance\n\n\n\n\n\nUpdate CHANGELOG for v0.11.33\n\n#1319\n\nUpdate qt version\n\n#1320\n\nCombine Python cache step into one and confirm Python is installed\n\n#1321"},{"objectID":"Release notes","href":"changelog.html#version-011","title":"Release notes > Version 0.11","text":"Version 0.11"},{"objectID":"Release notes","href":"changelog.html#whats-new","title":"Release notes > What's New","text":"What's New\n\nPEP 8 aliases for Mechanical APIs\n\nAvailable in v0.11.30 and later\n\nMechanical APIs now support PEP 8 aliases for improved usability and consistency when used with PyMechanical. \n To enable PEP 8 aliases \n \n \n\n\n\nExample on how to use the PEP 8 aliases are given below \n \n \n\n\n\nGlobals parameter in the embedded app\n\nAvailable in v0.11.14 and later\n\nThe globals parameter of the App class is used to update the global variables. This parameter is optional and interchangeable with app.update_globals(globals()). To exclude enums from the global variables, use app.update_globals(globals(), False). See the globals page for more information. \n Using the globals parameter: \n \n\n\n\nUsing the update_globals method: \n \n\n\n\nUsing the update_globals method excluding enums from global variables: \n \n\n\n\nLaunch GUI\n\nAvailable in v0.11.8 and later\n\nThe launch_gui() function graphically launches the current state of the embedded instance when the App has been saved. \n The launch_gui() function saves the active .mechdb file and creates a copy of the existing .mechdb file with a temporary name. The temporary .mechdb file is used to launch the GUI. By default, the temporary .mechdb file is deleted after the GUI is closed, but the user can specify whether or not to delete the temporary file. \n Usage: \n\n\n\nAutocomplete settings command\n\nAvailable in v0.11.8 and later\n\nThe ansys-mechanical-ideconfig command prints the settings that are necessary for autocomplete to work with ansys-mechanical-stubs. This command takes in three arguments: --ide vscode, --target user or --target workspace, and --revision <version>. If the revision is not provided, ansys-tools-path will retrieve the Mechanical version from your system. \n Usage: \n\n\n\nTerminal output for Windows user's settings.json file: \n\n\n\nVisualize geometry in 3D\n\nAvailable in v0.11.4 and later\n\nThe app.plot() function allows you to visualize imported geometry in 3D. This feature is available only from 24R1 or later and requires the ansys-mechanical-core[graphics] dependencies to be installed: \n \n\n\n\nUsage: \n\n\n\nPrint the Mechanical project tree\n\nAvailable in v0.11.1 and later\n\nThe app.print_tree() function prints the hierarchical tree representation of the Mechanical project structure and object state. \n Usage: \n\n\n\nOutput for app.print_tree(): \n\n"},{"objectID":"Release notes","href":"changelog.html#01133---september-18-2025","title":"Release notes > 0.11.33 - September 18, 2025","text":"0.11.33 - September 18, 2025\n\nAdded\n\n\n\n\n\nModify installation of python inside container\n\n#1312\n\nAdd new example\n\n#1314\n\nFixed\n\n\n\n\n\nUpdate ansys-sphinx-theme version\n\n#1310\n\nDocumentation\n\n\n\n\n\nUpdate html_context with PyAnsys tags\n\n#1291\n\nAdd user guide section\n\n#1292\n\nUpdate contribute section\n\n#1293\n\nAddress vale warnings\n\n#1299\n\nAdd pep8 in whatsnew\n\n#1306\n\nFix reference\n\n#1318\n\nMaintenance\n\n\n\n\n\nUpdate CHANGELOG for v0.11.32\n\n#1289\n\nBuild cheat sheet condition\n\n#1290\n\nBump the doc group across 1 directory with 2 updates\n\n#1294\n\nBump matplotlib from 3.10.5 to 3.10.6 in the doc group\n\n#1296\n\nBump the tests group with 2 updates\n\n#1301\n\nBump actions/setup-python from 5 to 6\n\n#1302\n\nBump actions/labeler from 5 to 6\n\n#1303\n\nBump pypa/gh-action-pypi-publish from 1.12.4 to 1.13.0 in the actions group\n\n#1304\n\nPre-commit automatic update\n\n#1305\n\nUpdate actions with commit sha\n\n#1309\n\nBump sphinx-click from 6.0.0 to 6.1.0 in the doc group\n\n#1316\n\nBump pytest-cov from 6.3.0 to 7.0.0\n\n#1317"},{"objectID":"Release notes","href":"changelog.html#01132---august-26-2025","title":"Release notes > 0.11.32 - August 26, 2025","text":"0.11.32 - August 26, 2025\n\nDocumentation\n\n\n\n\n\nUpdate docstring\n\n#1282\n\nMaintenance\n\n\n\n\n\nUpdate CHANGELOG for v0.11.31\n\n#1281\n\nPre-commit automatic update\n\n#1283\n\nUpdate the build backend\n\n#1285\n\nMove mechanical-env script to PyMechanical\n\n#1286\n\nIncrease timeout for tests\n\n#1288"},{"objectID":"Release notes","href":"changelog.html#01131---august-15-2025","title":"Release notes > 0.11.31 - August 15, 2025","text":"0.11.31 - August 15, 2025\n\nAdded\n\n\n\n\n\nAdd license_manager\n\n#1118\n\nNew python script option\n\n#1256\n\nFixed\n\n\n\n\n\nUpdate windows store python workaround\n\n#1278\n\nMaintenance\n\n\n\n\n\nUpdate CHANGELOG for v0.11.30\n\n#1272\n\nPre-commit automatic update\n\n#1274\n\nBump actions/checkout from 4 to 5\n\n#1275\n\nBump actions/download-artifact from 4 to 5\n\n#1276"},{"objectID":"Release notes","href":"changelog.html#01130---august-08-2025","title":"Release notes > 0.11.30 - August 08, 2025","text":"0.11.30 - August 08, 2025\n\nAdded\n\n\n\n\n\nAdd plot option for mesh\n\n#1268\n\nUse new API for mesh oriented transform\n\n#1270\n\nFixed\n\n\n\n\n\nUpdate release action\n\n#1271\n\nMaintenance\n\n\n\n\n\nUpdate CHANGELOG for v0.11.29\n\n#1269"},{"objectID":"Release notes","href":"changelog.html#01129---august-06-2025","title":"Release notes > 0.11.29 - August 06, 2025","text":"0.11.29 - August 06, 2025\n\nFixed\n\n\n\n\n\nInvert clr lite host flag for dev version\n\n#1254\n\nRemove workaround for Documents folder\n\n#1259\n\nUpdate latest release action\n\n#1267\n\nDocumentation\n\n\n\n\n\nRefactor examples\n\n#1260\n\nMaintenance\n\n\n\n\n\nUpdate changelog for v0.11.28\n\n#1252\n\nRemove support of version 23r2\n\n#1255\n\nUpdate codacy ignore file\n\n#1261\n\nBump usd-core from 25.5.1 to 25.8\n\n#1265\n\nBump ansys-api-mechanical from 0.1.2 to 0.1.3 in the core group\n\n#1266"},{"objectID":"Release notes","href":"changelog.html#01128---july-23-2025","title":"Release notes > 0.11.28 - July 23, 2025","text":"0.11.28 - July 23, 2025\n\nAdded\n\n\n\n\n\nAdd lock option removal for save_as method\n\n#1233\n\nAdd stale issue label\n\n#1246\n\nDocumentation\n\n\n\n\n\nAdd pep8 aliases documentation\n\n#1249\n\nMaintenance\n\n\n\n\n\nUpdate changelog for v0.11.27\n\n#1245\n\nMinor fixes on dropping 23r2 support\n\n#1247"},{"objectID":"Release notes","href":"changelog.html#01127---july-21-2025","title":"Release notes > 0.11.27 - July 21, 2025","text":"0.11.27 - July 21, 2025\n\nAdded\n\n\n\n\n\nAdd option for pep8 aliases in binding\n\n#1234\n\nFixed\n\n\n\n\n\nAdd important section to script helpers page for clarification\n\n#1232\n\nWorkaround 261 bug requiring documents folder\n\n#1235\n\nCreate document folder  under  home\n\n#1242\n\nDocumentation\n\n\n\n\n\nUpdate main product version\n\n#1241\n\nUpdate contributors.md with the latest contributors\n\n#1243\n\nMaintenance\n\n\n\n\n\nPre-commit automatic update\n\n#1228\n\nUpdate changelog for v0.11.26\n\n#1229\n\nUpdate ci/cd to use 25r2\n\n#1237\n\nUpdate docker files\n\n#1238\n\nUpdate stable version to  25r2\n\n#1240"},{"objectID":"Release notes","href":"changelog.html#01126---july-08-2025","title":"Release notes > 0.11.26 - July 08, 2025","text":"0.11.26 - July 08, 2025\n\nDocumentation\n\n\n\n\n\nAdd page with script helpers\n\n#1214\n\nMaintenance\n\n\n\n\n\nUpdate changelog for v0.11.24\n\n#1218\n\nAdd security file\n\n#1219\n\nBump ansys-mechanical-env from 0.1.14 to 0.1.15 in the core group\n\n#1221\n\nUpdate changelog for v0.11.25\n\n#1224"},{"objectID":"Release notes","href":"changelog.html#01125---july-03-2025","title":"Release notes > 0.11.25 - July 03, 2025","text":"0.11.25 - July 03, 2025\n\nFixed\n\n\n\n\n\nRemove duplication of metatag\n\n#1223"},{"objectID":"Release notes","href":"changelog.html#01124---june-30-2025","title":"Release notes > 0.11.24 - June 30, 2025","text":"0.11.24 - June 30, 2025\n\nFixed\n\n\n\n\n\nMeta tag order in doc\n\n#1217\n\nMaintenance\n\n\n\n\n\nUpdate changelog for v0.11.23\n\n#1215"},{"objectID":"Release notes","href":"changelog.html#01123---june-30-2025","title":"Release notes > 0.11.23 - June 30, 2025","text":"0.11.23 - June 30, 2025\n\nFixed\n\n\n\n\n\nMetatag order\n\n#1213\n\nMaintenance\n\n\n\n\n\nUpdate changelog for v0.11.22\n\n#1211"},{"objectID":"Release notes","href":"changelog.html#01122---june-26-2025","title":"Release notes > 0.11.22 - June 26, 2025","text":"0.11.22 - June 26, 2025\n\nFixed\n\n\n\n\n\nAdd more versions to lite host\n\n#1208\n\nChange the name of the warnings.py file in embedding\n\n#1209\n\nMaintenance\n\n\n\n\n\nUpdate changelog for v0.11.21\n\n#1206"},{"objectID":"Release notes","href":"changelog.html#01121---june-24-2025","title":"Release notes > 0.11.21 - June 24, 2025","text":"0.11.21 - June 24, 2025\n\nDocumentation\n\n\n\n\n\nUpdate the meta tag typo\n\n#1204\n\nMaintenance\n\n\n\n\n\nUpdate doc dependencies\n\n#1199\n\nUpdate changelog for v0.11.20\n\n#1201\n\nPre-commit automatic update\n\n#1202\n\nBump pytest from 8.4.0 to 8.4.1 in the tests group\n\n#1203"},{"objectID":"Release notes","href":"changelog.html#01120---june-23-2025","title":"Release notes > 0.11.20 - June 23, 2025","text":"0.11.20 - June 23, 2025\n\nFixed\n\n\n\n\n\nConsider multiple site-packages folders\n\n#1187\n\nUse the version number if the release name is not found\n\n#1191\n\nDocumentation\n\n\n\n\n\nAdd physics meta tag\n\n#1196\n\nUpdate launch_mechanical api usage examples\n\n#1197\n\nMaintenance\n\n\n\n\n\nupdate CHANGELOG for v0.11.18\n\n#1179\n\nBump grpcio from 1.70.0 to 1.72.1 in the core group\n\n#1180\n\nBump pytest from 8.3.5 to 8.4.0 in the tests group\n\n#1181\n\nBump the doc group with 2 updates\n\n#1182\n\nBump ansys/actions from 9 to 10\n\n#1185\n\nBump pandas from 2.2.3 to 2.3.0 in the doc group\n\n#1186\n\nUpdate docker image version for nightly run\n\n#1188\n\nBump pytest-cov from 6.1.1 to 6.2.1 in the tests group\n\n#1192\n\nBump the core group with 2 updates\n\n#1193\n\nBump panel from 1.6.1 to 1.7.1 in the doc group\n\n#1194\n\nIncrease timeout for pytests in ci/cd\n\n#1198\n\nUpload docs using the bot’s token\n\n#1200"},{"objectID":"Release notes","href":"changelog.html#01118---june-01-2025","title":"Release notes > 0.11.18 - June 01, 2025","text":"0.11.18 - June 01, 2025\n\nMaintenance\n\n\n\n\n\nupdate CHANGELOG for v0.11.17\n\n#1177\n\nUpdate the branch name to main\n\n#1178"},{"objectID":"Release notes","href":"changelog.html#01117---may-28-2025","title":"Release notes > 0.11.17 - May 28, 2025","text":"0.11.17 - May 28, 2025\n\nFixed\n\n\n\n\n\nAdd self._messages to BUILDING_GALLERY section in app initialization\n\n#1171\n\nEmbedding message get test\n\n#1174\n\nMaintenance\n\n\n\n\n\nupdate CHANGELOG for v0.11.15\n\n#1161\n\nupdate CHANGELOG for v0.11.16\n\n#1163\n\nBump the doc group across 1 directory with 3 updates\n\n#1169\n\nBump plotly from 6.0.1 to 6.1.1 in the doc group\n\n#1175\n\nBump usd-core from 25.5 to 25.5.1\n\n#1176"},{"objectID":"Release notes","href":"changelog.html#01116---may-09-2025","title":"Release notes > 0.11.16 - May 09, 2025","text":"0.11.16 - May 09, 2025\n\nFixed\n\n\n\n\n\nAdd token for release to github ansys/actions v9\n\n#1162"},{"objectID":"Release notes","href":"changelog.html#01115---may-09-2025","title":"Release notes > 0.11.15 - May 09, 2025","text":"0.11.15 - May 09, 2025\n\nAdded\n\n\n\n\n\nRpc bg switch\n\n#1122\n\nFixed\n\n\n\n\n\nAdd option on rpc server for accepting multiple services\n\n#1074\n\nMinor code issues\n\n#1114\n\nAdd exception to the enum importer file if the app isn’t initialized\n\n#1131\n\nmessage string changes in 2025 R2\n\n#1149\n\nImprove windows tests\n\n#1151\n\nAppdata test maintenance and pyvista deprecation warning\n\n#1152\n\nadd workaround for windows store\n\n#1153\n\nInstall libjbig-dev for quarto build to succeed in 252 documentation build\n\n#1154\n\nUpdate globals when BUILDING_GALLERY is True\n\n#1155\n\nDocumentation\n\n\n\n\n\nadd cheatsheet env and update theme\n\n#1129\n\nUpdate CONTRIBUTORS.md with the latest contributors\n\n#1137\n\nMaintenance\n\n\n\n\n\nAdd solution status assert in example\n\n#1106\n\nupdate CHANGELOG for v0.11.14\n\n#1109\n\nBump the tests group with 2 updates\n\n#1110\n\nBump the doc group with 2 updates\n\n#1111\n\npre-commit automatic update\n\n#1112, #1119, #1135\n\nBump the doc group with 3 updates\n\n#1127\n\nBump usd-core from 24.11 to 25.2\n\n#1128\n\nChange viz to graphics\n\n#1133\n\nBump ansys-sphinx-theme[autoapi,changelog] from 1.4.1 to 1.4.2 in the doc group\n\n#1134\n\nBump pytest-cov from 6.0.0 to 6.1.1 in the tests group\n\n#1138\n\nBump ansys/actions from 8 to 9\n\n#1141\n\nBump ansys-mechanical-env from 0.1.9 to 0.1.11 in the core group\n\n#1142\n\nBump numpy from 2.2.4 to 2.2.5 in the doc group\n\n#1147\n\nBump rpyc from 6.0.1 to 6.0.2\n\n#1148\n\nupdate to latest mechanical-env\n\n#1150\n\nBump usd-core from 25.2 to 25.5\n\n#1157\n\nTest\n\n\n\n\n\nenable poster test\n\n#1117\n\nadd test case for analytics capture\n\n#1156"},{"objectID":"Release notes","href":"changelog.html#01114---2025-03-03","title":"Release notes > 0.11.14 - 2025-03-03","text":"0.11.14 - 2025-03-03"},{"objectID":"Release notes","href":"changelog.html#added","title":"Release notes > Added","text":"Added\n\nadd globals kwarg to app and adjust ideconfig behavior #1017\n\nAdd a Message Manager for App #1068\n\nadd logging for app #1091\n\nAdd rpyc option in launch_mechanical #1101"},{"objectID":"Release notes","href":"changelog.html#fixed","title":"Release notes > Fixed","text":"Fixed\n\nEmedding rpc server shutdown #1088\n\nRemove unnecessary prints from embedding rpc #1090"},{"objectID":"Release notes","href":"changelog.html#documentation","title":"Release notes > Documentation","text":"Documentation\n\nAdd “what’s new” fragment for the globals parameter in App #1096\n\nFix typo for remote session documentation. #1098\n\nUpdate documentation for Mechanical container. #1099\n\nAdjust globals documentation #1100"},{"objectID":"Release notes","href":"changelog.html#maintenance","title":"Release notes > Maintenance","text":"Maintenance\n\nIntegrate uv in CI/CD #1085\n\nupdate CHANGELOG for v0.11.13 #1087\n\nBump the doc group with 3 updates #1093, #1103\n\nBump psutil from 6.1.1 to 7.0.0 #1094\n\npre-commit automatic update #1095, #1102\n\nChange main python version in CI/CD #1104\n\nUpload coverage to codacy #1105\n\nDisable rpc tests #1107"},{"objectID":"Release notes","href":"changelog.html#01113---2025-02-07","title":"Release notes > 0.11.13 - 2025-02-07","text":"0.11.13 - 2025-02-07"},{"objectID":"Release notes","href":"changelog.html#added","title":"Release notes > Added","text":"Added\n\nAdd CPython feature flag for ansys-mechanical  cli #1049\n\nRpyc integration #1055\n\nAdd “what’s new” sections to changelog #1057\n\nCreate option for PyPIM to be installed separately #1060"},{"objectID":"Release notes","href":"changelog.html#fixed","title":"Release notes > Fixed","text":"Fixed\n\nAdd explicit interface support #1058\n\nDisable app poster test #1072"},{"objectID":"Release notes","href":"changelog.html#documentation","title":"Release notes > Documentation","text":"Documentation\n\nClarify support guidelines #1061"},{"objectID":"Release notes","href":"changelog.html#maintenance","title":"Release notes > Maintenance","text":"Maintenance\n\nupdate CHANGELOG for v0.11.12 #1050\n\nBump the doc group with 4 updates #1054\n\npre-commit automatic update #1056, #1067, #1081\n\nRaise error if Ansys has no attribute Mechanical #1062\n\nBump grpcio from 1.69.0 to 1.70.0 in the core group #1063\n\nBump panel from 1.5.5 to 1.6.0 in the doc group #1064\n\nUpgrade ansys-pythonnet version #1066\n\nAdd gitattributes and renormalize files #1069\n\nBump sphinx-notfound-page from 1.0.4 to 1.1.0 in the doc group #1079\n\nBump plotly from 5.24.1 to 6.0.0 #1080\n\nUpgrade ansys-sphinx-theme #1082\n\nupdate clr loader version #1083"},{"objectID":"Release notes","href":"changelog.html#test","title":"Release notes > Test","text":"Test\n\nupdate poster test #1065"},{"objectID":"Release notes","href":"changelog.html#01112---2025-01-16","title":"Release notes > 0.11.12 - 2025-01-16","text":"0.11.12 - 2025-01-16"},{"objectID":"Release notes","href":"changelog.html#added","title":"Release notes > Added","text":"Added\n\nUpdate enum and globals #1037\n\nadd poster method that raises an exception #1038\n\ndocker and ci/cd change for 25R1 #1042"},{"objectID":"Release notes","href":"changelog.html#maintenance","title":"Release notes > Maintenance","text":"Maintenance\n\nupdate CHANGELOG for v0.11.11 #1031\n\nBump the doc group with 2 updates #1036\n\npre-commit automatic update #1039\n\nBump ansys-mechanical-stubs from 0.1.5 to 0.1.6 #1044\n\nUpdate default product version to 25R1 #1045\n\nBump ansys-mechanical-env version from 0.1.8 to  0.1.9 #1048"},{"objectID":"Release notes","href":"changelog.html#01111---2025-01-08","title":"Release notes > 0.11.11 - 2025-01-08","text":"0.11.11 - 2025-01-08"},{"objectID":"Release notes","href":"changelog.html#added","title":"Release notes > Added","text":"Added\n\nAdd tests for transaction #985\n\nUpdate private app data creation and add tests #986\n\nUpdate docstring and App.save_as() #1001\n\nUpdate object state for print_tree() #1005\n\nOption to ignore lock file on open #1007\n\nAdd project directory property #1022"},{"objectID":"Release notes","href":"changelog.html#fixed","title":"Release notes > Fixed","text":"Fixed\n\nProcess return code #1026, #1029\n\nBackground App initialization #1030"},{"objectID":"Release notes","href":"changelog.html#miscellaneous","title":"Release notes > Miscellaneous","text":"Miscellaneous\n\nRemove f-string without placeholders and specify exception type. #1011"},{"objectID":"Release notes","href":"changelog.html#documentation","title":"Release notes > Documentation","text":"Documentation\n\nUpdate docs with new api #1000"},{"objectID":"Release notes","href":"changelog.html#maintenance","title":"Release notes > Maintenance","text":"Maintenance\n\nBump codecov/codecov-action from 4 to 5 #983\n\nupdate CHANGELOG for v0.11.10 #984\n\nBump ansys-sphinx-theme[autoapi] from 1.2.1 to 1.2.2 in the doc group #988\n\nBump grpcio from 1.68.0 to 1.68.1 in the core group #990\n\nBump pytest from 8.3.3 to 8.3.4 in the tests group #991\n\nBump the doc group with 2 updates #992, #999\n\npre-commit automatic update #993\n\nSupport python 3.13 #997\n\nBump clr-loader from 0.2.6 to 0.2.7.post0 in the core group #1003\n\nBump matplotlib from 3.9.3 to 3.10.0 in the doc group #1004\n\nBump the doc group with 3 updates #1008\n\nBump psutil from 6.1.0 to 6.1.1 #1009\n\nUpdate license headers for 2025 #1014\n\nBump ansys-mechanical-stubs to 0.1.5 and add typehint to DataModel #1015\n\nFollow pythonic standard for comparison to None. #1016\n\nBump grpcio from 1.68.1 to 1.69.0 in the core group #1020\n\nBump sphinx-autodoc-typehints from 2.5.0 to 3.0.0 #1021\n\nUpdate ngihtly for pre-release version #1023"},{"objectID":"Release notes","href":"changelog.html#01110---2024-11-18","title":"Release notes > 0.11.10 - 2024-11-18","text":"0.11.10 - 2024-11-18"},{"objectID":"Release notes","href":"changelog.html#added","title":"Release notes > Added","text":"Added\n\nVersion input type check #979\n\nAdding new method for connecting to Mechanical instance #980"},{"objectID":"Release notes","href":"changelog.html#fixed","title":"Release notes > Fixed","text":"Fixed\n\nUpdate embedding script tests #974"},{"objectID":"Release notes","href":"changelog.html#documentation","title":"Release notes > Documentation","text":"Documentation\n\nadd Mechanical API link to Mechanical Scripting page #972"},{"objectID":"Release notes","href":"changelog.html#maintenance","title":"Release notes > Maintenance","text":"Maintenance\n\nupdate CHANGELOG for v0.11.9 #963\n\nModify how job success is verified for CI/CD #965\n\nBump mikepenz/action-junit-report from 4 to 5 #966\n\nBump grpcio from 1.67.0 to 1.67.1 in the core group #967\n\nBump the doc group with 2 updates #968, #982\n\nBump pytest-cov from 5.0.0 to 6.0.0 #969\n\nUpdate docs build action container #971\n\npre-commit automatic update #977\n\nBump grpcio from 1.67.1 to 1.68.0 in the core group #981"},{"objectID":"Release notes","href":"changelog.html#0119---2024-10-29","title":"Release notes > 0.11.9 - 2024-10-29","text":"0.11.9 - 2024-10-29"},{"objectID":"Release notes","href":"changelog.html#added","title":"Release notes > Added","text":"Added\n\nadd ansys-mechanical-stubs as a dependency #948\n\nAdd overwrite option for App.save_as() #951\n\nadd typehints to ExtAPI, Tree, and Graphics #957"},{"objectID":"Release notes","href":"changelog.html#fixed","title":"Release notes > Fixed","text":"Fixed\n\nbandit warnings #950\n\nstubs CLI test #952"},{"objectID":"Release notes","href":"changelog.html#maintenance","title":"Release notes > Maintenance","text":"Maintenance\n\nupdate CHANGELOG for v0.11.8 #946\n\ncode maintenance #947, #949\n\nBump the core group with 2 updates #953\n\nBump ansys-sphinx-theme[autoapi] from 1.1.4 to 1.1.6 in the doc group #954\n\nBump psutil from 6.0.0 to 6.1.0 #955\n\nbump ansys-mechanical-stubs to v0.1.4 #956\n\nBump the doc group with 2 updates #960\n\nBump usd-core from 24.8 to 24.11 #961\n\npre-commit automatic update #962"},{"objectID":"Release notes","href":"changelog.html#0118---2024-10-15","title":"Release notes > 0.11.8 - 2024-10-15","text":"0.11.8 - 2024-10-15"},{"objectID":"Release notes","href":"changelog.html#added","title":"Release notes > Added","text":"Added\n\nlaunch_gui command #882\n\nAdd method to execute script from file for embedding #902\n\nadd warning for x11 loaded before init on 25.1+ #909\n\nansys-mechanical-ideconfig command #935\n\nAutomatically update pre-commit ci PR with prefix #936"},{"objectID":"Release notes","href":"changelog.html#fixed","title":"Release notes > Fixed","text":"Fixed\n\nUpdate execute_script method #894\n\nAdapting braking change for upload action #895\n\nRemove Python class reference. #901\n\ndocumentation links #911\n\nThrow value error for unsupported version of Mechanical #917\n\nUse “lite” CLR host on windows for 251+ #920\n\nupdate AUTHORS file #929\n\nWarning for multiple version #942"},{"objectID":"Release notes","href":"changelog.html#miscellaneous","title":"Release notes > Miscellaneous","text":"Miscellaneous\n\nuse embedding clr host in version 251 #926"},{"objectID":"Release notes","href":"changelog.html#documentation","title":"Release notes > Documentation","text":"Documentation\n\nremove thispagetitle metatag #897"},{"objectID":"Release notes","href":"changelog.html#maintenance","title":"Release notes > Maintenance","text":"Maintenance\n\nAdd vulnerability check #709\n\nupdate CHANGELOG for v0.11.7 #889\n\nBump grpcio from 1.66.0 to 1.66.1 in the core group #891\n\nBump the doc group with 2 updates #892\n\nBump pytest-print from 1.0.0 to 1.0.1 in the tests group #898\n\nBump the doc group with 4 updates #899, #907, #916\n\nDrop python 3.9 #904\n\nBump pytest from 8.3.2 to 8.3.3 in the tests group #906\n\nRemove unnecessary dependencies #908\n\nBump ansys-mechanical-env from 0.1.7 to 0.1.8 in the core group #914\n\nBump pytest-print from 1.0.1 to 1.0.2 in the tests group #915\n\nBump grpcio from 1.66.1 to 1.66.2 in the core group #922\n\nBump panel from 1.5.0 to 1.5.1 in the doc group #923\n\nUse static search #927\n\nBump the doc group with 5 updates #933, #943\n\npre-commit autoupdate #934\n\nCode maintenance #937\n\npre-commit automatic update #944"},{"objectID":"Release notes","href":"changelog.html#0117---2024-08-29","title":"Release notes > 0.11.7 - 2024-08-29","text":"0.11.7 - 2024-08-29"},{"objectID":"Release notes","href":"changelog.html#documentation","title":"Release notes > Documentation","text":"Documentation\n\nFix doc layout #888"},{"objectID":"Release notes","href":"changelog.html#maintenance","title":"Release notes > Maintenance","text":"Maintenance\n\nupdate CHANGELOG for v0.11.6 #887"},{"objectID":"Release notes","href":"changelog.html#0116---2024-08-28","title":"Release notes > 0.11.6 - 2024-08-28","text":"0.11.6 - 2024-08-28"},{"objectID":"Release notes","href":"changelog.html#documentation","title":"Release notes > Documentation","text":"Documentation\n\nRefactor #878\n\nMinor changes #885"},{"objectID":"Release notes","href":"changelog.html#maintenance","title":"Release notes > Maintenance","text":"Maintenance\n\nupdate CHANGELOG for v0.11.5 #872\n\nBump grpcio from 1.65.4 to 1.65.5 in the core group #875\n\nBump the doc group with 4 updates #876\n\nBump grpcio from 1.65.5 to 1.66.0 in the core group #880\n\nBump ansys-sphinx-theme[autoapi] from 1.0.5 to 1.0.7 in the doc group #881\n\n[pre-commit.ci] pre-commit autoupdate #884"},{"objectID":"Release notes","href":"changelog.html#0115---2024-08-13","title":"Release notes > 0.11.5 - 2024-08-13","text":"0.11.5 - 2024-08-13"},{"objectID":"Release notes","href":"changelog.html#added","title":"Release notes > Added","text":"Added\n\nFEAT: Update cheat sheet with quarto #845\n\nFeat: add a layer to load into an existing stage #857"},{"objectID":"Release notes","href":"changelog.html#fixed","title":"Release notes > Fixed","text":"Fixed\n\nRefactor usd export #858\n\nFIX: App plot None check #860"},{"objectID":"Release notes","href":"changelog.html#documentation","title":"Release notes > Documentation","text":"Documentation\n\nchore: update CHANGELOG for v0.11.4 #856\n\nMAINT: Cheat sheet #871"},{"objectID":"Release notes","href":"changelog.html#dependencies","title":"Release notes > Dependencies","text":"Dependencies\n\nMAINT: update ansys-sphinx-theme #863\n\nMAINT: Bump the doc group across 1 directory with 4 updates #866\n\nMAINT: Bump ansys/actions from 6 to 7 #868\n\nMAINT: Bump matplotlib from 3.9.1 to 3.9.1.post1 #869\n\n[pre-commit.ci] pre-commit autoupdate #870"},{"objectID":"Release notes","href":"changelog.html#0114---2024-08-06","title":"Release notes > 0.11.4 - 2024-08-06","text":"0.11.4 - 2024-08-06"},{"objectID":"Release notes","href":"changelog.html#added","title":"Release notes > Added","text":"Added\n\nDOC: Update known issues and limitations #829\n\nFeat: Add option for generating docs without examples #830\n\nFeat: Integrate ansys visualization tool #846"},{"objectID":"Release notes","href":"changelog.html#changed","title":"Release notes > Changed","text":"Changed\n\nchore: update CHANGELOG for v0.11.3 #824\n\nMaint: Update new labels #836\n\nMAINT: Update shims.material_import #837\n\n[pre-commit.ci] pre-commit autoupdate #844"},{"objectID":"Release notes","href":"changelog.html#fixed","title":"Release notes > Fixed","text":"Fixed\n\nMaint: Update qk_07 test #833\n\nMaint: Update qk07 #848\n\nuse “OnWorkbenchReady” to update globals #854\n\nfix: underline issue with changelog.rst section generation #855"},{"objectID":"Release notes","href":"changelog.html#dependencies","title":"Release notes > Dependencies","text":"Dependencies\n\nMAINT: Bump grpcio from 1.64.1 to 1.65.1 in the core group #826\n\nMAINT: Bump pytest from 8.2.2 to 8.3.1 in the tests group #827\n\nMAINT: Bump the doc group with 4 updates #828\n\nMAINT: Bump pytest from 8.3.1 to 8.3.2 in the tests group #838\n\nMAINT: Bump plotly from 5.22.0 to 5.23.0 in the doc group #839\n\nMAINT: Bump usd-core from 24.3 to 24.8 #841\n\nMAINT: Bump sphinxcontrib-websupport from 1.2.7 to 2.0.0 #842"},{"objectID":"Release notes","href":"changelog.html#miscellaneous","title":"Release notes > Miscellaneous","text":"Miscellaneous\n\nDOC: Add documentation for launch_mechanical #831"},{"objectID":"Release notes","href":"changelog.html#documentation","title":"Release notes > Documentation","text":"Documentation\n\nadd background app class #849\n\nMAINT: Bump grpcio from 1.65.1 to 1.65.4 in the core group #850\n\nMaint: Update qk5 #852\n\n[pre-commit.ci] pre-commit autoupdate #853"},{"objectID":"Release notes","href":"changelog.html#0113---2024-07-19","title":"Release notes > 0.11.3 - 2024-07-19","text":"0.11.3 - 2024-07-19"},{"objectID":"Release notes","href":"changelog.html#changed","title":"Release notes > Changed","text":"Changed\n\nMAINT: Updates for 242 #822\n\nchore: update CHANGELOG for v0.11.2 #823"},{"objectID":"Release notes","href":"changelog.html#0112---2024-07-19","title":"Release notes > 0.11.2 - 2024-07-19","text":"0.11.2 - 2024-07-19"},{"objectID":"Release notes","href":"changelog.html#added","title":"Release notes > Added","text":"Added\n\nFEAT: Add known issues and limitation section #760\n\nFEAT: Add test for building gallery #787\n\nFEAT: Add graphics and globals #790\n\nfeat: add –script-args argument to ansys-mechanical #802\n\nFEAT: Update print_tree method #804"},{"objectID":"Release notes","href":"changelog.html#changed","title":"Release notes > Changed","text":"Changed\n\nchore: update CHANGELOG for v0.11.1 #786\n\n[pre-commit.ci] pre-commit autoupdate #789, #801, #819\n\nMAINT: Update nightly runs for 251 #803\n\nMAINT: Refactor CICD #806\n\nMAINT: Update for 24R2 #810\n\nMAINT: update for docker files 24R2 #811\n\nUpdate ACT API Reference Guide link #815"},{"objectID":"Release notes","href":"changelog.html#fixed","title":"Release notes > Fixed","text":"Fixed\n\nFix sentence in architecture file #800"},{"objectID":"Release notes","href":"changelog.html#dependencies","title":"Release notes > Dependencies","text":"Dependencies\n\nMAINT: Bump numpy from 1.26.4 to 2.0.0 #773\n\nMAINT: Bump the doc group with 4 updates #788\n\nMAINT: Bump the doc group with 2 updates #805\n\nMAINT: Update dev version of pymechanical #814\n\nMAINT: Bump sphinx from 7.3.7 to 7.4.4 in the doc group #818\n\nMAINT: Update pymech-env #821"},{"objectID":"Release notes","href":"changelog.html#miscellaneous","title":"Release notes > Miscellaneous","text":"Miscellaneous\n\ndocs: update architecture.rst #796\n\nfix exception when plotting a model with any line bodies #812"},{"objectID":"Release notes","href":"changelog.html#0111---2024-06-21","title":"Release notes > 0.11.1 - 2024-06-21","text":"0.11.1 - 2024-06-21"},{"objectID":"Release notes","href":"changelog.html#added","title":"Release notes > Added","text":"Added\n\nFEAT: Add an App method to print project tree for embedding scenario #779"},{"objectID":"Release notes","href":"changelog.html#changed","title":"Release notes > Changed","text":"Changed\n\nTest specific version #771\n\nchore: update CHANGELOG for v0.11.0 #777\n\nchore: bump add-license-headers version to 0.3.2 #782"},{"objectID":"Release notes","href":"changelog.html#fixed","title":"Release notes > Fixed","text":"Fixed\n\nfix sharing app instances, clarify contract #784"},{"objectID":"Release notes","href":"changelog.html#0110---2024-06-18","title":"Release notes > 0.11.0 - 2024-06-18","text":"0.11.0 - 2024-06-18"},{"objectID":"Release notes","href":"changelog.html#added","title":"Release notes > Added","text":"Added\n\nfeat: raise an exception if port or input script aren’t provided in batch mode #753\n\nfeat: use changelog.rst instead of CHANGELOG.md for release notes #757\n\nDoc: Add embedding api references #758\n\nfeat: implement autoapi #761"},{"objectID":"Release notes","href":"changelog.html#changed","title":"Release notes > Changed","text":"Changed\n\nchore: update CHANGELOG for v0.10.11 #749\n\nMAINT: Delete the apt-get lists after installing packages #750\n\n[pre-commit.ci] pre-commit autoupdate #774"},{"objectID":"Release notes","href":"changelog.html#fixed","title":"Release notes > Fixed","text":"Fixed\n\nFIX: Modify pre-commit hook #763\n\nfix lifetime issue #768\n\nfix pythonnet issue #772\n\nFix: Remove disable sec check #776"},{"objectID":"Release notes","href":"changelog.html#dependencies","title":"Release notes > Dependencies","text":"Dependencies\n\nMAINT: Bump the doc group with 4 updates #751\n\n[pre-commit.ci] pre-commit autoupdate #752\n\nMAINT: Bump the doc group with 3 updates #755\n\nMAINT: Update files as per pyansys standards #762\n\nMAINT: Bump grpcio from 1.64.0 to 1.64.1 in the core group #764\n\nMAINT: Bump pytest from 8.2.1 to 8.2.2 in the tests group #765\n\nMAINT: Bump the doc group with 2 updates #766"},{"objectID":"Release notes","href":"changelog.html#miscellaneous","title":"Release notes > Miscellaneous","text":"Miscellaneous\n\nadd method to update globals #767"},{"objectID":"Release notes","href":"changelog.html#01011---2024-05-23","title":"Release notes > 0.10.11 - 2024-05-23","text":"0.10.11 - 2024-05-23"},{"objectID":"Release notes","href":"changelog.html#version-010","title":"Release notes > Version 0.10","text":"Version 0.10"},{"objectID":"Release notes","href":"changelog.html#added","title":"Release notes > Added","text":"Added\n\nfeat: Add tests for animation exports\n#729\n\nadd feature flags to ansys-mechanical cli\n#735\n\nfeat: Add test for deprecation warning\n#739"},{"objectID":"Release notes","href":"changelog.html#changed","title":"Release notes > Changed","text":"Changed\n\nchore: update CHANGELOG for v0.10.10\n#716\n\nMaint: Display image info\n#717\n\n[pre-commit.ci] pre-commit autoupdate\n#726\n\nset mono trace env vars before loading mono\n#734"},{"objectID":"Release notes","href":"changelog.html#fixed","title":"Release notes > Fixed","text":"Fixed\n\nfix: merging coverage step in ci_cd\n#720\n\nfix: Publish coverage for remote connect\n#721\n\nfix: Restrict protobuf <6\n#722\n\nFix: add return for poster\n#727\n\nfix: cli test are not getting coverage\n#737\n\nfix: adding mechanical libraries\n#740\n\nfeat: Add more coverage on logging\n#744\n\nfix: Display image and build info only for scheduled run\n#746\n\nfix: upload coverage files only for latest stable version on release\nworkflow #748"},{"objectID":"Release notes","href":"changelog.html#dependencies","title":"Release notes > Dependencies","text":"Dependencies\n\nMAINT: Bump pytest from 8.1.1 to 8.2.0 in the tests group\n#724\n\nMAINT: Bump the doc group with 3 updates\n#725,\n#743\n\nMAINT: Bump grpcio from 1.62.2 to 1.63.0 in the core group\n#731\n\nMAINT: Bump the doc group with 2 updates\n#732\n\nMAINT: Bump grpcio from 1.63.0 to 1.64.0 in the core group\n#741\n\nMAINT: Bump pytest from 8.2.0 to 8.2.1 in the tests group\n#742"},{"objectID":"Release notes","href":"changelog.html#miscellaneous","title":"Release notes > Miscellaneous","text":"Miscellaneous\n\nSplit pyvista into two methods and remove the stability workaround\nfor 242 #718\n\nUpdate conf.py\n#723\n\ncatch the mono version warning\n#733"},{"objectID":"Release notes","href":"changelog.html#01010---2024-04-23","title":"Release notes > 0.10.10 - 2024-04-23","text":"0.10.10 - 2024-04-23"},{"objectID":"Release notes","href":"changelog.html#added","title":"Release notes > Added","text":"Added\n\nAdd embedding_scripts marker\n#662\n\nFEAT: Group dependabot alerts\n#666\n\nadd windows library loader util\n#672\n\nFeat: Add reports for remote connect tests\n#690\n\nFeat: Add link check\n#693\n\nFeat: Add app libraries test\n#696\n\nFeat: Update get_mechanical_path\n#707\n\nFeat: mechanical-env check before running embedding\n#708\n\nfeat: set up doc-deploy-changelog action\n#710"},{"objectID":"Release notes","href":"changelog.html#changed","title":"Release notes > Changed","text":"Changed\n\nDoc: fix docs and vale warning\n#656\n\nMaint: post release change log update 10.9\n#665\n\nMaint: Auto approve and merge dependabot PR\n#674\n\n[pre-commit.ci] pre-commit autoupdate\n#691,\n#706\n\nMaint: Add code cov report\n#692\n\nMaint: Modify nightly run\n#712"},{"objectID":"Release notes","href":"changelog.html#fixed","title":"Release notes > Fixed","text":"Fixed\n\nFix: Assign ci bot for dependabot PR\n#677\n\nFix: Add matrix python in embedding test\n#681\n\nFix: Remove warning message test for remote session launch\n#682\n\nfix transformation matrix\n#683\n\nFix: Modify retrieving path of Mechanical in tests\n#688\n\nwork around instability in 2024R1\n#695"},{"objectID":"Release notes","href":"changelog.html#dependencies","title":"Release notes > Dependencies","text":"Dependencies\n\nMAINT: Bump the doc group with 2 updates\n#668,\n#673\n\nMAINT: Bump the doc group with 1 update\n#678\n\nfirst version of 3d visualization with pyvista\n#680\n\nMAINT: Bump the doc group with 3 updates\n#689\n\nadd open-usd exporter\n#701\n\nMAINT: Bump the doc group with 5 updates\n#705,\n#715\n\nMAINT: Bump grpcio from 1.62.1 to 1.62.2 in the core group\n#713\n\nMAINT: Bump ansys/actions from 5 to 6\n#714"},{"objectID":"Release notes","href":"changelog.html#miscellaneous","title":"Release notes > Miscellaneous","text":"Miscellaneous\n\ncleanup #702\n\nupdate graphics based on backend changes\n#711"},{"objectID":"Release notes","href":"changelog.html#0109---2024-03-27","title":"Release notes > 0.10.9 - 2024-03-27","text":"0.10.9 - 2024-03-27"},{"objectID":"Release notes","href":"changelog.html#added","title":"Release notes > Added","text":"Added\n\nBlock 32 bit python for embedding\n#647\n\nAdd usage of cli under embedding\n#650\n\nAdd changelog action\n#653"},{"objectID":"Release notes","href":"changelog.html#fixed","title":"Release notes > Fixed","text":"Fixed\n\nFixed make pdf action in doc build\n#652\n\nUse _run for better i/o in tests\n#655\n\nFix pdf action\n#664"},{"objectID":"Release notes","href":"changelog.html#dependencies","title":"Release notes > Dependencies","text":"Dependencies\n\nBump pytest-cov from 4.1.0 to 5.0.0\n#657\n\nBump ansys-mechanical-env from 0.1.4 to 0.1.5\n#658"},{"objectID":"Release notes","href":"changelog.html#miscellaneous","title":"Release notes > Miscellaneous","text":"Miscellaneous\n\nDOC: Improve documentation for the embedded instances.\n#663"},{"objectID":"Release notes","href":"changelog.html#0108----2024-03-18","title":"Release notes > 0.10.8 -  2024-03-18","text":"0.10.8 -  2024-03-18"},{"objectID":"Release notes","href":"changelog.html#added","title":"Release notes > Added","text":"Added\n\nAdd poster\n(#642)\n\nAdd LS Dyna unit test\n(#584)"},{"objectID":"Release notes","href":"changelog.html#fixed","title":"Release notes > Fixed","text":"Fixed\n\nAdd logo for dark theme\n(#601)\n\nArchitecture doc\n(#612)\n\nPut remote example before embedding example\n(#621)\n\nMinor updates to Architecture doc\n(#618)\n\nAdd MechanicalEnums\n(#626)\n\nUpdate Release action to use Stable version of Mechanical\n(#628)\n\nUpdate nightly run image version\n(#636)\n\nUpdate logo without slash\n(#640)"},{"objectID":"Release notes","href":"changelog.html#changed","title":"Release notes > Changed","text":"Changed\n\nUpdate pre-commit\n(#610)\n\nUpdate vale version to 3.1.0\n(#613)\n\nUpdate timeout for actions\n(#631)\n\nUpdate cheat sheet with ansys-sphinx-theme\n(#638)"},{"objectID":"Release notes","href":"changelog.html#dependencies","title":"Release notes > Dependencies","text":"Dependencies\n\nBump ansys-sphinx-theme from 0.13.4 to 0.14.0\n(#608)\n\nBump plotly from 5.18.0 to 5.20.0\n(#605,\n#644)\n\nBump pypandoc from 1.12 to 1.13\n(#609)\n\nBump pytest from 8.0.0 to 8.1.1\n(#606,\n#623,\n#634)\n\nBump grpcio from 1.60.1 to 1.62.1\n(#620,\n#635)\n\nBump pandas from 2.2.0 to 2.2.1\n(#619)\n\nBump matplotlib from 3.8.2 to 3.8.3\n(#607)\n\nBump ansys-mechanical-env from 0.1.3 to 0.1.4\n(#624)\n\nBump pyvista from 0.43.3 to 0.43.4\n(#643)"},{"objectID":"Release notes","href":"changelog.html#0107---2024-02-13","title":"Release notes > 0.10.7 - 2024-02-13","text":"0.10.7 - 2024-02-13"},{"objectID":"Release notes","href":"changelog.html#added","title":"Release notes > Added","text":"Added\n\nUpload 241 docker files\n(#567)\n\nAdd pre-commit hooks\n(#575)\n\nAdd Automatic version update for Mechanical scripting external links\n(#585)\n\nAdd PyMechanical logo\n(#592)"},{"objectID":"Release notes","href":"changelog.html#changed","title":"Release notes > Changed","text":"Changed\n\nUpdate getting started page\n(#561)\n\nUpdate 232 to 241 in docs, docstrings, examples, and tests\n(#566)\n\nUpdate workflow versions to run 241 and 242\n(#590)"},{"objectID":"Release notes","href":"changelog.html#dependencies","title":"Release notes > Dependencies","text":"Dependencies\n\nBump pyvista from 0.43.1 to 0.43.3\n(#564,\n#598)\n\nBump sphinxcontrib-websupport from 1.2.6 to 1.2.7\n(#562)\n\nBump ansys-sphinx-theme from 0.13.0 to 0.13.4\n(#563,\n#586,\n#596)\n\nBump pandas from 2.1.4 to 2.2.0\n(#571)\n\nBump sphinxemoji from 0.2.0 to 0.3.1\n(#569)\n\nBump tj-actions/changed-files from 41 to 42\n(#572)\n\nBump panel from 1.3.6 to 1.3.8\n(#570,\n#579)\n\nBump peter-evans/create-or-update-comment from 3 to 4\n(#576)\n\nBump pytest from 7.4.4 to 8.0.0\n(#577)\n\nBump sphinx-autodoc-typehints from 1.25.2 to 2.0.0\n(#578,\n#597)\n\nUpdate pre-commit\n(#580,\n#599)\n\nBump ansys.mechanical.env from 0.1.2 to 0.1.3\n(#583)\n\nBump sphinx-autobuild from 2021.3.14 to 2024.2.4\n(#588)\n\nBump pytest-sphinx from 0.5.0 to 0.6.0\n(#587)\n\nBump grpcio from 1.60.0 to 1.60.1\n(#589)\n\nBump numpy from 1.26.3 to 1.26.4\n(#595)\n\nBump imageio from 2.33.1 to 2.34.0\n(#594)\n\nBump mikepenz/action-junit-report from 3 to 4\n(#593)"},{"objectID":"Release notes","href":"changelog.html#0106---2024-01-11","title":"Release notes > 0.10.6 - 2024-01-11","text":"0.10.6 - 2024-01-11"},{"objectID":"Release notes","href":"changelog.html#added","title":"Release notes > Added","text":"Added\n\nAdd release note configuration\n(#512)\n\nAdd 242 to scheduled nightly run\n(#519)\n\nAdd transaction for embedding\n(#542)"},{"objectID":"Release notes","href":"changelog.html#fixed","title":"Release notes > Fixed","text":"Fixed\n\nFix pymeilisearch name typo and favicon\n(#538)\n\nUpdate the gif to reduce the whitespace\n(#540)\n\nUpdate ansys/actions to v5\n(#541)\n\nFix cli find mechanical\n(#550)"},{"objectID":"Release notes","href":"changelog.html#changed","title":"Release notes > Changed","text":"Changed\n\nUpdate LICENSE\n(#548)\n\nUpdate license headers and package versions\n(#556)"},{"objectID":"Release notes","href":"changelog.html#dependencies","title":"Release notes > Dependencies","text":"Dependencies\n\nBump github/codeql-action from 2 to 3\n(#532)\n\nUpdate pre-commit\n(#537,\n#545,\n#553)\n\nBump pyvista from 0.43.0 to 0.43.1\n(#536)\n\nBump panel from 1.3.4 to 1.3.6\n(#535,\n#543)\n\nBump actions/upload-artifact and\nactions/dwonload-artifactfrom 3 to 4\n(#533)\n\nBump jupyter-sphinx from 0.4.0 to 0.5.3\n(#547)\n\nBump tj-actions/changed-files from 40 to 41\n(#544)\n\nBump pytest from 7.4.3 to 7.4.4\n(#546)\n\nBump add-license-headers from 0.2.2 to 0.2.4\n(#549)\n\nBump numpy from 1.26.2 to 1.26.3\n(#551)"},{"objectID":"Release notes","href":"changelog.html#0105---2023-12-15","title":"Release notes > 0.10.5 - 2023-12-15","text":"0.10.5 - 2023-12-15"},{"objectID":"Release notes","href":"changelog.html#added","title":"Release notes > Added","text":"Added\n\nAdd codeql.yml for security checks\n(#423)\n\nadd readonly flag and assertion\n(#441)\n\nAdd PyMeilisearch in documentation\n(#508)\n\nAdd cheetsheat and improve example visibility\n(#506)\n\nAdd mechanical-env to workflow\n(#521)\n\nAdd doc pdf build to workflow\n(#529)"},{"objectID":"Release notes","href":"changelog.html#fixed","title":"Release notes > Fixed","text":"Fixed\n\nFix enum printout\n(#421)\n\nfix appdata tests\n(#425)\n\nRun all embedding tests & fix appdata tests\n(#433)\n\nunset all logging environment variables\n(#434)\n\npytest –ansys-version dependent on existing install\n(#439)\n\nFix app.save method for saving already saved project in current\nsession (#453)\n\nFlexible version for embedding & remote example\n(#459)\n\nFix obsolete API call in embedding test\n(#456)\n\nFix ignored env passing to cli\n(#465\n\nFix private appdata environment variables and folder layout\n(#474)\n\nFix hanging embedding tests\n(#498)\n\nFix ansys-mechanical finding path\n(#516)"},{"objectID":"Release notes","href":"changelog.html#changed","title":"Release notes > Changed","text":"Changed\n\nUpdate pre-commit\n(#528)\n\nUpdate python minimum requirement from 3.8 to 3.9\n(#484)\n\nremove version limit for protobuf\n(#432)\n\nremove legacy configuration test\n(#436)\n\nUpdate examples page\n(#450)\n\nremove unneeded try/except\n(#457)\n\nUpdated wording for revn-variations section\n(#458)\n\nUpdate temporary file creation in test_app\n(#466)\n\nRemove .reuse and LICENSES directories & bump add-license-header\nversion (#496)\n\nReplace workbench_lite with mechanical-env in the docs\n(#522)"},{"objectID":"Release notes","href":"changelog.html#dependencies","title":"Release notes > Dependencies","text":"Dependencies\n\nUpdate pre-commit\n(#431,\n#471,\n#489)\n\nBump numpydoc from 1.5.0 to 1.6.0\n(#428)\n\nBump ansys-sphinx-theme from 0.11.2 to 0.12.5\n(#427,\n#463,\n#480,\n#493)\n\nBump grpcio from 1.58.0 to 1.60.0\n(#429,\n#485,\n#504,\n#527)\n\nBump actions/checkout from 3 to 4\n(#426)\n\nBump pyvista from 0.42.2 to 0.43.0\n(#446,\n#526)\n\nBump ansys-sphinx-theme from 0.12.1 to 0.12.2\n(#447)\n\nBump stefanzweifel/git-auto-commit-action from 4 to 5\n(#448)\n\nBump numpy from 1.26.0 to 1.26.2\n(#464,\n#495)\n\nBump pypandoc from 1.11 to 1.12\n(#470)\n\nBump imageio from 2.31.5 to 2.33.1\n(#469,\n#487,\n#503,\n#524)\n\nBump add-license-headers from v0.1.3 to v0.2.0\n(#472)\n\nBump panel from 1.2.3 to 1.3.4\n(#479,\n#486,\n#510,\n#518)\n\nBump pytest from 7.4.2 to 7.4.3\n(#482)\n\nBump tj-actions/changed-files from 39 to 40\n(#477)\n\nBump plotly from 5.17.0 to 5.18.0\n(#478)\n\nBump pandas from 2.1.1 to 2.1.4\n(#481,\n#494,\n#525)\n\nBump matplotlib from 3.8.0 to 3.8.2\n(#488,\n#502)\n\nBump sphinx-gallery from 0.14.0 to 0.15.0\n(#509)\n\nBump actions/labeler from 4 to 5\n(#517)\n\nBump actions/setup-python from 4 to 5\n(#523)"},{"objectID":"Release notes","href":"changelog.html#0104---2023-10-06","title":"Release notes > 0.10.4 - 2023-10-06","text":"0.10.4 - 2023-10-06"},{"objectID":"Release notes","href":"changelog.html#dependencies","title":"Release notes > Dependencies","text":"Dependencies\n\nUpdate ansys_mechanical_api from 0.1.0 to 0.1.1\n(#444)"},{"objectID":"Release notes","href":"changelog.html#0103---2023-09-26","title":"Release notes > 0.10.3 - 2023-09-26","text":"0.10.3 - 2023-09-26"},{"objectID":"Release notes","href":"changelog.html#added","title":"Release notes > Added","text":"Added\n\nSet up daily run for 241 testing and added manual inputs for workflow\ndispatch (#385)\n\nadd option to include enums in global variables (#394)\n\nadd experimental libraries method (#395)\n\nadd nonblocking sleep (#399)\n\nAdd test case for exporting off screen\nimage(#400)\n\nWarn for obsolete apis (#409)"},{"objectID":"Release notes","href":"changelog.html#fixed","title":"Release notes > Fixed","text":"Fixed\n\nFix embedded testing for all python version in CI/CD\n(#393)\n\nfix broken link (#397)\n\nuse Application.Exit() in 241+ (#396)\n\nFix stale globals by wrapping them (#398)\n\nFix API documentation (#411)\n\ndoc fix (#412)"},{"objectID":"Release notes","href":"changelog.html#dependencies","title":"Release notes > Dependencies","text":"Dependencies\n\nBump sphinx from 7.2.5 to 7.2.6\n(#403)\n\nBump matplotlib from 3.7.2 to 3.8.0\n(#404\n\nBump imageio-ffmpeg from 0.4.8 to 0.4.9\n(#405\n\nBump ansys-sphinx-theme from 0.11.1 to 0.11.2\n(#406)\n\nBump plotly from 5.16.1 to 5.17.0\n(#407)\n\nBump docker/login-action from 2 to 3\n(#408)\n\nBump pyvista from 0.42.1 to 0.42.2\n(#414)"},{"objectID":"Release notes","href":"changelog.html#0102---2023-09-08","title":"Release notes > 0.10.2 - 2023-09-08","text":"0.10.2 - 2023-09-08"},{"objectID":"Release notes","href":"changelog.html#added","title":"Release notes > Added","text":"Added\n\nMax parallel 2 for embedding tests - ci_cd.yml (#341)\n\nNew features for ansys-mechanical console script (#343)\n\nAdd a “Documentation and issues” section to README and doc landing\npage (#347)\n\nDependabot changelog automation (#354)\n\nFollow up of dependabot automated changelog (#359)\n\nAdd license headers to files in src (#373)"},{"objectID":"Release notes","href":"changelog.html#changed","title":"Release notes > Changed","text":"Changed\n\nRemove library-namespace from CI/CD (#342)\n\nBump grpcio from 1.56.2 to 1.57.0 (#349)\n\nBump plotly from 5.15.0 to 5.16.0 (#348)\n\nBump sphinxcontrib-websupport from 1.2.4 to 1.2.6 (#350)\n\nBump ansys-sphinx-theme from 0.10.2 to 0.10.3 (#351)\n\npre-commit autoupdate\n(#362),\n(#380),\n(#391)"},{"objectID":"Release notes","href":"changelog.html#fixed","title":"Release notes > Fixed","text":"Fixed\n\nFix private appdata issue (#344)\n\nFix issues with PyPIM object.inv location (#345)"},{"objectID":"Release notes","href":"changelog.html#dependencies","title":"Release notes > Dependencies","text":"Dependencies\n\nBump plotly from 5.16.0 to 5.16.1\n(#357)\n\nBump sphinx from 7.1.2 to 7.2.5\n(#358,\n#378)\n\nBump sphinx-gallery from 0.13.0 to 0.14.0\n(#361)\n\nBump ansys-sphinx-theme from 0.10.3 to 0.11.1\n(#360,\n#387)\n\nBump pytest-print from 0.3.3 to 1.0.0\n(#369)\n\nBump tj-actions/changed-files from 37 to 39\n(#367,\n#386)\n\nBump imageio from 2.31.1 to 2.31.2\n(#370)\n\nBump pytest from 7.4.0 to 7.4.2\n(#375,\n#389)\n\nBump actions/checkout from 3 to 4\n(#379)\n\nBump imageio from 2.31.2 to 2.31.3\n(#376)\n\nBump sphinx-notfound-page from 1.0.0rc1 to 1.0.0\n(#374)\n\nBump pyvista from 0.42.0 to 0.42.1\n(#388)"},{"objectID":"Release notes","href":"changelog.html#0101---2023-08-08","title":"Release notes > 0.10.1 - 2023-08-08","text":"0.10.1 - 2023-08-08"},{"objectID":"Release notes","href":"changelog.html#changed","title":"Release notes > Changed","text":"Changed\n\nBump ansys-sphinx-theme from 0.10.0 to 0.10.2 (#337)\n\nUpdate clr-loader dependency (#339)"},{"objectID":"Release notes","href":"changelog.html#0100---2023-08-07","title":"Release notes > 0.10.0 - 2023-08-07","text":"0.10.0 - 2023-08-07"},{"objectID":"Release notes","href":"changelog.html#added","title":"Release notes > Added","text":"Added\n\nAdded warning for ansys-mechanical when provided an input script\n(#319)\n\nAdd changelog check to CI/CD (#322)\n\nAdded version check for ansys-mechanical warning message (#323)\n\nAdded TempPathFactory to test_app_save_open (#332)"},{"objectID":"Release notes","href":"changelog.html#changed","title":"Release notes > Changed","text":"Changed\n\nUpdate python minimum requirement from 3.7 to 3.8 (#333)\n\nMinor private appdata updates (#335)"},{"objectID":"Release notes","href":"changelog.html#fixed","title":"Release notes > Fixed","text":"Fixed\n\nBroken links (#316)\n\nRemove project lock file on close (#320)\n\nFixed warning message for ansys-mechanical (#326)"},{"objectID":"Release notes","href":"changelog.html#093---2023-07-27","title":"Release notes > 0.9.3 - 2023-07-27","text":"0.9.3 - 2023-07-27"},{"objectID":"Release notes","href":"changelog.html#version-09","title":"Release notes > Version 0.9","text":"Version 0.9"},{"objectID":"Release notes","href":"changelog.html#added","title":"Release notes > Added","text":"Added\n\nAdd ansys-mechanical console script (#297)\n\naddin configuration and tests (#308)"},{"objectID":"Release notes","href":"changelog.html#changed","title":"Release notes > Changed","text":"Changed\n\nBump matplotlib from 3.7.1 to 3.7.2 (#294)\n\nBump pyvista from 0.40.0 to 0.40.1 (#293)\n\nBump sphinx-autodoc-typehints from 1.23.0 to 1.23.3 (#284)\n\nBump patch version (#292)\n\nRemove pkg-resources and importlib_metadata (#300)\n\nBump grpcio from 1.56.0 to 1.56.2 (#305)\n\nBump pyvista from 0.40.1 to 0.41.1 (#306)"},{"objectID":"Release notes","href":"changelog.html#fixed","title":"Release notes > Fixed","text":"Fixed\n\nUpdate code snippet for accessing project directory. (#295)\n\nAdded import logging to doc file (#299)\n\nFix version variable issue running “ansys-mechanical -r {revn} -g”\n(#302)\n\nUpdate wording in running_mechanical.rst (#303)"},{"objectID":"Release notes","href":"changelog.html#092---2023-07-07","title":"Release notes > 0.9.2 - 2023-07-07","text":"0.9.2 - 2023-07-07"},{"objectID":"Release notes","href":"changelog.html#added","title":"Release notes > Added","text":"Added\n\nAdded private AppData functionality to embedding (#285)"},{"objectID":"Release notes","href":"changelog.html#fixed","title":"Release notes > Fixed","text":"Fixed\n\nUpdated pythonnet warning message (#286)"},{"objectID":"Release notes","href":"changelog.html#changed","title":"Release notes > Changed","text":"Changed\n\nBump pytest from 7.3.2 to 7.4.0 (#282)\n\nBump grpcio from 1.54.2 to 1.56.0 (#283)"},{"objectID":"Release notes","href":"changelog.html#091---2023-06-21","title":"Release notes > 0.9.1 - 2023-06-21","text":"0.9.1 - 2023-06-21"},{"objectID":"Release notes","href":"changelog.html#added","title":"Release notes > Added","text":"Added\n\nAdd version configuration for embedding tests (#270)"},{"objectID":"Release notes","href":"changelog.html#changed","title":"Release notes > Changed","text":"Changed\n\nBump pytest-print from 0.3.1 to 0.3.2 (#273)"},{"objectID":"Release notes","href":"changelog.html#fixed","title":"Release notes > Fixed","text":"Fixed\n\nFIX: Use updated ansys-tools-path to resolve - missing 1 required\npositional argument: ‘exe_loc’ issue (#280)"},{"objectID":"Release notes","href":"changelog.html#090---2023-06-13","title":"Release notes > 0.9.0 - 2023-06-13","text":"0.9.0 - 2023-06-13"},{"objectID":"Release notes","href":"changelog.html#added","title":"Release notes > Added","text":"Added\n\nlink to pymechanical remote sessions examples (#252)\n\nadd doc to run script without embedding (#262)\n\npre-commit autoupdate (#269)"},{"objectID":"Release notes","href":"changelog.html#changed","title":"Release notes > Changed","text":"Changed\n\nBump ansys-sphinx-theme from 0.9.8 to 0.9.9 (#248)\n\nBump grpcio from 1.54.0 to 1.54.2 (#249)\n\nBump sphinx from 6.2.0 to 6.2.1 (#250)\n\nchange image tag in ci/cd (#254)\n\nBump pyvista from 0.39.0 to 0.39.1 (#256)\n\nStandardizing data paths (#257)\n\nBump imageio from 2.28.1 to 2.30.0 (#258)\n\nBump pytest-cov from 4.0.0 to 4.1.0 (#259)\n\nBump imageio from 2.30.0 to 2.31.0 (#264)\n\nBump pytest from 7.3.1 to 7.3.2 (#267)\n\nBump plotly from 5.14.1 to 5.15.0 (#268)"},{"objectID":"Release notes","href":"changelog.html#fixed","title":"Release notes > Fixed","text":"Fixed\n\nFIX: GitHub organization rename to Ansys (#251)\n\nfix examples links (#253)\n\nfix windows pythonnet warning unit tests (#260)"},{"objectID":"Release notes","href":"changelog.html#080---2023-05-12","title":"Release notes > 0.8.0 - 2023-05-12","text":"0.8.0 - 2023-05-12"},{"objectID":"Release notes","href":"changelog.html#version-08","title":"Release notes > Version 0.8","text":"Version 0.8"},{"objectID":"Release notes","href":"changelog.html#added","title":"Release notes > Added","text":"Added\n\nchangelog (#222)\n\nadd link to embedding examples (#228)\n\nAdd close() method to Ansys.Mechanical.Embedding.Application.\nSee (#229)\n\nAdd check if pythonnet exists in the user environment (#235)"},{"objectID":"Release notes","href":"changelog.html#changed","title":"Release notes > Changed","text":"Changed\n\ncleanup docker ignore file (#206)\n\nUpdate contributing.rst (#213)\n\nBump sphinx-autodoc-typehints from 1.22 to 1.23.0 (#215)\n\nBump pytest from 7.3.0 to 7.3.1 (#216)\n\nBump sphinx-gallery from 0.12.2 to 0.13.0 (#217)\n\nBump sphinx-copybutton from 0.5.1 to 0.5.2 (#218)\n\nBump sphinx-design from 0.3.0 to 0.4.1 (#219)\n\nRemove python 3.7 (#230)\n\nUse ansys-tools-path (#231)\n\nBump sphinx from 6.2.0 to 7.0.0 (#232)\n\nBump imageio from 2.28.0 to 2.28.1 (#233)\n\nignore generated .ipynb, .py, .rst, .md5, .png and .pickle\nfiles (#239)\n\nBump pyvista from 0.38.5 to 0.39.0 (#245)"},{"objectID":"Release notes","href":"changelog.html#fixed","title":"Release notes > Fixed","text":"Fixed\n\nFIX: not necessary anymore to update apt-get (#220)\n\nInclude amd folder for mapdl solver in the docker image. (#200)\n\nRemove jscript references from tests/ folder (#205)\n\nFixes the windows executable path for standalone mechanical (#214)\n\nFIX: run_python_script* return empty string for objects that cannot\nbe returned as string (#224)\n\ncall new() in the BUILDING_GALLERY constructor of\nAnsys.Mechanical.Embedding.Application (#229)\n\nfix documentation link (#234)\n\nchanged python doc url to fix doc pipeline error (#236)\n\nDocker dependencies to support topo and smart tests (#237)"},{"objectID":"Release notes","href":"changelog.html#073---2023-04-20","title":"Release notes > 0.7.3 - 2023-04-20","text":"0.7.3 - 2023-04-20"},{"objectID":"Release notes","href":"changelog.html#version-07","title":"Release notes > Version 0.7","text":"Version 0.7"},{"objectID":"Release notes","href":"changelog.html#changed","title":"Release notes > Changed","text":"Changed\n\nReuse instance of embedded application when building example gallery\n(#221)"},{"objectID":"Release notes","href":"changelog.html#072---2023-04-13","title":"Release notes > 0.7.2 - 2023-04-13","text":"0.7.2 - 2023-04-13"},{"objectID":"Release notes","href":"changelog.html#changed","title":"Release notes > Changed","text":"Changed\n\nBump plotly from 5.14.0 to 5.14.1 (#197)\n\nBump pytest from 7.2.2 to 7.3.0 (#196)\n\nBump peter-evans/create-or-update-comment from 2 to 3 (#195)\n\nBump ansys-sphinx-theme from 0.9.6 to 0.9.7 (#198)"},{"objectID":"Release notes","href":"changelog.html#fixed","title":"Release notes > Fixed","text":"Fixed\n\nFixed documentation for updating global variables (#203)\n\nRemove references to unsupported legacy jscript APIs (#205)\n\nClean up docker image (#206, #200)"},{"objectID":"Release notes","href":"changelog.html#071----2023-04-10","title":"Release notes > 0.7.1 -  2023-04-10","text":"0.7.1 -  2023-04-10\n\nFirst public release of PyMechanical\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}]