[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"

[project]
name = "ansys-mechanical-core"
version = "0.12.dev0"
description = "A python wrapper for Ansys Mechanical"
readme = "README.rst"
requires-python = ">=3.10,<4.0"
license = { file = "LICENSE" }
authors = [{ name = "ANSYS, Inc.", email = "pyansys.core@ansys.com" }]
maintainers = [{ name = "ANSYS, Inc.", email = "pyansys.core@ansys.com" }]
keywords = ["pymechanical", "mechanical", "ansys", "pyansys"]

classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
]

dependencies = [
    "ansys-api-mechanical==0.1.3",
    "ansys-mechanical-stubs==0.1.9",
    "ansys-pythonnet>=3.1.0rc6",
    "ansys-tools-path>=0.3.1",
    "appdirs>=1.4.0",
    "click>=8.1.3",
    "clr-loader>=0.2.6",
    "grpcio>=1.30.0",
    "protobuf>=3.12.2,<6",
    "psutil>=6",
    "tqdm>=4.45.0",
    "requests>=2,<3",
]

[project.urls]
Homepage = "https://github.com/ansys/pymechanical"
Documentation = "https://mechanical.docs.pyansys.com"
Repository = "https://github.com/ansys/pymechanical"
Issues = "https://github.com/ansys/pymechanical/issues"
Changelog = "https://mechanical.docs.pyansys.com/version/stable/changelog.html"

[project.optional-dependencies]
tests = [
    "pytest==8.4.2",
    "pytest-cov==7.0.0",
    "pytest-print==1.2.0",
    "psutil==7.1.1",
]

doc = [
    "sphinx==8.2.3",
    "ansys-sphinx-theme[autoapi,changelog]==1.6.3",
    "imageio-ffmpeg==0.6.0",
    "imageio==2.37.0",
    "jupyter_sphinx==0.5.3",
    "jupyterlab>=3.2.8",
    "matplotlib==3.10.7",
    "numpy==2.2.6",
    "numpydoc==1.8.0",
    "pypandoc==1.15",
    "sphinx-autobuild==2024.10.3",
    "sphinx-autodoc-typehints==3.1.0",
    "sphinx-copybutton==0.5.2",
    "sphinx_design==0.6.1",
    "sphinx-gallery==0.19.0",
    "sphinx-notfound-page==1.1.0",
    "sphinxcontrib-websupport==2.0.0",
    "sphinx-click==6.1.0",
    "ansys-tools-visualization-interface>=0.2.6",
]

graphics = [
    "ansys-tools-visualization-interface>=0.2.6",
    "usd-core==25.8",
]

rpc = [
    "rpyc==6.0.2",
    "toolz==1.1.0",
]

pim = [
    "ansys-platform-instancemanagement>=1.0.1",
]

[project.scripts]
ansys-mechanical = "ansys.mechanical.core.run:cli"
ansys-mechanical-ideconfig = "ansys.mechanical.core.ide_config:cli"
find-mechanical = "ansys.mechanical.core.embedding.find_mechanical:cli"

[tool.pdm.build]
includes = ["src", "mechanical-env"]
excludes = ["tests"]

[tool.pdm.build.wheel-data]
scripts = ["mechanical-env"]

# ========================================================
# Ruff Configuration
# ========================================================

[tool.ruff]
line-length = 100
fix = true
extend-exclude = ["tests/assets", "tests/scripts"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
docstring-code-format = true
docstring-code-line-length = "dynamic"

[tool.ruff.lint]
select = [
    "E",    # pycodestyle, see https://docs.astral.sh/ruff/rules/#pycodestyle-e-w
    "D",    # pydocstyle, see https://docs.astral.sh/ruff/rules/#pydocstyle-d
    "F",    # pyflakes, see https://docs.astral.sh/ruff/rules/#pyflakes-f
    "I",    # isort, see https://docs.astral.sh/ruff/rules/#isort-i
    "N",    # pep8-naming, see https://docs.astral.sh/ruff/rules/#pep8-naming-n
    "PTH",  # flake8-use-pathlib, https://docs.astral.sh/ruff/rules/#flake8-use-pathlib-pth
    "TD",   # flake8-todos, https://docs.astral.sh/ruff/rules/#flake8-todos-td
]
ignore = [
    "TD002", # Missing author in TODOs comment
    "TD003", # Missing issue link in TODOs comment
]


[tool.ruff.lint.per-file-ignores]
# Ignore `F401` (import violations) in all `__init__.py` files.
"__init__.py" = ["F401"]
"src/ansys/mechanical/core/__init__.py" = ["E402"]
"tests/conftest.py" = ["F811"] # TODO : Fix pytest_collection issues.
"examples/**.py" = ["D400", "F821", "F405", "E402", "D205"]
"tests/embedding/test_dyna.py" = ["F821"] # Global like "Model" are directly called.
"tests/embedding/test_graphics_export.py" = ["F821"] # Global like "Model" are directly called.
"tests/embedding/test_qk_eng_wb2.py" = ["F821", "N806"] # Global like "Model" are directly called.

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.isort]
combine-as-imports = true
force-sort-within-sections = true
known-first-party = ["ansys.mechanical.core"]


# ========================================================
# Pytest and Coverage Configuration
# ========================================================

[tool.coverage.run]
relative_files = true
source = ["ansys.mechanical"]

[tool.coverage.report]
show_missing = true

[tool.coverage.html]
directory = ".cov/html"

[tool.coverage.xml]
output = ".cov/coverage.xml"

[tool.pytest.ini_options]
minversion = "7.1"
addopts = """-ra -s --durations=0 --cov=ansys.mechanical --cov-report html:.cov/html \
 --cov-report xml:.cov/xml --cov-report term --cov-append -vv --print --print-relative-time"""

testpaths = [
    "tests",
]
markers = [
    "embedding: tests that embed Mechanical in the python process",
    "embedding_scripts: embedding tests that use subprocess",
    "python_env: tests that check for an appropriate python environment",
    "remote_session_launch: tests that launch Mechanical and work with gRPC server inside it",
    "remote_session_connect: tests that connect to Mechanical and work with gRPC server inside it",
    "minimum_version(num): tests that run if ansys-version is greater than the minimum version provided",
    "version_range(min_revn,max_revn): tests that run if ansys-version is in the range of the minimum and maximum revision numbers inclusive.",
    "windows_only: tests that run if the testing platform is on Windows",
    "linux_only: tests that run if the testing platform is on Linux",
    "cli: tests for the Command Line Interface",
    "embedding_backgroundapp: tests for the BackgroundApp",
    "embedding_logging: tests for the logging with Embedded App",
]
xfail_strict = true

# ========================================================
# Towncrier Configuration
# ========================================================

[tool.towncrier]
package = "ansys.mechanical.core"
directory = "doc/changelog.d"
filename = "doc/source/changelog.rst"
start_string = ".. towncrier release notes start\n"
template = "doc/changelog.d/changelog_template.jinja"
title_format = "`{version} <https://github.com/ansys/pymechanical/releases/tag/v{version}>`_ - {project_date}"
issue_format = "`#{issue} <https://github.com/ansys/pymechanical/pull/{issue}>`_"

[[tool.towncrier.type]]
directory = "added"
name = "Added"
showcontent = true

[[tool.towncrier.type]]
directory = "changed"
name = "Changed"
showcontent = true

[[tool.towncrier.type]]
directory = "fixed"
name = "Fixed"
showcontent = true

[[tool.towncrier.type]]
directory = "dependencies"
name = "Dependencies"
showcontent = true

[[tool.towncrier.type]]
directory = "miscellaneous"
name = "Miscellaneous"
showcontent = true

[[tool.towncrier.type]]
directory = "documentation"
name = "Documentation"
showcontent = true

[[tool.towncrier.type]]
directory = "maintenance"
name = "Maintenance"
showcontent = true

[[tool.towncrier.type]]
directory = "test"
name = "Test"
showcontent = true

# ========================================================
# Tox Configuration
# ========================================================

[tool.tox]
legacy_tox_ini = """
[tox]
description = Default tox environments list
envlist =
    style,{py310,py311,py312}{,-coverage},doc
passenv =  AWP_ROOT
skip_missing_interpreters = true
isolated_build = true
isolated_build_env = build

[gh-actions]
description = The tox environment to be executed in gh-actions for a given python version
python =
    3.10: style,py310-coverage,doc
    3.11: style,py311-coverage,doc
    3.12: style,py312-coverage,doc
    3.13: style,py313-coverage,doc

[testenv]
description = Checks for project unit tests and coverage (if desired)
basepython =
    py310: python3.10
    py311: python3.11
    py312: python3.12
    py313: python3.13
    py: python3
    {style,reformat,doc,build}: python3
passenv = *
setenv =
    PYTHONUNBUFFERED = yes
    coverage: PYTEST_EXTRA_ARGS = --cov=ansys.mechanical --cov-report=term --cov-report=xml:.cov/coverage.xml --cov-report=html:.cov/html
extras = tests
commands =
    pytest {env:PYTEST_MARKERS:} {env:PYTEST_EXTRA_ARGS:} {posargs:-vv}

[testenv:style]
description = Checks project code style
passenv = *
skip_install = true
deps =
    pre-commit
commands =
    pre-commit install
    pre-commit run --all-files --show-diff-on-failure

[testenv:doc]
description = Check if documentation generates properly
passenv = *
extras = doc
commands =
    sphinx-build -d "{toxworkdir}/doc_doctree" doc/source "{toxinidir}/doc/_build/html" --color -vW -bhtml
"""