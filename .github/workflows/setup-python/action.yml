name: >
  Set up Python

description: |
  Sets up Python on the Mechanical containers.

inputs:

  # Required inputs
  container-sha:
    description: >
      The SHA of the test container. For example, it would be the digest SHA of ghcr.io/ansys/mechanical:25.2.0
    required: true
    type: string

  python-version:
    description: >
      Python version to set up. For example, 3.10
    required: true
    type: string

  # Optional inputs
  python-version-patch:
    description: >
      The Python version to set up with the patch specified. For example, 3.10.0
    required: false
    type: string
    default: ""

runs:
  using: "composite"
  steps:

    - name: Get most recent Python version
      shell: bash
      run: |
          declare -A python_versions=(["3.10"]="3.10.18" ["3.11"]="3.11.13" ["3.12"]="3.12.11" ["3.13"]="3.13.7")

          # Get the Python version inputs
          python_version_input="${{ inputs.python-version }}"
          python_version_patch_input="${{ inputs.python-version-patch }}"

          if [ -n "$python_version_patch_input" ]; then
            echo "PYTHON_VERSION_PATCH=$python_version_patch_input" >> "$GITHUB_ENV"
          else
            if [[ -v python_versions["$python_version_input"] ]]; then
              echo "PYTHON_VERSION_PATCH=${python_versions[$python_version_input]}" >> "$GITHUB_ENV"
            else
              echo "Key '$python_version_input' does not exist in the hashmap."
              echo "The available Python versions are: ${!python_versions[@]}"
              exit 1
            fi
          fi

    # - name: "Cache Python directory"
    #   uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.2.4
    #   with:
    #     path: /usr/local/bin/python${{ inputs.python-version }}
    #     key: python${{ inputs.python-version }}-dir-${{ inputs.container-sha }}
    #     restore-keys: |
    #       python${{ inputs.python-version }}-dir

    # - name: "Check if Python is already installed"
    #   id: check_python
    #   shell: bash
    #   run: |
    #     if [ -z "$(ls -A /usr/local/bin/python${{ inputs.python-version }})" ]; then
    #       echo "Python ${{ inputs.python-version }} is not installed."
    #       echo "installed=false" >> "$GITHUB_OUTPUT"
    #     else
    #       echo "Python ${{ inputs.python-version }} is already installed."
    #       echo "installed=true" >> "$GITHUB_OUTPUT"
    #     fi

    - name: "Install Python ${{ env.PYTHON_VERSION_PATCH }}"
      # if: steps.check_python.outputs.installed == 'false'
      shell: bash
      run: |
        # Update package lists
        apt update

        # Install dependencies to build Python
        apt install build-essential zlib1g-dev libncurses5-dev libgdbm-dev libnss3-dev libssl-dev libreadline-dev libffi-dev libsqlite3-dev wget libbz2-dev -y

        # Download the specified Python version from python.org
        version=${{ env.PYTHON_VERSION_PATCH }}
        wget https://www.python.org/ftp/python/$version/Python-$version.tgz

        # Extract the downloaded tarball
        tar -xf Python-$version.tgz

        # Check the required dependencies of the Python install
        cd Python-$version/
        ./configure --enable-optimizations

        # Build Python
        make -j $(nproc)

        # Install Python
        make altinstall

    - name: Cache pip
      uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.2.4
      with:
        path: ~/.cache/pip
        key: Python-${{ runner.os }}-${{ inputs.python-version }}-${{ inputs.container-sha }}-${{ hashFiles('pyproject.toml') }}
        restore-keys: |
          Python-${{ runner.os }}-${{ inputs.python-version }}

    # - name: Cache Python dependencies
    #   uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.2.4
    #   with:
    #     path: ~/.cache/pip
    #     key: ${{ runner.os }}-pip-${{ inputs.container-sha }}
    #     restore-keys: |
    #       ${{ runner.os }}-pip-

    - name: "Configure Python"
      shell: bash
      run: |
        # Get the location of the installed Python version
        python_location=$(which python${{ inputs.python-version }})

        # Link python to the installed version
        ln -s $python_location /usr/bin/python

        # Verify Python installation
        python -m ensurepip --default-pip
        python -m pip install --upgrade pip
        python -m venv /env

    - name: "Check the virtual environment Python can be used"
      shell: bash
      run: |
        . /env/bin/activate

        env_python_check=$(which python)
        echo "Using python from $env_python_check"

        if [[ $env_python_check =~ "env" ]]; then
          echo "Using virtual environment"
        else
          echo "Not using virtual environment: $env_python_check"
          exit 1
        fi
