name: GitHub CI

on:
  pull_request:
  workflow_dispatch:
  schedule:
    - cron: '00 22 * * *'  # UTC time, may start 5-15 mins later than scheduled time
  # registry_package:
    # Run workflow when package is published or updated
    # types: [published]
  push:
    tags:
      - "*"
    branches:
      - main
      - release/*

env:
  PYMECHANICAL_PORT: 10000  # default won't work on GitHub runners
  PYMECHANICAL_START_INSTANCE: false
  DOCKER_PACKAGE: ghcr.io/ansys/mechanical
  DOCKER_MECH_CONTAINER_NAME: mechanical
  PACKAGE_NAME: ansys-mechanical-core
  DOCUMENTATION_CNAME: mechanical.docs.pyansys.com
  MAIN_PYTHON_VERSION: '3.10'
  # LATEST_STABLE_REVN and its Docker image are used in pull requests
  LATEST_STABLE_REVN: '241'
  LATEST_STABLE_DOCKER_IMAGE_VERSION: '24.1.0'
  # DEV_REVN & its Docker image are used in scheduled or registry package runs
  DEV_REVN: '242'
  DEV_DOCKER_IMAGE_VERSION: '24.2.0'
  MEILISEARCH_API_KEY: ${{ secrets.MEILISEARCH_API_KEY }}
  MEILISEARCH_HOST_URL: ${{ vars.MEILISEARCH_HOST_URL }}
  MEILISEARCH_PUBLIC_API_KEY: ${{ secrets.MEILISEARCH_PUBLIC_API_KEY }}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  revn-variations:
    name: Save variations of revn
    runs-on: ubuntu-latest
    outputs:
      # ghcr.io/ansys/mechanical:24.1.0
      stable_container: ${{ steps.save-versions.outputs.stable_container }}
      # '241' or '242'
      test_revn: '${{ steps.save-versions.outputs.test_revn }}'
      # ghcr.io/ansys/mechanical:24.1.0 or ghcr.io/ansys/mechanical:24.2.0
      test_container: ${{ steps.save-versions.outputs.test_container }}
      # '24.1.0' or '24.2.0'
      test_docker_image_version: '${{ steps.save-versions.outputs.test_docker_image_version }}'
    steps:
      - id: save-versions
        run: |
          if ${{ github.event_name == 'schedule' }}; then  # || ${{ github.event.registry_package.package_version.container_metadata.tag.name == 'mechanical:24.2.0' }}; then
            # 242
            echo "test_revn=${{ env.DEV_REVN }}" >> $GITHUB_OUTPUT
            # ghcr.io/ansys/mechanical:24.2.0
            echo "test_container=${{ env.DOCKER_PACKAGE }}:${{ env.DEV_DOCKER_IMAGE_VERSION }}" >> $GITHUB_OUTPUT
            # 24.2.0
            echo "test_docker_image_version=${{ env.DEV_DOCKER_IMAGE_VERSION }}" >> $GITHUB_OUTPUT
          else
            # 241
            echo "test_revn=${{ env.LATEST_STABLE_REVN }}" >> $GITHUB_OUTPUT
            # ghcr.io/ansys/mechanical:24.1.0
            echo "test_container=${{ env.DOCKER_PACKAGE }}:${{ env.LATEST_STABLE_DOCKER_IMAGE_VERSION }}" >> $GITHUB_OUTPUT
            # 24.1.0
            echo "test_docker_image_version=${{ env.LATEST_STABLE_DOCKER_IMAGE_VERSION }}" >> $GITHUB_OUTPUT
          fi

          echo "stable_container=${{ env.DOCKER_PACKAGE }}:${{ env.LATEST_STABLE_DOCKER_IMAGE_VERSION }}" >> $GITHUB_OUTPUT

  config-matrix:
    runs-on: ubuntu-latest
    needs: [revn-variations]
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - id: set-matrix
        run: |
          # Configure matrix for "tests" job
          # Run all mechanical versions for tags and nightly scheduled runs, otherwise run the test docker image version only
          if ${{ github.event_name == 'push' }} && ${{ contains(github.ref, 'refs/tags') }} || ${{ github.event_name == 'schedule' }}; then
            echo "matrix={\"mechanical-version\":['23.1.0', '23.2.0', '24.1.0', '24.2.0'],\"experimental\":[false]}" >> $GITHUB_OUTPUT
          else
            echo "matrix={\"mechanical-version\":['${{ needs.revn-variations.outputs.test_docker_image_version }}'],\"experimental\":[false]}" >> $GITHUB_OUTPUT
          fi

  embedding-tests:
    name: Embedding testing and coverage
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [revn-variations]
    container:
      image: ${{ needs.revn-variations.outputs.test_container }}
      options: --entrypoint /bin/bash
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']

    steps:
      - uses: actions/checkout@v4
      - name: Set up python and pip
        run: |
          apt update
          apt install --reinstall ca-certificates
          apt install lsb-release  git xvfb software-properties-common -y
          add-apt-repository ppa:deadsnakes/ppa -y
          apt install -y python${{ matrix.python-version }} python${{ matrix.python-version }}-venv
          python${{ matrix.python-version }} -m venv /env

      - name: Install dependencies
        run: |
          . /env/bin/activate
          pip install --trusted-host pypi.org --trusted-host pypi.python.org --trusted-host files.pythonhosted.org pip setuptools
          pip install --upgrade pip flit

      - name: Install packages for testing
        run: |
          . /env/bin/activate
          pip install -e .[tests]

      - name: Unit Testing and coverage
        env:
          LICENSE_SERVER: ${{ secrets.LICENSE_SERVER }}
          ANSYSLMD_LICENSE_FILE: 1055@${{ secrets.LICENSE_SERVER }}
          ANSYS_WORKBENCH_LOGGING_CONSOLE: 0
          ANSYS_WORKBENCH_LOGGING: 0
          ANSYS_WORKBENCH_LOGGING_FILTER_LEVEL: 2
          NUM_CORES: 1
          PYTHONUNBUFFERED: 1
        run: |
          . /env/bin/activate
          xvfb-run pytest -m embedding -s --junitxml test_results${{ matrix.python-version }}.xml || true

      - name: Upload coverage results
        uses: actions/upload-artifact@v4
        if: env.MAIN_PYTHON_VERSION == matrix.python-version
        with:
          name: coverage-tests-embedding
          path: .cov
          retention-days: 7

      - name: Upload coverage results (as .coverage)
        uses: actions/upload-artifact@v4
        if: env.MAIN_PYTHON_VERSION == matrix.python-version
        with:
          name: coverage-file-tests-embedding
          path: .coverage
          retention-days: 7

      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v4
        if: always()
        with:
          report_paths: '**/test_results*.xml'
          check_name: Test Report ${{ matrix.python-version }}
          detailed_summary: true
          include_passed: true
          fail_on_failure: true

  embedding-scripts-tests:
    name: Embedding scripts testing and coverage
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [revn-variations]
    container:
      image: ${{ needs.revn-variations.outputs.test_container }}
      options: --entrypoint /bin/bash
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']

    steps:
      - uses: actions/checkout@v4
      - name: Set up python and pip
        run: |
          apt update
          apt install --reinstall ca-certificates
          apt install lsb-release xvfb software-properties-common -y
          add-apt-repository ppa:deadsnakes/ppa -y
          apt install -y python${{ matrix.python-version }} python${{ matrix.python-version }}-venv
          python${{ matrix.python-version }} -m venv /env

      - name: Install dependencies
        run: |
          . /env/bin/activate
          pip install --trusted-host pypi.org --trusted-host pypi.python.org --trusted-host files.pythonhosted.org pip setuptools
          pip install --upgrade pip flit

      - name: Install packages for testing
        run: |
          . /env/bin/activate
          pip install -e .[tests]

      - name: Embedding scripts unit testing and coverage
        env:
          LICENSE_SERVER: ${{ secrets.LICENSE_SERVER }}
          ANSYSLMD_LICENSE_FILE: 1055@${{ secrets.LICENSE_SERVER }}
          ANSYS_WORKBENCH_LOGGING_CONSOLE: 0
          ANSYS_WORKBENCH_LOGGING: 0
          ANSYS_WORKBENCH_LOGGING_FILTER_LEVEL: 2
          NUM_CORES: 1
          PYTHONUNBUFFERED: 1
        run: |
          . /env/bin/activate
          pytest -m embedding_scripts -s --junitxml test_results_embedding_scripts${{ matrix.python-version }}.xml


  doc-build:
    name: Documentation
    runs-on: ubuntu-latest
    container:
      image: ${{ needs.revn-variations.outputs.stable_container }}
      options: --entrypoint /bin/bash
    needs: [revn-variations]

    steps:

      - name: Install Git and checkout project
        uses: actions/checkout@v4

      - name: Set up Python
        run: |
          apt update
          apt install --reinstall ca-certificates
          apt install software-properties-common -y
          add-apt-repository ppa:deadsnakes/ppa -y
          apt install -y python${{ env.MAIN_PYTHON_VERSION }} python${{ env.MAIN_PYTHON_VERSION }}-venv
          python${{ env.MAIN_PYTHON_VERSION }} -m venv /env

      - name: Install system dependencies
        run: |
          apt update
          apt install -y sudo curl lsb-release git
          apt install -y zip pandoc libgl1-mesa-glx mesa-utils xvfb texlive-latex-extra latexmk nodejs npm graphviz
          apt install -y tini
          npm install -g @mermaid-js/mermaid-cli

      - name: Install Python requirements
        run: |
          . /env/bin/activate
          pip install -e .[doc]

      - name: Build docs
        env:
          NUM_CORES: 1
          LICENSE_SERVER: ${{ secrets.LICENSE_SERVER }}
          ANSYSLMD_LICENSE_FILE: 1055@${{ secrets.LICENSE_SERVER }}
          ANSYS_WORKBENCH_LOGGING_FILTER_LEVEL: 0
        run: |
          . /env/bin/activate
          # Make html or pdf doc
          make_doc() {
            # $1 is the type of file we are creating (html or pdf)

            # Need to unset PYMECHANICAL_PORT and PYMECHANICAL_START_INSTANCE when running code containing remote sessions
            unset PYMECHANICAL_PORT
            unset PYMECHANICAL_START_INSTANCE

            output_file=doc_$1_output.txt
            xvfb-run make -C doc $1 > $output_file 2>&1 || true
            cat $output_file
            echo done running make
            validate_output $output_file
          }

          # Validate that the html or pdf build succeeded
          validate_output() {
            echo "validating output of build"
            # $1 is the file we are checking
            # cat $1
            #
            # Check if "build succeeded" string is present in doc_build_output.txt
            #
            if grep -q "build succeeded" $1; then
              echo "Documentation building succeeded"
            else
              echo "Documentation building failed"
              exit 1
            fi
          }

          # Make the html doc & validate results
          make_doc html