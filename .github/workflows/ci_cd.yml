name: GitHub CI
on:
  pull_request:
  workflow_dispatch:
  push:
    tags:
      - "*"
    branches:
      - main

env:
  PYMECHANICAL_PORT: 10000  # default won't work on GitHub runners
  PYMECHANICAL_START_INSTANCE: FALSE
  DOCKER_PACKAGE: ghcr.io/pyansys/pymechanical/mechanical
  DOCKER_IMAGE_VERSION: v23.1.0
  MAIN_PYTHON_VERSION: '3.10'
  PACKAGE_NAME: ansys-mechanical-core

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

  style:
    name: Code style
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: 'requirements/*.txt'

      - name: Install pre-commit
        run: pip install pre-commit

      - name: Run pre-commit
        run: pre-commit run --all-files --show-diff-on-failure

  smoke_tests:
    name: Build and Smoke tests
    runs-on: ${{ matrix.os }}
    needs: [style]
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        python-version: ['3.7', '3.8', '3.9', '3.10']
      fail-fast: false

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          cache-dependency-path: 'requirements/*.txt'
        
      - name: Install packages for building
        run: |
          pip install -r requirements/requirements_build.txt
          pip install .

      - name: Smoke test
        run: python -c "from ansys.mechanical.core import __version__; print(__version__)"

      - name: Store version
        run: |
          echo "::set-output name=PYMECH_VERSION::$(python -c "from ansys.mechanical.core import __version__; print(__version__)")"
        id: version

      - name: Generate wheelhouse
        run: |
          pip wheel . -w wheelhouse

      - name: Zip wheelhouse
        uses: vimtor/action-zip@v1
        with:
          files: wheelhouse
          dest: ${{ env.PACKAGE_NAME }}-v${{ steps.version.outputs.PYMECH_VERSION }}-wheelhouse-${{ runner.os }}-${{ matrix.python-version }}.zip

      - name: Upload Wheelhouse
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.PACKAGE_NAME }}-v${{ steps.version.outputs.PYMECH_VERSION }}-wheelhouse-${{ runner.os }}-${{ matrix.python-version }}
          path: '*.zip'
          retention-days: 7

  build_tests:
    name: Testing and coverage
    runs-on: ubuntu-latest
    needs: [smoke_tests]

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: 'requirements/*.txt'
        
      - name: Install packages for testing
        run: |
          pip install -r requirements/requirements_build.txt
          pip install -r requirements/requirements_tests.txt
          pip install .

      - name: Login in Github Container registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ secrets.GH_USERNAME }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull, launch, and validate Mechanical service
        run: .ci/start_mechanical.sh
        env:
          LICENSE_SERVER: ${{ secrets.LICENSE_SERVER }}
          MECHANICAL_IMAGE: ${{ env.DOCKER_PACKAGE }}:${{ env.DOCKER_IMAGE_VERSION }}

      - name: Unit Testing and coverage 
        run: pytest

      - name: Upload Coverage Results
        uses: actions/upload-artifact@v3
        with:
          name: HTML-Coverage
          path: .cov/html
          retention-days: 7

      # - name: Upload coverage to Codecov
      #   uses: codecov/codecov-action@v3

  build_docs:
    name: Documentation
    needs: [style]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: 'requirements/*.txt'

      - name: Install OS packages
        run: |
          sudo apt-get update
          sudo apt-get install pandoc -qy

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip flit tox

      - name: Install packages for documentation build
        run: |
          pip install -r requirements/requirements_build.txt
          pip install -r requirements/requirements_doc.txt
          pip install .

      - name: Build the documentation
        run: |
          make -C doc html
          touch doc/build/html/.nojekyll

      - name: Upload HTML documentation
        uses: actions/upload-artifact@v3
        with:
          name: HTML-Documentation
          path: doc/build/html
          retention-days: 7

  package:
    name: Package library
    needs: [build_tests, build_docs]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: 'requirements/*.txt'

      - name: Install ansys-mechanical-core
        run: |
          pip install build
          python -m build
          pip install dist/*.whl

      - name: Check package
        run: |
          pip install twine
          twine check dist/*

      - name: Upload wheel and binaries
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.PACKAGE_NAME }}-packages
          path: dist/
          retention-days: 7

  release:
    name: Release project
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    needs: [package]
    runs-on: ubuntu-latest
    steps:
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

      - uses: actions/download-artifact@v3

      - name: Display structure of downloaded files
        run: ls -R

      # - name: Upload to Public PyPi
      #   run: |
      #     pip install twine
      #     twine upload --skip-existing ./**/*.whl
      #     twine upload --skip-existing ./**/*.tar.gz
      #   env:
      #     TWINE_USERNAME: __token__
      #     TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}

      - name: Upload to Private PyPi
        run: |
          pip install twine
          python -m twine upload --skip-existing ./**/*.whl
          python -m twine upload --skip-existing ./**/*.tar.gz
        env:
          TWINE_USERNAME: PAT
          TWINE_PASSWORD: ${{ secrets.PYANSYS_PYPI_PRIVATE_PAT }}
          TWINE_REPOSITORY_URL: https://pkgs.dev.azure.com/pyansys/_packaging/pyansys/pypi/upload

      - name: Zip HTML Documentation
        uses: vimtor/action-zip@v1
        with:
          files: HTML-Documentation
          dest: pymechanical-Documentation-HTML.zip

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ./**/*.whl
            ./**/*.tar.gz
            ./**/*.zip

      - name: Notify if fail
        uses: skitionek/notify-microsoft-teams@master
        if: ${{ failure() }}
        with:
          webhook_url: ${{ secrets.TEAM_HOOK }}
          needs: ${{ toJson(needs) }}
          job: ${{ toJson(job) }}
          steps: ${{ toJson(steps) }}
          overwrite: "{
            title: `Release FAILED!`,
            }"

  upload_docs_release:
    name: Upload documentation
    if: (github.event_name == 'push' && contains(github.ref, 'refs/tags')) || (github.ref == 'refs/heads/main')
    runs-on: ubuntu-latest
    needs: [package]
    steps:
      - uses: actions/checkout@v3

      - uses: actions/download-artifact@v3
        with:
          name: HTML-Documentation
          path: HTML-Documentation

      - name: Get Bot Application Token
        id: get_workflow_token
        uses: peter-murray/workflow-application-token-action@v1
        with:
          application_id: ${{ secrets.BOT_APPLICATION_ID }}
          application_private_key: ${{ secrets.BOT_APPLICATION_PRIVATE_KEY }}

      - name: Deploy documentation to pymechanical-dev-docs repository
        if: github.ref == 'refs/heads/main'
        uses: JamesIves/github-pages-deploy-action@v4.4.0
        with:
          repository-name: pyansys/pymechanical-dev-docs
          token: ${{ steps.get_workflow_token.outputs.token }}
          branch: gh-pages
          folder: HTML-Documentation
          clean: true
          single-commit: true

      - name: Deploy documentation to pymechanical-docs repository
        if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          repository-name: pyansys/pymechanical-docs
          token: ${{ steps.get_workflow_token.outputs.token }}
          branch: gh-pages
          folder: HTML-Documentation
          clean: true
          single-commit: true
