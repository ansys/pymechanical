name: GitHub CI

on:
  pull_request:
  workflow_dispatch:
    inputs:
      revn:
        type: choice
        options:
        - '252'
        - '251'
        - '242'
        - '241'
        - '232'
        description: 'The Mechanical revision number to run tests on.'
        default: '251' #stable version is 251, must match $stable_container
  schedule:
    - cron: '00 22 * * *'  # UTC time, may start 5-15 mins later than scheduled time
  # registry_package:
    # Run workflow when package is published or updated
    # types: [published]
  push:
    tags:
      - "*"
    branches:
      - main
      - release/*



env:
  PYMECHANICAL_PORT: 10000  # default won't work on GitHub runners
  PYMECHANICAL_START_INSTANCE: false
  DOCKER_PACKAGE: ghcr.io/ansys/mechanical
  DOCKER_MECH_CONTAINER_NAME: mechanical
  PACKAGE_NAME: ansys-mechanical-core
  DOCUMENTATION_CNAME: mechanical.docs.pyansys.com
  MAIN_PYTHON_VERSION: '3.11'
  # DEV_REVN & its Docker image are used in scheduled or registry package runs
  STABLE_REVN: '251'
  DEV_REVN: '252'
  LICENSE_SERVER: ${{ secrets.LICENSE_SERVER }}
  ANSYSLMD_LICENSE_FILE: 1055@${{ secrets.LICENSE_SERVER }}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  update-changelog:
    name: "Update CHANGELOG for new tag"
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: ansys/actions/doc-deploy-changelog@v8
        with:
          token: ${{ secrets.PYANSYS_CI_BOT_TOKEN }}
          bot-user: ${{ secrets.PYANSYS_CI_BOT_USERNAME }}
          bot-email: ${{ secrets.PYANSYS_CI_BOT_EMAIL }}


  revn-variations:
    name: Save variations of revn
    runs-on: ubuntu-latest
    outputs:
      stable_container: ${{ steps.save-versions.outputs.stable_container }}
      test_revn: '${{ steps.save-versions.outputs.test_revn }}'
      test_container: ${{ steps.save-versions.outputs.test_container }}
      test_docker_image_version: '${{ steps.save-versions.outputs.test_docker_image_version }}'
    steps:
      - id: save-versions
        run: |
          if ${{ github.event_name == 'schedule' }}; then
            echo "test_revn=${{ env.DEV_REVN}}" >> $GITHUB_OUTPUT
            test_mech_revn=${{ env.DEV_REVN}}
            test_mech_image_version=${test_mech_revn:0:2}.${test_mech_revn:2}_candidate
            echo "test_container=${{ env.DOCKER_PACKAGE }}:$test_mech_image_version" >> $GITHUB_OUTPUT
            echo "test_docker_image_version=$test_mech_image_version" >> $GITHUB_OUTPUT
          else
            if [[ -z "${{inputs.revn}}" ]]; then
              mech_revn=${{ env.STABLE_REVN }}
            else
              mech_revn=${{inputs.revn}}
            fi
            export mech_image_version=${mech_revn:0:2}.${mech_revn:2}.0
            echo "test_revn=$mech_revn" >> $GITHUB_OUTPUT
            echo "test_container=${{ env.DOCKER_PACKAGE }}:$mech_image_version" >> $GITHUB_OUTPUT
            echo "test_docker_image_version=$mech_image_version" >> $GITHUB_OUTPUT
          fi

          stable_mech_revn=${{ env.STABLE_REVN }}
          stable_mech_image_version=${mech_revn:0:2}.${mech_revn:2}.0
          echo "stable_container=${{ env.DOCKER_PACKAGE }}:$stable_mech_image_version" >> $GITHUB_OUTPUT

          echo $GITHUB_OUTPUT

          # --- Help ----
          # schedule nightly uses DEV_REVN candidate
          # PRs and merges use STABLE_REVN
          # Workflow dispatch can use any revision number

  config-matrix:
    runs-on: ubuntu-latest
    needs: [revn-variations]
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - id: set-matrix
        run: |
          # if a tag(release) is pushed, test all versions
          if ${{ github.event_name == 'push' }} && ${{ contains(github.ref, 'refs/tags') }}; then
            echo "matrix={\"mechanical-version\":['23.2.0', '24.1.0', '24.2.0', '25.1.0'],\"experimental\":[false]}" >> $GITHUB_OUTPUT
          else
            echo "matrix={\"mechanical-version\":['${{ needs.revn-variations.outputs.test_docker_image_version }}'],\"experimental\":[false]}" >> $GITHUB_OUTPUT
          fi

  container-stability-check:
    runs-on: ubuntu-latest
    needs: [revn-variations]
    outputs:
      container_stable_exit: ${{ steps.check_stability.outputs.container_stable_exit }}
    steps:
      - id: check_stability
        run: |
          sudo apt update
          sudo apt install bc -y
          container_version=$(echo "${{ needs.revn-variations.outputs.test_docker_image_version }}" | grep -o -E '[0-9]+(\.[0-9]+)?' | head -n 1)
          if (( $(echo "$container_version > 24.2" | bc -l) )); then
            echo "container_stable_exit=true" >> $GITHUB_OUTPUT
          else
            echo "container_stable_exit=false" >> $GITHUB_OUTPUT
          fi


  embedding-rpc-tests:
    name: Embedding rpc testing and coverage
    runs-on: public-ubuntu-latest-8-cores
    timeout-minutes: 10
    needs: [revn-variations, container-stability-check]
    container:
      image: ${{ needs.revn-variations.outputs.test_container }}
      options: --entrypoint /bin/bash
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.10', '3.11', '3.12', '3.13']

    steps:
      - uses: actions/checkout@v4
      - name: Set up python and pip
        run: |
          apt update
          apt install --reinstall ca-certificates
          apt install lsb-release xvfb software-properties-common -y
          add-apt-repository ppa:deadsnakes/ppa -y
          apt install -y python${{ matrix.python-version }} python${{ matrix.python-version }}-venv
          python${{ matrix.python-version }} -m venv /env

      - name: Install packages for testing
        run: |
          . /env/bin/activate
          pip install --upgrade pip
          pip install uv
          uv pip install -e .[tests,rpc]

      - name: Unit Testing and coverage
        env:
          ANSYS_WORKBENCH_LOGGING_CONSOLE: 0
          ANSYS_WORKBENCH_LOGGING: 0
          ANSYS_WORKBENCH_LOGGING_FILTER_LEVEL: 2
          PYTHONUNBUFFERED: 1
        run: |
          . /env/bin/activate
          # if [ "${{ needs.container-stability-check.outputs.container_stable_exit }}" = "true" ]; then
          #   xvfb-run mechanical-env pytest -m remote_session_connect --remote-server-type=rpyc -s --junitxml test_results${{ matrix.python-version }}.xml
          # else
          #   xvfb-run mechanical-env pytest -m remote_session_connect --remote-server-type=rpyc -s --junitxml test_results${{ matrix.python-version }}.xml || true
          # fi
          xvfb-run mechanical-env pytest -m remote_session_connect --remote-server-type=rpyc || true
