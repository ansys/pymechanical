name: GitHub CI

on:
  pull_request:
  schedule:
    - cron: '00 22 * * *'  # UTC time, may start 5-15 mins later than scheduled time
  workflow_dispatch:
    inputs:
      default-revn:
        type: choice
        description: 'Default revision number for containers.'
        options:
        - '241'
        - '232'
        - '231'
        default: '231'  # ensure this is the same as env.DEFAULT_REVN
      test-revn:
        type: choice
        description: 'Revision number for tests.'
        options:
        - '241'
        - '232'
        - '231'
        default: '232'  # ensure this is the same as env.TEST_REVN
  push:
    tags:
      - "*"
    branches:
      - main
      - release/*

env:
  PYMECHANICAL_PORT: 10000  # default won't work on GitHub runners
  PYMECHANICAL_START_INSTANCE: FALSE
  DOCKER_PACKAGE: ghcr.io/ansys/mechanical
  DOCKER_MECH_CONTAINER_NAME: mechanical
  MAIN_PYTHON_VERSION: '3.10'
  PACKAGE_NAME: ansys-mechanical-core
  PACKAGE_NAMESPACE: ansys.mechanical.core
  DOCUMENTATION_CNAME: mechanical.docs.pyansys.com
  DEFAULT_REVN: '231'  # ensure this is the same as inputs.default-revn.default
  TEST_REVN: '232'  # ensure this is the same as inputs.test-revn.default
  DEV_REVN: '241'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  revn-variations:
    name: Save variations of revn
    runs-on: ubuntu-latest
    outputs:
      default: ${{ steps.save-versions.outputs.default }}
      default_lic: ${{ steps.save-versions.outputs.default_lic }}
      test: ${{ steps.save-versions.outputs.test }}
      test_lic:  ${{ steps.save-versions.outputs.test_lic }}
    steps:
      - id: save-versions
        run: |
          parse_revns() {
            revn=$1  # For example, 231
            container_name=$2
            license_name=$3

            # Create container_version from revn
            container_version="${revn:0:2}.${revn:2}.0"  # For example, 23.1.0

            # Set output variables
            echo "$container_name=$container_version" >> $GITHUB_OUTPUT
            echo "$license_name=$revn" >> $GITHUB_OUTPUT
          }

          # Use default revn values if the input values were not chosen.
          # The input values are only selected in workflow_dispatch events.
          if [[ -z "${{ inputs.default-revn }}" || -z "${{ inputs.test-revn }}" ]]; then
            # If the event is a scheduled run, set the value to the DEV_REVN env var.
            if ${{ github.event_name == 'schedule' }}; then
              parse_revns "${{ env.DEV_REVN }}" "default" "default_lic"
              parse_revns "${{ env.DEV_REVN }}" "test" "test_lic"
            else
              parse_revns "${{ env.DEFAULT_REVN }}" "default" "default_lic"
              parse_revns "${{ env.TEST_REVN }}" "test" "test_lic"
            fi
          else
            # If the input values are selected, use those values instead of the env vars
            parse_revns "${{ inputs.default-revn }}" "default" "default_lic"
            parse_revns "${{ inputs.test-revn }}" "test" "test_lic"
          fi

  style:
    name: Code style
    runs-on: ubuntu-latest
    steps:
      - name: PyAnsys code style checks
        uses: ansys/actions/code-style@v4
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

  docs-style:
    name: Documentation Style Check
    runs-on: ubuntu-latest
    steps:
      - name: PyAnsys documentation style checks
        uses: ansys/actions/doc-style@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  smoke-tests:
    name: Build and Smoke tests
    runs-on: ${{ matrix.os }}
    needs: [style]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11']
        should-release:
          - ${{ github.event_name == 'push' && contains(github.ref, 'refs/tags') }}
        exclude:
          - should-release: false
            os: macos-latest
    steps:
      - name: Build wheelhouse and perform smoke test
        uses: ansys/actions/build-wheelhouse@v4
        with:
          library-name: ${{ env.PACKAGE_NAME }}
          operating-system: ${{ matrix.os }}
          python-version: ${{ matrix.python-version }}
          # use-python-cache: false

  changelog-check:
    name: Changelog Update Check
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.CHANGELOG_TOKEN }}

      - uses: dangoslen/dependabot-changelog-helper@v3
        if: ${{ github.actor == 'dependabot[bot]' }}
        with:
          activationLabel: 'dependabot'
          changelogPath: './CHANGELOG.md'

      - uses: stefanzweifel/git-auto-commit-action@v4
        if: ${{ github.actor == 'dependabot[bot]' }}
        with:
          commit_message: "Updated Changelog"

      - name: Get all doc files that have changed
        id: changed-files-yaml
        uses: tj-actions/changed-files@v39
        with:
          files_yaml: |
            doc:
              - 'CHANGELOG.md'

      - name: Check Changelog Edited
        run: |
          if [[ "${{ steps.changed-files-yaml.outputs.doc_all_changed_files }}" == "CHANGELOG.md" ]]; then
              echo "CHANGELOG.md was updated."
          elif [[ "${{ github.actor }}" == "dependabot[bot]" ]]; then
              echo "CHANGELOG.md was autoupdated... Workflow will trigger."
          else
              echo "Please update CHANGELOG.md before merging the pull request."
              exit 1
          fi

  tests:
    name: Testing and coverage - Mechanical ${{ matrix.mechanical-version }}
    runs-on: public-ubuntu-latest-8-cores
    needs: [smoke-tests, revn-variations]
    continue-on-error: ${{ matrix.experimental }}
    strategy:
      fail-fast: false
      matrix:
        # Add the experimental mechanical-version to mechanical-version
        # matrix below once we switch to the next revn
        mechanical-version: ['${{needs.revn-variations.outputs.default}}']
        experimental: [false]
        # The following versions would be allowed to fail
        include:
          - mechanical-version: '${{needs.revn-variations.outputs.test}}'
            experimental: true
    steps:
      - name: Login in Github Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull, launch, and validate Mechanical service
        env:
          LICENSE_SERVER: ${{ secrets.LICENSE_SERVER }}
          MECHANICAL_IMAGE: ${{ env.DOCKER_PACKAGE }}:${{ matrix.mechanical-version }}
        run: |
          docker pull ${{ env.MECHANICAL_IMAGE }}
          docker run --restart always --name ${{ env.DOCKER_MECH_CONTAINER_NAME }} -e ANSYSLMD_LICENSE_FILE=1055@${{ env.LICENSE_SERVER }} -p ${{ env.PYMECHANICAL_PORT }}:10000 ${{ env.MECHANICAL_IMAGE }} > log.txt &
          grep -q 'WB Initialize Done' <(timeout 60 tail -f log.txt)

      - name: Testing
        uses: ansys/actions/tests-pytest@v4
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

      # - name: Upload coverage to Codecov
      #   uses: codecov/codecov-action@v3

      - name: Set the environment variable
        run: echo "DOCKER_IMAGE_VERSION=${{needs.revn-variations.outputs.default}}" >> $GITHUB_ENV

      - name: Upload coverage results
        uses: actions/upload-artifact@v3
        if: matrix.mechanical-version == env.DOCKER_IMAGE_VERSION
        with:
          name: coverage-tests
          path: .cov
          retention-days: 7

      - name: Upload coverage results (as .coverage)
        uses: actions/upload-artifact@v3
        if: matrix.mechanical-version == env.DOCKER_IMAGE_VERSION
        with:
          name: coverage-file-tests
          path: .coverage
          retention-days: 7

      - name: Get Mechanical container logs
        if: always()
        run: |
          docker logs ${{ env.DOCKER_MECH_CONTAINER_NAME }} > mechanical_tests_log-${{ matrix.mechanical-version }}.txt 2>&1
          echo CONTAINER LOGS OUTPUT
          cat mechanical_tests_log-${{ matrix.mechanical-version }}.txt
          echo CPU info
          lscpu

      - name: Upload container logs
        uses: actions/upload-artifact@v3
        with:
          name: mechanical_tests_log-${{ matrix.mechanical-version }}
          path: mechanical_tests_log-${{ matrix.mechanical-version }}.txt
          retention-days: 7

  embedding-tests:
    name: Embedding testing and coverage
    runs-on: ubuntu-latest
    needs: [style, revn-variations]
    container:
      image: ghcr.io/ansys/mechanical:${{needs.revn-variations.outputs.test}}
      options: --entrypoint /bin/bash
    strategy:
      max-parallel: 2
      fail-fast: false
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']

    steps:
      - uses: actions/checkout@v4
      - name: Set up python and pip
        run: |
          apt update
          apt install software-properties-common -y
          add-apt-repository ppa:deadsnakes/ppa -y
          apt install python${{ matrix.python-version }} -y
          ln -s /usr/bin/python${{ matrix.python-version }} /usr/bin/python
          apt install python${{ matrix.python-version }}-venv -y

      - name: Install pip
        if: matrix.python-version == '3.8'
        run: |
          apt install -y python3-pip

      - name: Install pip for >3.8
        if: matrix.python-version != '3.8'
        run: |
          python -m ensurepip --default-pip

      - name: Upgrade pip
        run: |
          pip3 install --upgrade pip
          python --version
          pip3 --version

      - name: Install dependencies
        run: |
          apt install -y lsb-release xvfb
          pip3 install --trusted-host pypi.org --trusted-host pypi.python.org --trusted-host files.pythonhosted.org pip setuptools
          pip3 install --upgrade pip flit

      - name: Install packages for testing
        run: |
          pip install .[tests]

      - name: Set environment variable
        run: echo "ANSYSCL${{ needs.revn-variations.outputs.test_lic }}_DIR=/install/ansys_inc/v${{ needs.revn-variations.outputs.test_lic }}/licensingclient" >> $GITHUB_ENV

      - name: Unit Testing and coverage
        env:
          LICENSE_SERVER: ${{ secrets.LICENSE_SERVER }}
          ANSYSLMD_LICENSE_FILE: 1055@${{ secrets.LICENSE_SERVER }}
          ANSYS_WORKBENCH_LOGGING_CONSOLE: 0
          ANSYS_WORKBENCH_LOGGING: 0
          ANSYS_WORKBENCH_LOGGING_FILTER_LEVEL: 2
          NUM_CORES: 1
        run: |
          xvfb-run /install/ansys_inc/v${{ needs.revn-variations.outputs.test_lic }}/aisol/.workbench_lite pytest -m embedding > pytest_output.txt || true
          cat pytest_output.txt
          #
          # Check if failure occurred
          #
          output=$(grep -c "FAILURES" pytest_output.txt || true)
          if [ $output -eq 0 ]; then
            echo "Pytest execution succeeded"
            exit 0
          else
            echo "Pytest execution failed"
            exit 1
          fi

      - name: Upload coverage results
        uses: actions/upload-artifact@v3
        if: env.MAIN_PYTHON_VERSION == matrix.python-version
        with:
          name: coverage-tests-embedding
          path: .cov
          retention-days: 7

      - name: Upload coverage results (as .coverage)
        uses: actions/upload-artifact@v3
        if: env.MAIN_PYTHON_VERSION == matrix.python-version
        with:
          name: coverage-file-tests-embedding
          path: .coverage
          retention-days: 7

  launch-tests:
    name: Launch testing and coverage
    runs-on: public-ubuntu-latest-8-cores
    container:
      image: ghcr.io/ansys/mechanical:${{needs.revn-variations.outputs.test}}
      options: --entrypoint /bin/bash
    needs: [ smoke-tests, revn-variations]
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11' ]

    steps:
      - uses: actions/checkout@v4
      - name: Set up python and pip
        run: |
          apt update
          apt install software-properties-common -y
          add-apt-repository ppa:deadsnakes/ppa -y
          apt install python${{ matrix.python-version }} -y
          ln -s /usr/bin/python${{ matrix.python-version }} /usr/bin/python
          apt install python${{ matrix.python-version }}-venv -y

      - name: Install pip
        if: matrix.python-version == '3.8'
        run: |
          apt install -y python3-pip

      - name: Install pip for >3.8
        if: matrix.python-version != '3.8'
        run: |
          python -m ensurepip --default-pip

      - name: Upgrade pip
        run: |
          pip3 install --upgrade pip
          python --version
          pip3 --version

      - name: Install dependencies
        run: |
          apt install -y lsb-release
          pip3 install --trusted-host pypi.org --trusted-host pypi.python.org --trusted-host files.pythonhosted.org pip setuptools
          pip3 install --upgrade pip flit

      - name: Install packages for testing
        run: |
          pip install .[tests]

      - name: Set environment variable
        run: echo "ANSYSCL${{ needs.revn-variations.outputs.test_lic }}_DIR=/install/ansys_inc/v${{ needs.revn-variations.outputs.test_lic }}/licensingclient" >> $GITHUB_ENV

      - name: Unit Testing and coverage
        env:
          LICENSE_SERVER: ${{ secrets.LICENSE_SERVER }}
          ANSYSLMD_LICENSE_FILE: 1055@${{ secrets.LICENSE_SERVER }}
          ANSYS_WORKBENCH_LOGGING_CONSOLE: 0
        run: |
          unset PYMECHANICAL_PORT
          unset PYMECHANICAL_START_INSTANCE
          pytest -m remote_session_launch > pytest_output.txt || true
          cat pytest_output.txt
          #
          # Check if failure occurred
          #
          output=$(grep -c "FAILURES" pytest_output.txt || true)
          if [ $output -eq 0 ]; then
            echo "Pytest execution succeeded"
            exit 0
          else
            echo "Pytest execution failed"
            exit 1
          fi

      - name: Upload coverage results
        uses: actions/upload-artifact@v3
        if: env.MAIN_PYTHON_VERSION == matrix.python-version
        with:
          name: coverage-tests-remote-session-launch
          path: .cov
          retention-days: 7

      - name: Upload coverage results (as .coverage)
        uses: actions/upload-artifact@v3
        if: env.MAIN_PYTHON_VERSION == matrix.python-version
        with:
          name: coverage-file-tests-remote-session-launch
          path: .coverage
          retention-days: 7

  docs:
    name: Documentation
    needs: [docs-style, revn-variations]
    runs-on: public-ubuntu-latest-8-cores
    steps:
      - name: Set the environment variable
        run: echo "DOCKER_IMAGE_VERSION=${{needs.revn-variations.outputs.default}}" >> $GITHUB_ENV

      - name: Login in Github Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull, launch, and validate Mechanical service
        env:
          LICENSE_SERVER: ${{ secrets.LICENSE_SERVER }}
          MECHANICAL_IMAGE: ${{ env.DOCKER_PACKAGE }}:${{ env.DOCKER_IMAGE_VERSION }}
        run: |
          echo CPU info
          lscpu
          docker pull ${{ env.MECHANICAL_IMAGE }}
          docker run --restart always --name ${{ env.DOCKER_MECH_CONTAINER_NAME }} -e ANSYSLMD_LICENSE_FILE=1055@${{ env.LICENSE_SERVER }} -p ${{ env.PYMECHANICAL_PORT }}:10000 ${{ env.MECHANICAL_IMAGE }} > log.txt &
          grep -q 'WB Initialize Done' <(timeout 60 tail -f log.txt)

      - name: Run Ansys documentation building action
        uses: ansys/actions/doc-build@v4
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
          dependencies: "pandoc"

      - name: Get Mechanical container logs
        if: always()
        run: docker logs ${{ env.DOCKER_MECH_CONTAINER_NAME }} > mechanical_documentation_log.txt 2>&1

      - name: Upload container logs
        uses: actions/upload-artifact@v3
        with:
          name: mechanical_documentation_log
          path: mechanical_documentation_log.txt
          retention-days: 7

  coverage:
    name: Merging coverage
    needs: [tests, embedding-tests, launch-tests]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

      - name: Install coverage
        run: |
          python -m pip install -U pip
          pip install coverage
          pip install -e .

      - name: Create common coverage directory
        run: mkdir cov-dir

      - uses: actions/download-artifact@v3
        with:
          name: coverage-file-tests-embedding
          path: cov-dir/embedding

      - uses: actions/download-artifact@v3
        with:
          name: coverage-file-tests-remote-session-launch
          path: cov-dir/launch

      - uses: actions/download-artifact@v3
        with:
          name: coverage-file-tests
          path: cov-dir/normal

      - name: Display structure of downloaded files
        run: ls -Ra

      - name: Move files to common location
        run: |
          mv cov-dir/embedding/.coverage .coverage.Embedding
          mv cov-dir/launch/.coverage .coverage.Launch
          mv cov-dir/normal/.coverage .coverage.Normal
          rm -rf cov-dir

      - name: Generate .coveragerc file
        run: |
          cat > .coveragerc << 'EOF'

          # .coveragerc to control coverage.py
          [run]
          relative_files = True

          [paths]
          source =
              src/ansys/mechanical
              /opt/hostedtoolcache/**/ansys/mechanical
              /usr/local/lib/**/ansys/mechanical

          EOF

      - name: Run coverage merge and show results
        run: |
          coverage combine --keep --debug=pathmap --rcfile=.coveragerc
          coverage report
          coverage html -d .coverage-combined/html
          coverage xml -o .coverage-combined/xml

      - name: Upload combined coverage results
        uses: actions/upload-artifact@v3
        with:
          name: combined-coverage-results
          path: .coverage-combined
          retention-days: 7

  package:
    name: Package library
    needs: [tests, embedding-tests, docs]
    runs-on: ubuntu-latest
    steps:
      - name: Build library source and wheel artifacts
        uses: ansys/actions/build-library@v4
        with:
          library-name: ${{ env.PACKAGE_NAME }}
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

  release:
    name: Release project
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    needs: [package]
    runs-on: ubuntu-latest
    steps:
      - name: Release to the public PyPI repository
        uses: ansys/actions/release-pypi-public@v4
        with:
          library-name: ${{ env.PACKAGE_NAME }}
          twine-username: "__token__"
          twine-token: ${{ secrets.PYPI_TOKEN }}

      - name: Release to GitHub
        uses: ansys/actions/release-github@v4
        with:
          library-name: ${{ env.PACKAGE_NAME }}

  upload_dev_docs:
    name: Upload dev documentation
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [package]
    steps:
      - name: Deploy the latest documentation
        uses: ansys/actions/doc-deploy-dev@v4
        with:
          cname: ${{ env.DOCUMENTATION_CNAME }}
          token: ${{ secrets.GITHUB_TOKEN }}

  upload_docs_release:
    name: Upload release documentation
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    runs-on: ubuntu-latest
    needs: [release]
    steps:
      - name: Deploy the stable documentation
        uses: ansys/actions/doc-deploy-stable@v4
        with:
          cname: ${{ env.DOCUMENTATION_CNAME }}
          token: ${{ secrets.GITHUB_TOKEN }}
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
