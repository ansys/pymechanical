name: GitHub CI

on:
  pull_request:
  schedule:
    - cron: '00 22 * * *'  # UTC time, may start 5-15 mins later than scheduled time
  workflow_dispatch:
    inputs:
      default-revn:
        type: choice
        description: 'Default revision number for containers.'
        options:
        - '241'
        - '232'
        - '231'
        default: '231'  # ensure this is the same as env.DEFAULT_REVN
      test-revn:
        type: choice
        description: 'Revision number for tests.'
        options:
        - '241'
        - '232'
        - '231'
        default: '232'  # ensure this is the same as env.TEST_REVN
  push:
    tags:
      - "*"
    branches:
      - main
      - release/*

env:
  PYMECHANICAL_PORT: 10000  # default won't work on GitHub runners
  PYMECHANICAL_START_INSTANCE: FALSE
  DOCKER_PACKAGE: ghcr.io/ansys/mechanical
  DOCKER_MECH_CONTAINER_NAME: mechanical
  MAIN_PYTHON_VERSION: '3.10'
  PACKAGE_NAME: ansys-mechanical-core
  PACKAGE_NAMESPACE: ansys.mechanical.core
  DOCUMENTATION_CNAME: mechanical.docs.pyansys.com
  DEFAULT_REVN: '231'  # ensure this is the same as inputs.default-revn.default
  TEST_REVN: '232'  # ensure this is the same as inputs.test-revn.default
  DEV_REVN: '241'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  revn-variations:
    name: Save variations of revn
    runs-on: ubuntu-latest
    outputs:
      default: ${{ steps.save-versions.outputs.default }}
      default_lic: ${{ steps.save-versions.outputs.default_lic }}
      test: ${{ steps.save-versions.outputs.test }}
      test_lic:  ${{ steps.save-versions.outputs.test_lic }}
    steps:
      - id: save-versions
        run: |
          parse_revns() {
            revn=$1  # For example, 231
            container_name=$2
            license_name=$3

            # Create container_version from revn
            container_version="${revn:0:2}.${revn:2}.0"  # For example, 23.1.0

            # Set output variables
            echo "$container_name=$container_version" >> $GITHUB_OUTPUT
            echo "$license_name=$revn" >> $GITHUB_OUTPUT
          }

          # Use default revn values if the input values were not chosen.
          # The input values are only selected in workflow_dispatch events.
          if [[ -z "${{ inputs.default-revn }}" || -z "${{ inputs.test-revn }}" ]]; then
            # If the event is a scheduled run, set the value to the DEV_REVN env var.
            if ${{ github.event_name == 'schedule' }}; then
              parse_revns "${{ env.DEV_REVN }}" "default" "default_lic"
              parse_revns "${{ env.DEV_REVN }}" "test" "test_lic"
            else
              parse_revns "${{ env.DEFAULT_REVN }}" "default" "default_lic"
              parse_revns "${{ env.TEST_REVN }}" "test" "test_lic"
            fi
          else
            # If the input values are selected, use those values instead of the env vars
            parse_revns "${{ inputs.default-revn }}" "default" "default_lic"
            parse_revns "${{ inputs.test-revn }}" "test" "test_lic"
          fi

  style:
    name: Code style
    runs-on: ubuntu-latest
    steps:
      - name: PyAnsys code style checks
        uses: ansys/actions/code-style@v4
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

  doc-style:
    name: Documentation Style Check
    runs-on: ubuntu-latest
    steps:
      - name: PyAnsys documentation style checks
        uses: ansys/actions/doc-style@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  doc-build:
    name: Documentation building
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/ansys/mechanical:23.2.0
      options: --entrypoint /bin/bash
    needs: [style, doc-style]

    steps:

      - name: Install Git and checkout project
        uses: actions/checkout@v4

      - name: Set up Python
        run: |
          apt update
          apt install -y python${{ env.MAIN_PYTHON_VERSION }} python3-pip
          ln -s /usr/bin/python${{ env.MAIN_PYTHON_VERSION }} /usr/bin/python
          python -m pip install --upgrade pip
          python --version
          pip3 --version

      - name: Install system dependencies
        run: |
          apt update
          apt install -y sudo curl lsb-release
          apt install -y zip pandoc libgl1-mesa-glx mesa-utils xvfb texlive-latex-extra latexmk nodejs npm graphviz
          apt install -y tini
          # pip3 install --trusted-host pypi.org --trusted-host pypi.python.org --trusted-host files.pythonhosted.org
          npm install -g @mermaid-js/mermaid-cli

      - name: Install Python requirements
        run: |
          pip3 install -r requirements/requirements_doc.txt

      - name: Retrieve PyMechanial version
        run: |
          echo "PYMECHANICAL_VERSION=$(python -c 'from ansys.mechanical.core import __version__; print(__version__)')" >> $GITHUB_ENV
          echo "PyMechanical version is: $(python -c "from ansys.mechanical.core import __version__; print(__version__)")"
        id: version

      - name: Build docs
        env:
          SPHINXOPTS: '-j auto'
          LICENSE_SERVER: ${{ secrets.LICENSE_SERVER }}
          ANSYSCL232_DIR: /install/ansys_inc/v232/licensingclient
          ANSYSLMD_LICENSE_FILE: 1055@${{ secrets.LICENSE_SERVER }}
          ANSYS_WORKBENCH_LOGGING_FILTER_LEVEL: 0
        run: |
          xvfb-run /install/ansys_inc/v232/aisol/.workbench_lite make -C doc html > doc_build_output.txt 2>&1 || true
          cat doc_build_output.txt
          #
          # Check if "build succeeded" string is present in doc_build_output.txt
          #
          if grep -q "build succeeded" doc_build_output.txt; then
            echo "Documentation building succeeded"
            exit 0
          else
            echo "Documentation building failed"
            exit 1
          fi

      - name: Upload HTML Documentation
        uses: actions/upload-artifact@v3
        with:
          name: documentation-html
          path: doc/_build/html
          retention-days: 7
